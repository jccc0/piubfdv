var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},s={},a=e.parcelRequiree531;null==a&&((a=function(e){if(e in r)return r[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){s[e]=t},e.parcelRequiree531=a),a.register("kjyEk",(function(e,t){})),a.register("cmoHh",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("euRi5",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("hDsEw",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("3J2Zm",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("6Px8M",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),s=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("lDm0S",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class i{refCount(e){return l("refCount")}incRef(e){return l("incRef")}timerAvailable(){return!0}time(e){return l("time")}read(e){return l("read")}readSync(e){return l("readSync")}readToGPU(e,t){return l("readToGPU")}numDataIds(){return l("numDataIds")}disposeData(e,t){return l("disposeData")}write(e,t,n){return l("write")}move(e,t,n,r,s){return l("move")}memory(){return l("memory")}floatPrecision(){return l("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return l("dispose")}}function l(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var u={};function c(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,f(e,t,n)}function p(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,f(e,n,r),f(t,n,r)}function h(e,t,n){return Math.max(e,Math.min(t,n))}function d(e){return e%2==0?e:e+1}function f(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function m(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function g(e,t){const n=Math.random();return t*n+(1-n)*e}function y(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function b(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function x(e,t,n=""){b(S(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function w(e){b(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function k(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||B(e)&&!n)for(let r=0;r<e.length;++r)k(e[r],t,n);else t.push(e);return t}function v(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function N(e){return 0===e.length}function S(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function I(e){return e%1==0}function T(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function E(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function $(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return c(t),t}function C(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function A(e,t=(e=>0),n){return new Promise(((r,s)=>{let a=0;const o=()=>{if(e())return void r();a++;const i=t(a);null!=n&&a>=n?s():setTimeout(o,i)};o()}))}function D(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function R(e,t){const n=t.length;return b((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),b(e.every((e=>I(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function F(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:R(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function _(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function M(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function L(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function z(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function B(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function P(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function V(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function W(e){return"string"==typeof e||e instanceof String}function U(e){return"boolean"==typeof e}function G(e){return"number"==typeof e}function H(e){return Array.isArray(e)?H(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":G(e)?"float32":W(e)?"string":U(e)?"bool":"float32"}function q(e){return!!(e&&e.constructor&&e.call&&e.apply)}function j(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function K(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function X(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=X(e+t*i,o,n,r)}return s}function Y(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return X(0,e,t,n)}function Z(e,t){const n=J(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function J(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Q(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Y(e,new Float32Array(n));if("int32"===t)return Y(e,new Int32Array(n));if("bool"===t)return Y(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ee(e){e.forEach((t=>{b(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function te(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function ne(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function re(e){return e&&e.then&&"function"==typeof e.then}t(u,"shuffle",(()=>c)),t(u,"swap",(()=>f)),t(u,"shuffleCombo",(()=>p)),t(u,"clamp",(()=>h)),t(u,"nearestLargerEven",(()=>d)),t(u,"sum",(()=>m)),t(u,"randUniform",(()=>g)),t(u,"distSquared",(()=>y)),t(u,"assert",(()=>b)),t(u,"assertShapesMatch",(()=>x)),t(u,"arraysEqual",(()=>S)),t(u,"assertNonNull",(()=>w)),t(u,"flatten",(()=>k)),t(u,"isTypedArray",(()=>B)),t(u,"sizeFromShape",(()=>v)),t(u,"isScalarShape",(()=>N)),t(u,"isInt",(()=>I)),t(u,"tanh",(()=>T)),t(u,"sizeToSquarishShape",(()=>E)),t(u,"createShuffledIndices",(()=>$)),t(u,"rightPad",(()=>C)),t(u,"repeatedTry",(()=>A)),t(u,"inferFromImplicitShape",(()=>D)),t(u,"parseAxisParam",(()=>R)),t(u,"squeezeShape",(()=>F)),t(u,"getTypedArrayFromDType",(()=>_)),t(u,"getArrayFromDType",(()=>O)),t(u,"checkConversionForErrors",(()=>M)),t(u,"isValidDtype",(()=>L)),t(u,"hasEncodingLoss",(()=>z)),t(u,"bytesPerElement",(()=>P)),t(u,"bytesFromStringArray",(()=>V)),t(u,"isString",(()=>W)),t(u,"isBoolean",(()=>U)),t(u,"isNumber",(()=>G)),t(u,"inferDtype",(()=>H)),t(u,"isFunction",(()=>q)),t(u,"nearestDivisor",(()=>j)),t(u,"computeStrides",(()=>K)),t(u,"toNestedArray",(()=>Y)),t(u,"makeOnesTypedArray",(()=>Z)),t(u,"makeZerosTypedArray",(()=>J)),t(u,"makeZerosNestedTypedArray",(()=>Q)),t(u,"assertNonNegativeIntegerDimensions",(()=>ee)),t(u,"locToIndex",(()=>te)),t(u,"indexToLoc",(()=>ne)),t(u,"isPromise",(()=>re));class se{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ae,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(re(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function ae(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function oe(){return ie}let ie=null;var le,ue,ce={},pe=ce={};function he(){throw new Error("setTimeout has not been defined")}function de(){throw new Error("clearTimeout has not been defined")}function fe(e){if(le===setTimeout)return setTimeout(e,0);if((le===he||!le)&&setTimeout)return le=setTimeout,setTimeout(e,0);try{return le(e,0)}catch(t){try{return le.call(null,e,0)}catch(t){return le.call(this,e,0)}}}!function(){try{le="function"==typeof setTimeout?setTimeout:he}catch(e){le=he}try{ue="function"==typeof clearTimeout?clearTimeout:de}catch(e){ue=de}}();var me,ge=[],ye=!1,be=-1;function xe(){ye&&me&&(ye=!1,me.length?ge=me.concat(ge):be=-1,ge.length&&we())}function we(){if(!ye){var e=fe(xe);ye=!0;for(var t=ge.length;t;){for(me=ge,ge=[];++be<t;)me&&me[be].run();be=-1,t=ge.length}me=null,ye=!1,function(e){if(ue===clearTimeout)return clearTimeout(e);if((ue===de||!ue)&&clearTimeout)return ue=clearTimeout,clearTimeout(e);try{ue(e)}catch(t){try{return ue.call(null,e)}catch(t){return ue.call(this,e)}}}(e)}}function ke(e,t){this.fun=e,this.array=t}function ve(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ne;function Se(){if(null==Ne){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==ce)t=ce;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ne=t}return Ne}function Ie(e,t){const n=function(){const e=Se();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}pe.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];ge.push(new ke(e,t)),1!==ge.length||ye||fe(we)},ke.prototype.run=function(){this.fun.apply(null,this.array)},pe.title="browser",pe.browser=!0,pe.env={},pe.argv=[],pe.version="",pe.versions={},pe.on=ve,pe.addListener=ve,pe.once=ve,pe.off=ve,pe.removeListener=ve,pe.removeAllListeners=ve,pe.emit=ve,pe.prependListener=ve,pe.prependOnceListener=ve,pe.listeners=function(e){return[]},pe.binding=function(e){throw new Error("process.binding is not supported")},pe.cwd=function(){return"/"},pe.chdir=function(e){throw new Error("process.chdir is not supported")},pe.umask=function(){return 0};var Te={};function Ee(...e){oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(...e)}function $e(...e){oe().getBool("IS_TEST")||oe().getBool("PROD")||console.log(...e)}t(Te,"warn",(()=>Ee)),t(Te,"log",(()=>$e));const Ce=Ie("kernelRegistry",(()=>new Map)),Ae=Ie("gradRegistry",(()=>new Map));function De(e,t){const n=Me(e,t);return Ce.get(n)}function Re(e){return Ae.get(e)}function Fe(e){const t=Ce.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function _e(e){const{kernelName:t,backendName:n}=e,r=Me(t,n);Ce.has(r)&&Ee(`The kernel '${t}' for backend '${n}' is already registered`),Ce.set(r,e)}function Oe(e){const{kernelName:t}=e;Ae.has(t)&&oe().getBool("DEBUG")&&Ee(`Overriding the gradient for '${t}'`),Ae.set(t,e)}function Me(e,t){return`${t}_${e}`}var Le={};t(Le,"createScalarValue",(()=>Nt)),t(Le,"encodeString",(()=>Et)),t(Le,"toTypedArray",(()=>St)),t(Le,"now",(()=>It)),t(Le,"fetch",(()=>Tt)),t(Le,"decodeString",(()=>$t));var ze={};t(ze,"hexToLong",(()=>pt)),t(ze,"fingerPrint64",(()=>vt));var Be;Be=Ve;var Pe=null;try{Pe=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Ve(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function We(e){return!0===(e&&e.__isLong__)}Ve.prototype.__isLong__,Object.defineProperty(Ve.prototype,"__isLong__",{value:!0}),Ve.isLong=We;var Ue={},Ge={};function He(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=Ge[e])?r:(n=je(e,(0|e)<0?-1:0,!0),s&&(Ge[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=Ue[e])?r:(n=je(e,e<0?-1:0,!1),s&&(Ue[e]=n),n)}function qe(e,t){if(isNaN(e))return t?nt:tt;if(t){if(e<0)return nt;if(e>=Je)return it}else{if(e<=-Qe)return lt;if(e+1>=Qe)return ot}return e<0?qe(-e,t).neg():je(e%Ze|0,e/Ze|0,t)}function je(e,t,n){return new Ve(e,t,n)}Ve.fromInt=He,Ve.fromNumber=qe,Ve.fromBits=je;var Ke=Math.pow;function Xe(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return tt;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return Xe(e.substring(1),t,n).neg();for(var s=qe(Ke(n,8)),a=tt,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),l=parseInt(e.substring(o,o+i),n);if(i<8){var u=qe(Ke(n,i));a=a.mul(u).add(qe(l))}else a=(a=a.mul(s)).add(qe(l))}return a.unsigned=t,a}function Ye(e,t){return"number"==typeof e?qe(e,t):"string"==typeof e?Xe(e,t):je(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Ve.fromString=Xe,Ve.fromValue=Ye;var Ze=4294967296,Je=Ze*Ze,Qe=Je/2,et=He(16777216),tt=He(0);Ve.ZERO=tt;var nt=He(0,!0);Ve.UZERO=nt;var rt=He(1);Ve.ONE=rt;var st=He(1,!0);Ve.UONE=st;var at=He(-1);Ve.NEG_ONE=at;var ot=je(-1,2147483647,!1);Ve.MAX_VALUE=ot;var it=je(-1,-1,!0);Ve.MAX_UNSIGNED_VALUE=it;var lt=je(0,-2147483648,!1);Ve.MIN_VALUE=lt;var ut=Ve.prototype;ut.toInt=function(){return this.unsigned?this.low>>>0:this.low},ut.toNumber=function(){return this.unsigned?(this.high>>>0)*Ze+(this.low>>>0):this.high*Ze+(this.low>>>0)},ut.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(lt)){var t=qe(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=qe(Ke(e,6),this.unsigned),a=this,o="";;){var i=a.div(s),l=(a.sub(i.mul(s)).toInt()>>>0).toString(e);if((a=i).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},ut.getHighBits=function(){return this.high},ut.getHighBitsUnsigned=function(){return this.high>>>0},ut.getLowBits=function(){return this.low},ut.getLowBitsUnsigned=function(){return this.low>>>0},ut.getNumBitsAbs=function(){if(this.isNegative())return this.eq(lt)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},ut.isZero=function(){return 0===this.high&&0===this.low},ut.eqz=ut.isZero,ut.isNegative=function(){return!this.unsigned&&this.high<0},ut.isPositive=function(){return this.unsigned||this.high>=0},ut.isOdd=function(){return 1==(1&this.low)},ut.isEven=function(){return 0==(1&this.low)},ut.equals=function(e){return We(e)||(e=Ye(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},ut.eq=ut.equals,ut.notEquals=function(e){return!this.eq(e)},ut.neq=ut.notEquals,ut.ne=ut.notEquals,ut.lessThan=function(e){return this.comp(e)<0},ut.lt=ut.lessThan,ut.lessThanOrEqual=function(e){return this.comp(e)<=0},ut.lte=ut.lessThanOrEqual,ut.le=ut.lessThanOrEqual,ut.greaterThan=function(e){return this.comp(e)>0},ut.gt=ut.greaterThan,ut.greaterThanOrEqual=function(e){return this.comp(e)>=0},ut.gte=ut.greaterThanOrEqual,ut.ge=ut.greaterThanOrEqual,ut.compare=function(e){if(We(e)||(e=Ye(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ut.comp=ut.compare,ut.negate=function(){return!this.unsigned&&this.eq(lt)?lt:this.not().add(rt)},ut.neg=ut.negate,ut.add=function(e){We(e)||(e=Ye(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=0,u=0,c=0,p=0;return c+=(p+=s+(65535&e.low))>>>16,u+=(c+=r+i)>>>16,l+=(u+=n+o)>>>16,l+=t+a,je((c&=65535)<<16|(p&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},ut.subtract=function(e){return We(e)||(e=Ye(e)),this.add(e.neg())},ut.sub=ut.subtract,ut.multiply=function(e){if(this.isZero())return tt;if(We(e)||(e=Ye(e)),Pe)return je(Pe.mul(this.low,this.high,e.low,e.high),Pe.get_high(),this.unsigned);if(e.isZero())return tt;if(this.eq(lt))return e.isOdd()?lt:tt;if(e.eq(lt))return this.isOdd()?lt:tt;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(et)&&e.lt(et))return qe(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=65535&e.low,u=0,c=0,p=0,h=0;return p+=(h+=s*l)>>>16,c+=(p+=r*l)>>>16,p&=65535,c+=(p+=s*i)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=r*i)>>>16,c&=65535,u+=(c+=s*o)>>>16,u+=t*l+n*i+r*o+s*a,je((p&=65535)<<16|(h&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},ut.mul=ut.multiply,ut.divide=function(e){if(We(e)||(e=Ye(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Pe)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?je((this.unsigned?Pe.div_u:Pe.div_s)(this.low,this.high,e.low,e.high),Pe.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?nt:tt;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return nt;if(e.gt(this.shru(1)))return st;r=nt}else{if(this.eq(lt))return e.eq(rt)||e.eq(at)?lt:e.eq(lt)?rt:(t=this.shr(1).div(e).shl(1)).eq(tt)?e.isNegative()?rt:at:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(lt))return this.unsigned?nt:tt;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=tt}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),a=s<=48?1:Ke(2,s-48),o=qe(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=qe(t-=a,this.unsigned)).mul(e);o.isZero()&&(o=rt),r=r.add(o),n=n.sub(i)}return r},ut.div=ut.divide,ut.modulo=function(e){return We(e)||(e=Ye(e)),Pe?je((this.unsigned?Pe.rem_u:Pe.rem_s)(this.low,this.high,e.low,e.high),Pe.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ut.mod=ut.modulo,ut.rem=ut.modulo,ut.not=function(){return je(~this.low,~this.high,this.unsigned)},ut.and=function(e){return We(e)||(e=Ye(e)),je(this.low&e.low,this.high&e.high,this.unsigned)},ut.or=function(e){return We(e)||(e=Ye(e)),je(this.low|e.low,this.high|e.high,this.unsigned)},ut.xor=function(e){return We(e)||(e=Ye(e)),je(this.low^e.low,this.high^e.high,this.unsigned)},ut.shiftLeft=function(e){return We(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?je(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):je(0,this.low<<e-32,this.unsigned)},ut.shl=ut.shiftLeft,ut.shiftRight=function(e){return We(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?je(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):je(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ut.shr=ut.shiftRight,ut.shiftRightUnsigned=function(e){if(We(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?je(this.low>>>e|t<<32-e,t>>>e,this.unsigned):je(32===e?t:t>>>e-32,0,this.unsigned)},ut.shru=ut.shiftRightUnsigned,ut.shr_u=ut.shiftRightUnsigned,ut.toSigned=function(){return this.unsigned?je(this.low,this.high,!1):this},ut.toUnsigned=function(){return this.unsigned?this:je(this.low,this.high,!0)},ut.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ut.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ut.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Ve.fromBytes=function(e,t,n){return n?Ve.fromBytesLE(e,t):Ve.fromBytesBE(e,t)},Ve.fromBytesLE=function(e,t){return new Ve(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Ve.fromBytesBE=function(e,t){return new Ve(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const ct=Be.default||Be;function pt(e){return ct.fromString(e,!0,16)}const ht=pt("c3a5c85c97cb3127"),dt=pt("b492b66fbe98f273"),ft=pt("9ae16a3b2f90404f");function mt(e){return e.xor(e.shru(47))}function gt(e,t,n){const r=e.slice(t,t+n);return ct.fromBytes(Array.from(r),!0,!0)}function yt(e,t){return gt(e,t,8)}function bt(e,t){return gt(e,t,4)}function xt(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function wt(e,t,n=pt("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function kt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=xt(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(xt(s,44)),[s.add(r),a.add(o)]}(yt(e,t),yt(e,t+8),yt(e,t+16),yt(e,t+24),n,r)}function vt(e,t=e.length){const n=ct.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=ft.add(2*t),r=yt(e,0).add(ft),s=yt(e,t-8);return wt(xt(s,37).mul(n).add(r),xt(r,25).add(s).mul(n),n)}if(t>=4){const n=ft.add(2*t);return wt(bt(e,0).shl(3).add(t),bt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return mt(ft.mul(n).xor(ht.mul(r))).mul(ft)}return ft}(e,t):function(e,t=e.length){const n=ft.add(2*t),r=yt(e,0).mul(dt),s=yt(e,8),a=yt(e,t-8).mul(n),o=yt(e,t-16).mul(ft);return wt(xt(r.add(s),43).add(xt(a,30)).add(o),r.add(xt(s.add(ft),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=ft.add(2*t),r=yt(e,0).mul(ft),s=yt(e,8),a=yt(e,t-8).mul(n),o=yt(e,t-16).mul(ft),i=xt(r.add(s),43).add(xt(a,30)).add(o),l=wt(i,r.add(xt(s.add(ft),18)).add(a),n),u=yt(e,16).mul(n),c=yt(e,24),p=i.add(yt(e,t-32)).mul(n),h=l.add(yt(e,t-24)).mul(n);return wt(xt(u.add(c),43).add(xt(p,30)).add(h),u.add(xt(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(dt).add(113),a=mt(s.mul(ft).add(113)).mul(ft),o=[ct.UZERO,ct.UZERO],i=[ct.UZERO,ct.UZERO];r=r.mul(ft).add(yt(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=xt(r.add(s).add(o[0]).add(yt(e,l+8)),37).mul(dt),s=xt(s.add(o[1]).add(yt(e,l+48)),42).mul(dt),r=r.xor(i[1]),s=s.add(o[0]).add(yt(e,l+40)),a=xt(a.add(i[0]),33).mul(dt),o=kt(e,l,o[1].mul(dt),r.add(i[0])),i=kt(e,l+32,a.add(i[1]),s.add(yt(e,l+16))),[a,r]=[r,a],l+=64}while(l!==u);const p=dt.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=xt(r.add(s).add(o[0]).add(yt(e,l+8)),37).mul(p),s=xt(s.add(o[1]).add(yt(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(yt(e,l+40))),a=xt(a.add(i[0]),33).mul(p),o=kt(e,l,o[1].mul(p),r.add(i[0])),i=kt(e,l+32,a.add(i[1]),s.add(yt(e,l+16))),[a,r]=[r,a],wt(wt(o[0],i[0],p).add(mt(s).mul(ht)).add(a),wt(o[1],i[1],p).add(r),p)}function Nt(e,t){return"string"===t?Et(e):St([e],t)}function St(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=k(e)),oe().getBool("DEBUG")&&M(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function It(){return oe().platform.now()}function Tt(e,t){return oe().platform.fetch(e,t)}function Et(e,t="utf-8"){return t=t||"utf-8",oe().platform.encode(e,t)}function $t(e,t="utf-8"){return t=t||"utf-8",oe().platform.decode(e,t)}n(Le,u),n(Le,ze);class Ct{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Dt)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=It();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:It()-o})}if(oe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{At(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function At(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Dt{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?C(`${r}ms`,9):r.error,i=C(e,25),l=t.rank,u=t.size,c=C(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Rt(e,t,n,r){const s=K(t),a=function(e,t,n,r){const s=v(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?Mt(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Ft(l[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Ot(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function Ft(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:W(e)?`'${e}'`:"bool"===n?_t(e):parseFloat(e.toFixed(7)).toString(),C(r,t)}function _t(e){return 0===e?"false":"true"}function Ot(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[Ft(Mt(e)[0],0,n)]}return"bool"===n?[_t(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Mt(r),a=Mt(a)),["["+r.map(((e,t)=>Ft(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Ft(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Mt(e):Array.from(e)).map(((e,t)=>Ft(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...Ot(e.slice(r,a),u,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...Ot(e.slice(r,a),u,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Ot(e.slice(r,a),u,n,c,s,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Mt(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Lt{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=v(e),null!=n){const e=n.length;b(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||O(t,this.size),this.strides=K(e)}set(e,...t){0===t.length&&(t=[0]),b(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return zt().makeTensor(this.values,this.shape,this.dtype)}}let zt=null,Bt=null,Pt=null;class Vt{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=v(e),this.strides=K(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Bt.buffer(this.shape,this.dtype,e)}bufferSync(){return Bt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Y(this.shape,e,"complex64"===this.dtype)}arraySync(){return Y(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=zt().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>$t(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),zt().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=zt().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>$t(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await zt().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(zt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Bt.print(this,e)}clone(){return this.throwIfDisposed(),Bt.clone(this)}toString(e=!1){return Rt(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Bt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),zt().makeVariable(this,e,t,n)}}function Wt(){return Ie("Tensor",(()=>Vt))}Object.defineProperty(Vt,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Wt();class Ut extends Vt{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!S(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);zt().disposeTensor(this),this.dataId=e.dataId,zt().incRef(this,null)}dispose(){zt().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Ut,Symbol.hasInstance,{value:e=>e instanceof Vt&&null!=e.assign&&e.assign instanceof Function});var Gt,Ht,qt,jt,Kt,Xt,Yt,Zt,Jt,Qt={};t(Qt,"makeTypesMatch",(()=>rn)),t(Qt,"assertTypesMatch",(()=>sn)),t(Qt,"isTensorInList",(()=>an)),t(Qt,"getTensorsInContainer",(()=>on)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Gt||(Gt={})),(qt=Ht||(Ht={})).float32="float32",qt.int32="int32",qt.bool="int32",qt.complex64="complex64",(Kt=jt||(jt={})).float32="float32",Kt.int32="int32",Kt.bool="bool",Kt.complex64="complex64",(Yt=Xt||(Xt={})).float32="float32",Yt.int32="float32",Yt.bool="float32",Yt.complex64="complex64",(Jt=Zt||(Zt={})).float32="complex64",Jt.int32="complex64",Jt.bool="complex64",Jt.complex64="complex64";const en={float32:Xt,int32:Ht,bool:jt,complex64:Zt};function tn(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return en[e][t]}function nn(e){return tn(e,"int32")}function rn(e,t){if(e.dtype===t.dtype)return[e,t];const n=tn(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function sn(e,t){b(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function an(e,t){return t.some((t=>t.id===e.id))}function on(e){const t=[];return ln(e,t,new Set),t}function ln(e,t,n){if(null==e)return;if(e instanceof Vt)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),ln(r,t,n))}}function un(e){return null!=e.kernelName}class cn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class pn{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new cn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Ee(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ct(this.backendInstance),!0}setupRegisteredKernels(){Fe(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Fe(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof i||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Ee(`Initialization of backend ${e} failed`),Ee(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Ee(`Initialization of backend ${e} failed`),Ee(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return pn.nextTensorId++}nextVariableId(){return pn.nextVariableId++}clone(e){const t=dn.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return dn.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=De(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=un(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(un(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const l=De(t,this.backendName);b(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,s,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=un(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Re(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(b(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&W(e[0])&&(s=e.map((e=>Et(e))));const a=r.write(s,t,n),o=new Vt(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=V(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s=new Vt(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Ut(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*P(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Ut||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*P(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=Re(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=J(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=on(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(b(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));b(s instanceof Vt,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Z(v(e),"float32");return dn.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!S(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),fn);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return b(q(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;b(t.every((e=>e instanceof Vt)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),b(n.value instanceof Vt,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),b(q(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];b(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),b(a.every((e=>e instanceof Vt)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=It(),n=await this.backend.time(e);return n.wallMs=It()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new cn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function hn(){const e=Se();if(null==e._tfengine){const t=new se(e);e._tfengine=new pn(t)}var t;return t=e._tfengine.ENV,ie=t,zt=()=>e._tfengine,e._tfengine}pn.nextTensorId=0,pn.nextVariableId=0;const dn=hn();function fn(e,t){const n={a:e,b:t};return dn.runKernel("Add",n)}var mn={};let gn;function yn(e){gn=e}function bn(e){if(void 0!==gn)return gn;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function xn(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(mn,"mockIsMobile",(()=>yn)),t(mn,"isMobile",(()=>bn)),t(mn,"isBrowser",(()=>xn));const wn=oe();function kn(e,t){let n=e;if(B(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||B(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&oe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&vn(e,r,[]),r}function vn(e,t,n){if(n=n||[],!Array.isArray(e)&&!B(e))return void b(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));b(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),b(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)vn(e[t],r,n.concat(t))}function Nn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Sn(e,t,n,r="numeric"){if(e instanceof Vt)return Nn(r,e.dtype,t,n),e;let s=H(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Nn(r,s,t,n),null==e||!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=kn(e,s);B(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?St(e,s):k(e,[],!0);return dn.makeTensor(o,a,s)}function In(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>Sn(e,`${t}[${s}]`,n,r)))}wn.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),wn.registerFlag("IS_BROWSER",(()=>xn())),wn.registerFlag("IS_NODE",(()=>void 0!==ce&&void 0!==ce.versions&&void 0!==ce.versions.node)),wn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),wn.registerFlag("PROD",(()=>!1)),wn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>wn.getBool("DEBUG"))),wn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),wn.registerFlag("IS_TEST",(()=>!1)),wn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),wn.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));function Tn(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{dn.startScope(n);try{const t=r(...e);return re(t)&&console.error("Cannot return a Promise inside of tidy."),dn.endScope(t),t}catch(e){throw dn.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const En=Tn({complex_:function(e,t){const n=Sn(e,"real","complex"),r=Sn(t,"imag","complex");x(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return dn.runKernel("Complex",s)}});function $n(e,t,n,r){if(null==r&&(r=H(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ee(t);const e=v(t),r=v(n);b(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==v(t.slice(e));b(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return B(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?St(e,r):k(e,[],!0),dn.makeTensor(e,t,r)}function Cn(e,t,n){return $n(e,t,kn(e,n),n)}const An={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Dn,Rn,Fn;Rn=function(e){var t,n,r=Wn(e),s=r[0],a=r[1],o=new zn(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),i=0,l=a>0?s-4:s;for(n=0;n<l;n+=4)t=Ln[e.charCodeAt(n)]<<18|Ln[e.charCodeAt(n+1)]<<12|Ln[e.charCodeAt(n+2)]<<6|Ln[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===a&&(t=Ln[e.charCodeAt(n)]<<2|Ln[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===a&&(t=Ln[e.charCodeAt(n)]<<10|Ln[e.charCodeAt(n+1)]<<4|Ln[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},Fn=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,o=0,i=n-r;o<i;o+=a)s.push(Un(e,o,o+a>i?i:o+a));1===r?(t=e[n-1],s.push(Mn[t>>2]+Mn[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(Mn[t>>10]+Mn[t>>4&63]+Mn[t<<2&63]+"="));return s.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var _n,On,Mn=[],Ln=[],zn="undefined"!=typeof Uint8Array?Uint8Array:Array,Bn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Pn=0,Vn=Bn.length;Pn<Vn;++Pn)Mn[Pn]=Bn[Pn],Ln[Bn.charCodeAt(Pn)]=Pn;function Wn(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Un(e,t,n){for(var r,s,a=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(Mn[(s=r)>>18&63]+Mn[s>>12&63]+Mn[s>>6&63]+Mn[63&s]);return a.join("")}Ln["-".charCodeAt(0)]=62,Ln["_".charCodeAt(0)]=63,_n=function(e,t,n,r,s){var a,o,i=8*s-r-1,l=(1<<i)-1,u=l>>1,c=-7,p=n?s-1:0,h=n?-1:1,d=e[t+p];for(p+=h,a=d&(1<<-c)-1,d>>=-c,c+=i;c>0;a=256*a+e[t+p],p+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===a)a=1-u;else{if(a===l)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),a-=u}return(d?-1:1)*o*Math.pow(2,a-r)},On=function(e,t,n,r,s,a){var o,i,l,u=8*a-s-1,c=(1<<u)-1,p=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+p>=1?h/l:h*Math.pow(2,1-p))*l>=2&&(o++,l/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*l-1)*Math.pow(2,s),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,s),o=0));s>=8;e[n+d]=255&i,d+=f,i/=256,s-=8);for(o=o<<s|i,u+=s;u>0;e[n+d]=255&o,d+=f,o/=256,u-=8);e[n+d-f]|=128*m};const Gn="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;Dn=qn;function Hn(e){if(e>2147483647)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,qn.prototype),t}function qn(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Xn(e)}return jn(e,t,n)}function jn(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!qn.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Qn(e,t);let r=Hn(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Rr(e,Uint8Array)){const t=new Uint8Array(e);return Zn(t.buffer,t.byteOffset,t.byteLength)}return Yn(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Rr(e,ArrayBuffer)||e&&Rr(e.buffer,ArrayBuffer))return Zn(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(Rr(e,SharedArrayBuffer)||e&&Rr(e.buffer,SharedArrayBuffer)))return Zn(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return qn.from(r,t,n);const s=function(e){if(qn.isBuffer(e)){const t=0|Jn(e.length),n=Hn(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Fr(e.length)?Hn(0):Yn(e);if("Buffer"===e.type&&Array.isArray(e.data))return Yn(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return qn.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Kn(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Xn(e){return Kn(e),Hn(e<0?0:0|Jn(e))}function Yn(e){const t=e.length<0?0:0|Jn(e.length),n=Hn(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function Zn(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,qn.prototype),r}function Jn(e){if(e>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|e}function Qn(e,t){if(qn.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Rr(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Cr(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Ar(e).length;default:if(s)return r?-1:Cr(e).length;t=(""+t).toLowerCase(),s=!0}}function er(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return dr(this,t,n);case"utf8":case"utf-8":return cr(this,t,n);case"ascii":return pr(this,t,n);case"latin1":case"binary":return hr(this,t,n);case"base64":return ur(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return fr(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function tr(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function nr(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Fr(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=qn.from(t,r)),qn.isBuffer(t))return 0===t.length?-1:rr(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):rr(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function rr(e,t,n,r,s){let a,o=1,i=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,l/=2,n/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let r=-1;for(a=n;a<i;a++)if(u(e,a)===u(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===l)return r*o}else-1!==r&&(a-=a-r),r=-1}else for(n+l>i&&(n=i-l),a=n;a>=0;a--){let n=!0;for(let r=0;r<l;r++)if(u(e,a+r)!==u(t,r)){n=!1;break}if(n)return a}return-1}function sr(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let o;for(r>a/2&&(r=a/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(Fr(r))return o;e[n+o]=r}return o}function ar(e,t,n,r){return Dr(Cr(t,e.length-n),e,n,r)}function or(e,t,n,r){return Dr(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function ir(e,t,n,r){return Dr(Ar(t),e,n,r)}function lr(e,t,n,r){return Dr(function(e,t){let n,r,s;const a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function ur(e,t,n){return 0===t&&n===e.length?Fn(e):Fn(e.slice(t,n))}function cr(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=n){let n,r,i,l;switch(o){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(l=(15&t)<<12|(63&n)<<6|63&r,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[s+1],r=e[s+2],i=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,o=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=o}return function(e){const t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}qn.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),qn.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(qn.prototype,"parent",{enumerable:!0,get:function(){if(qn.isBuffer(this))return this.buffer}}),Object.defineProperty(qn.prototype,"offset",{enumerable:!0,get:function(){if(qn.isBuffer(this))return this.byteOffset}}),qn.poolSize=8192,qn.from=function(e,t,n){return jn(e,t,n)},Object.setPrototypeOf(qn.prototype,Uint8Array.prototype),Object.setPrototypeOf(qn,Uint8Array),qn.alloc=function(e,t,n){return function(e,t,n){return Kn(e),e<=0?Hn(e):void 0!==t?"string"==typeof n?Hn(e).fill(t,n):Hn(e).fill(t):Hn(e)}(e,t,n)},qn.allocUnsafe=function(e){return Xn(e)},qn.allocUnsafeSlow=function(e){return Xn(e)},qn.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==qn.prototype},qn.compare=function(e,t){if(Rr(e,Uint8Array)&&(e=qn.from(e,e.offset,e.byteLength)),Rr(t,Uint8Array)&&(t=qn.from(t,t.offset,t.byteLength)),!qn.isBuffer(e)||!qn.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},qn.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},qn.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return qn.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=qn.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(Rr(t,Uint8Array))s+t.length>r.length?(qn.isBuffer(t)||(t=qn.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!qn.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},qn.byteLength=Qn,qn.prototype._isBuffer=!0,qn.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)tr(this,t,t+1);return this},qn.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)tr(this,t,t+3),tr(this,t+1,t+2);return this},qn.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)tr(this,t,t+7),tr(this,t+1,t+6),tr(this,t+2,t+5),tr(this,t+3,t+4);return this},qn.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?cr(this,0,e):er.apply(this,arguments)},qn.prototype.toLocaleString=qn.prototype.toString,qn.prototype.equals=function(e){if(!qn.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===qn.compare(this,e)},qn.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},Gn&&(qn.prototype[Gn]=qn.prototype.inspect),qn.prototype.compare=function(e,t,n,r,s){if(Rr(e,Uint8Array)&&(e=qn.from(e,e.offset,e.byteLength)),!qn.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(a,o),l=this.slice(r,s),u=e.slice(t,n);for(let e=0;e<i;++e)if(l[e]!==u[e]){a=l[e],o=u[e];break}return a<o?-1:o<a?1:0},qn.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},qn.prototype.indexOf=function(e,t,n){return nr(this,e,t,n,!0)},qn.prototype.lastIndexOf=function(e,t,n){return nr(this,e,t,n,!1)},qn.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return sr(this,e,t,n);case"utf8":case"utf-8":return ar(this,e,t,n);case"ascii":case"latin1":case"binary":return or(this,e,t,n);case"base64":return ir(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return lr(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},qn.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function pr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function hr(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function dr(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=_r[e[r]];return s}function fr(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function mr(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function gr(e,t,n,r,s,a){if(!qn.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function yr(e,t,n,r,s){Ir(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function br(e,t,n,r,s){Ir(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function xr(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function wr(e,t,n,r,s){return t=+t,n>>>=0,s||xr(e,0,n,4),On(e,t,n,r,23,4),n+4}function kr(e,t,n,r,s){return t=+t,n>>>=0,s||xr(e,0,n,8),On(e,t,n,r,52,8),n+8}qn.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,qn.prototype),r},qn.prototype.readUintLE=qn.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||mr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},qn.prototype.readUintBE=qn.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||mr(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},qn.prototype.readUint8=qn.prototype.readUInt8=function(e,t){return e>>>=0,t||mr(e,1,this.length),this[e]},qn.prototype.readUint16LE=qn.prototype.readUInt16LE=function(e,t){return e>>>=0,t||mr(e,2,this.length),this[e]|this[e+1]<<8},qn.prototype.readUint16BE=qn.prototype.readUInt16BE=function(e,t){return e>>>=0,t||mr(e,2,this.length),this[e]<<8|this[e+1]},qn.prototype.readUint32LE=qn.prototype.readUInt32LE=function(e,t){return e>>>=0,t||mr(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},qn.prototype.readUint32BE=qn.prototype.readUInt32BE=function(e,t){return e>>>=0,t||mr(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},qn.prototype.readBigUInt64LE=Or((function(e){Tr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Er(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),qn.prototype.readBigUInt64BE=Or((function(e){Tr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Er(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),qn.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||mr(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},qn.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||mr(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},qn.prototype.readInt8=function(e,t){return e>>>=0,t||mr(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},qn.prototype.readInt16LE=function(e,t){e>>>=0,t||mr(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},qn.prototype.readInt16BE=function(e,t){e>>>=0,t||mr(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},qn.prototype.readInt32LE=function(e,t){return e>>>=0,t||mr(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},qn.prototype.readInt32BE=function(e,t){return e>>>=0,t||mr(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},qn.prototype.readBigInt64LE=Or((function(e){Tr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Er(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),qn.prototype.readBigInt64BE=Or((function(e){Tr(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Er(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),qn.prototype.readFloatLE=function(e,t){return e>>>=0,t||mr(e,4,this.length),_n(this,e,!0,23,4)},qn.prototype.readFloatBE=function(e,t){return e>>>=0,t||mr(e,4,this.length),_n(this,e,!1,23,4)},qn.prototype.readDoubleLE=function(e,t){return e>>>=0,t||mr(e,8,this.length),_n(this,e,!0,52,8)},qn.prototype.readDoubleBE=function(e,t){return e>>>=0,t||mr(e,8,this.length),_n(this,e,!1,52,8)},qn.prototype.writeUintLE=qn.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){gr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},qn.prototype.writeUintBE=qn.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){gr(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},qn.prototype.writeUint8=qn.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,1,255,0),this[t]=255&e,t+1},qn.prototype.writeUint16LE=qn.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},qn.prototype.writeUint16BE=qn.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},qn.prototype.writeUint32LE=qn.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},qn.prototype.writeUint32BE=qn.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},qn.prototype.writeBigUInt64LE=Or((function(e,t=0){return yr(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),qn.prototype.writeBigUInt64BE=Or((function(e,t=0){return br(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),qn.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);gr(this,e,t,n,r-1,-r)}let s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},qn.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);gr(this,e,t,n,r-1,-r)}let s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},qn.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},qn.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},qn.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},qn.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},qn.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||gr(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},qn.prototype.writeBigInt64LE=Or((function(e,t=0){return yr(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),qn.prototype.writeBigInt64BE=Or((function(e,t=0){return br(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),qn.prototype.writeFloatLE=function(e,t,n){return wr(this,e,t,!0,n)},qn.prototype.writeFloatBE=function(e,t,n){return wr(this,e,t,!1,n)},qn.prototype.writeDoubleLE=function(e,t,n){return kr(this,e,t,!0,n)},qn.prototype.writeDoubleBE=function(e,t,n){return kr(this,e,t,!1,n)},qn.prototype.copy=function(e,t,n,r){if(!qn.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},qn.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!qn.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=qn.isBuffer(e)?e:qn.from(e,r),o=a.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};const vr={};function Nr(e,t,n){vr[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Sr(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Ir(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new vr.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){Tr(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||Er(t,e.length-(n+1))}(r,s,a)}function Tr(e,t){if("number"!=typeof e)throw new vr.ERR_INVALID_ARG_TYPE(t,"number",e)}function Er(e,t,n){if(Math.floor(e)!==e)throw Tr(e,n),new vr.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new vr.ERR_BUFFER_OUT_OF_BOUNDS;throw new vr.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Nr("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Nr("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Nr("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=Sr(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=Sr(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const $r=/[^+/0-9A-Za-z-_]/g;function Cr(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Ar(e){return Rn(function(e){if((e=(e=e.split("=")[0]).trim().replace($r,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Dr(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function Rr(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Fr(e){return e!=e}const _r=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function Or(e){return"undefined"==typeof BigInt?Mr:e}function Mr(){throw new Error("BigInt not supported")}var Lr=Dn;async function zr(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:Pr(await Promise.all(r)),specs:n}}function Br(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,l=v(i);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=An[n.dtype],c=e.slice(s,s+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Kr()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}s+=l*i}else if("string"===o){const t=v(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=An[o],a=e.slice(s,s+l*r);if("float32"===o)u=new Float32Array(a);else if("int32"===o)u=new Int32Array(a);else if("bool"===o)u=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=Cn(e,i,"float32"),o=Cn(r,i,"float32");n[t]=En(s,o),s.dispose(),o.dispose()}}s+=l*r}"complex64"!==o&&(n[t]=Cn(u,i,o))}return n}function Pr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Vr=void 0!==Lr&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Wr(e){return Vr?Lr.byteLength(e):new Blob([e]).size}function Ur(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Gr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Hr(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function qr(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,s]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=s}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function jr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Wr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Wr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Kr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Xr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Xr.instance&&(Xr.instance=new Xr),Xr.instance}static registerSaveRouter(e){Xr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Xr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Xr.getHandlers(e,"save")}static getLoadHandlers(e,t){return Xr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Xr.getInstance().loadRouters:Xr.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Yr=e=>Xr.registerSaveRouter(e),Zr=e=>Xr.registerLoadRouter(e),Jr=e=>Xr.getSaveHandlers(e),Qr=(e,t)=>Xr.getLoadHandlers(e,t);function es(){if(!oe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ts(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class ns{constructor(e){if(this.indexedDB=es(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ts(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=jr(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=s.transaction("models_store","readwrite");const i=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}ns.URL_SCHEME="indexeddb://";const rs=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ns.URL_SCHEME)?(t=e.slice(ns.URL_SCHEME.length),new ns(t)):null;var t};Xr.registerSaveRouter(rs),Xr.registerLoadRouter(rs);class ss{constructor(){this.indexedDB=es()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>ts(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ns.URL_SCHEME)?t.slice(ns.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ts(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const as="tensorflowjs_models",os="info",is="model_topology",ls="weight_specs",us="weight_data",cs="model_metadata";function ps(e){return{info:[as,e,os].join("/"),topology:[as,e,is].join("/"),weightSpecs:[as,e,ls].join("/"),weightData:[as,e,us].join("/"),modelMetadata:[as,e,cs].join("/")}}function hs(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function ds(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class fs{constructor(e){if(!oe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ps(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=jr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Vr)return Lr.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw hs(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Vr){const t=Lr.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}fs.URL_SCHEME="localstorage://";const ms=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fs.URL_SCHEME)?(t=e.slice(fs.URL_SCHEME.length),new fs(t)):null;var t};Xr.registerSaveRouter(ms),Xr.registerLoadRouter(ms);class gs{constructor(){b(oe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),b("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=as+"/",n="/"+os;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[ds(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=ps(e=(t=e).startsWith(fs.URL_SCHEME)?t.slice(fs.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return hs(n),r}}class ys{constructor(){this.managers={}}static getInstance(){return null==ys.instance&&(ys.instance=new ys),ys.instance}static registerManager(e,t){b(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),b(e.length>0,(()=>"scheme must not be an empty string."));const n=ys.getInstance();b(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function bs(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ys.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function xs(e,t,n=!1){b(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Xr.getLoadHandlers(e);b(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),b(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Xr.getSaveHandlers(t);b(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),b(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=bs(e).scheme,l=bs(e).path,u=i===bs(e).scheme,c=await s.load();n&&u&&await ys.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await ys.getManager(i).removeModel(l),p.modelArtifactsInfo}async function ws(){const e=ys.getSchemes(),t={};for(const n of e){const e=await ys.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function ks(e){const t=bs(e);return ys.getManager(t.scheme).removeModel(t.path)}async function vs(e,t){return xs(e,t,!1)}async function Ns(e,t){return xs(e,t,!0)}class Ss{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(oe().get("IS_BROWSER")){oe().setPlatform("browser",new Ss);try{ys.registerManager(fs.URL_SCHEME,new gs)}catch(e){}try{ys.registerManager(ns.URL_SCHEME,new ss)}catch(e){}}const Is=()=>a("kjyEk");let Ts;function Es(e,t="float32",n){return t=t||"float32",ee(e),new Lt(e,t,n)}oe().get("IS_NODE")&&oe().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=oe().global.fetch?oe().global.fetch(e,t):(null==Ts&&(Ts=Is()),Ts(e,t))}now(){const e=ce.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const $s=Tn({cast_:function(e,t){const n=Sn(e,"x","cast");if(!L(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return dn.runKernel("Cast",r,s)}});const Cs=Tn({clone_:function(e){const t={x:Sn(e,"x","clone","string_or_numeric")};return dn.runKernel("Identity",t)}});hn();Bt={buffer:Es,cast:$s,clone:Cs,print:function(e,t=!1){console.log(e.toString(t))}};var As={};t(As,"copyModel",(()=>vs)),t(As,"listModels",(()=>ws)),t(As,"moveModel",(()=>Ns)),t(As,"removeModel",(()=>ks)),t(As,"browserFiles",(()=>_s)),t(As,"browserHTTPRequest",(()=>Us)),t(As,"concatenateArrayBuffers",(()=>Ur)),t(As,"decodeWeights",(()=>Br)),t(As,"encodeWeights",(()=>zr)),t(As,"fromMemory",(()=>qs)),t(As,"getLoadHandlers",(()=>Qr)),t(As,"getModelArtifactsForJSON",(()=>qr)),t(As,"getModelArtifactsInfoForJSON",(()=>jr)),t(As,"getSaveHandlers",(()=>Jr)),t(As,"http",(()=>Ws)),t(As,"isHTTPScheme",(()=>Ps)),t(As,"loadWeights",(()=>Ls)),t(As,"registerLoadRouter",(()=>Zr)),t(As,"registerSaveRouter",(()=>Yr)),t(As,"weightsLoaderFactory",(()=>zs)),t(As,"withSaveHandler",(()=>js));function Ds(e){return new Promise((e=>setTimeout(e))).then(e)}class Rs{constructor(e){if(!oe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Rs.URL_SCHEME)&&(e=e.slice(Rs.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Hr(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Ds((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ds((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:jr(e)}}}}Rs.URL_SCHEME="downloads://";class Fs{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=qr(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Ur(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Gr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Gr(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function _s(e){return new Fs(e)}function Os(e,t,n,r){var s,a,o;b(null!=(s=e)&&Array.isArray(s)&&s.length>0,(()=>"promises must be a none empty array")),o=r=null==r?1:r,b((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),b(o>=0&&o<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${o}`)),b(o>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${o}`));let i=0;return Promise.all(e.map((s=>(s.then((s=>{const a=n+ ++i/e.length*(r-n);return t(a),s})),s))))}async function Ms(e,t){null==t&&(t={});const n=null==t.fetchFunc?oe().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Os(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Os(s,t.onProgress,.5,1)}async function Ls(e,t="",n,r){return zs((e=>Ms(e,{requestInit:r})))(e,t,n)}function zs(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=An[l]*v(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=Br(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Xr.registerSaveRouter((e=>oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Rs.URL_SCHEME)?function(e="model"){return new Rs(e)}(e.slice(Rs.URL_SCHEME.length)):null));class Bs{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(b("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=oe().platform.fetch,b(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&b(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Hr(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:jr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return qr(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Ur(await Ms(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ps(e){return null!=e.match(Bs.URL_SCHEME_REGEX)}Bs.URL_SCHEME_REGEX=/^https?:\/\//;const Vs=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ps(e))):Ps(e),n)return Ws(e,t)}return null};function Ws(e,t){return new Bs(e,t)}function Us(e,t){return Ws(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Xr.registerSaveRouter(Vs),Xr.registerLoadRouter(Vs);class Gs{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Hs{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function qs(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Gs(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gs({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gs({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function js(e){return new Hs(e)}var Ks={};function Xs(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function Ys(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function Zs(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(Ks,"getBroadcastDims",(()=>Xs)),t(Ks,"getReductionAxes",(()=>Ys)),t(Ks,"assertAndGetBroadcastShape",(()=>Zs));var Js={};let Qs;function ea(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=De("FromPixels",dn.backendName)){const n={pixels:e},r={numChannels:t};return dn.runKernel("FromPixels",n,r)}const[l,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(r||n)c=e.data;else if(a||s||i){if(null==Qs)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Qs=new OffscreenCanvas(1,1).getContext("2d")}else Qs=document.createElement("canvas").getContext("2d");Qs.canvas.width=l,Qs.canvas.height=u,Qs.drawImage(e,0,0,l,u),c=Qs.getImageData(0,0,l,u).data}if(4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return function(e,t,n){if(w(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=kn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return $n(e,t,r,n)}(p,[u,l,t],"int32")}function ta(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function na(e,t=3){let n=null;if(oe().getBool("WRAP_TO_IMAGEBITMAP")&&ta(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return ea(n,t)}async function ra(e,t){let n=Sn(e,"img","toPixels");if(!(e instanceof Vt)){const e=n;n=$s(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(Js,"fromPixelsAsync",(()=>na)),t(Js,"toPixels",(()=>ra)),t(Js,"fromPixels",(()=>sa));const sa=Tn({fromPixels_:ea});var aa={};t(aa,"assertParamsValid",(()=>oa)),t(aa,"maskToAxes",(()=>ia)),t(aa,"computeOutShape",(()=>la)),t(aa,"stridesWithElidedDims",(()=>ua)),t(aa,"getNormalizedAxes",(()=>ha)),t(aa,"startIndicesWithElidedDims",(()=>da)),t(aa,"stopIndicesWithElidedDims",(()=>fa)),t(aa,"startForAxis",(()=>ga)),t(aa,"stopForAxis",(()=>ya)),t(aa,"stridesForAxis",(()=>ma)),t(aa,"isSliceContinous",(()=>ba)),t(aa,"computeFlatOffset",(()=>xa)),t(aa,"parseSliceParams",(()=>wa)),t(aa,"sliceInfo",(()=>ka));function oa(e,t,n){const r=e.shape.length;b(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),b(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)b(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function ia(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function la(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function ua(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function ca(e,t,n){return n<=e?n:n-(t-1)}function pa(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function ha(e,t,n,r,s,a,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=da(o,l,u,r,e),p=fa(i,l,u,s,e),h=ua(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=ga(o,r,a,e,t,l),p[t]=ya(i,s,a,e,t,l),h[t]=ma(a,t,l);return{begin:c,end:p,strides:h}}function da(e,t,n,r,s){const a=[...s],o=pa(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=ca(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function fa(e,t,n,r,s){const a=[...s],o=pa(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=ca(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=h(0,a[e],s[e])}return a}function ma(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ga(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=h(0,o,l-1),o}function ya(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=i>0?h(0,o,l):h(-1,o,l-1),o}function ba(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function xa(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function wa(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{b(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(b(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function ka(e,t,n,r,s,a,o,i,l){let u;if(null==r?(u=new Array(t.length),u.fill(1)):u=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=va(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=va(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,l=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],l=!0):n?(i=1,l=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,l=!0),l){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function va(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var Na={};t(Na,"Serializable",(()=>Sa)),t(Na,"SerializationMap",(()=>Ia)),t(Na,"registerClass",(()=>Ta));class Sa{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ia{constructor(){this.classNameMap={}}static getMap(){return null==Ia.instance&&(Ia.instance=new Ia),Ia.instance}static register(e){Ia.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ta(e){b(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),b("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),b(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ia.register(e)}
/** @license See the LICENSE file. */var Ea={};t(Ea,"fromUint8ToStringArray",(()=>$i)),t(Ea,"fromStringArrayToUint8",(()=>Ci)),t(Ea,"slice_util",(()=>aa)),t(Ea,"upcastType",(()=>tn)),t(Ea,"segment_util",(()=>$a));var $a={};t($a,"segOpComputeOptimalWindowSize",(()=>Ra)),t($a,"computeOutShape",(()=>Fa)),t($a,"collectGatherOpShapeInfo",(()=>_a));var Ca={};t(Ca,"PARALLELIZE_THRESHOLD",(()=>Aa)),t(Ca,"computeOptimalWindowSize",(()=>Da));const Aa=30;function Da(e){return e<=Aa?e:j(e,Math.floor(Math.sqrt(e)))}function Ra(e,t){let n,r=!1;for(e<=Aa?(n=e,r=!0):n=j(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=j(e,n+1);return n}function Fa(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function _a(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var Oa={};function Ma(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function La(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function za(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function Ba(e,t){return La(e,t.map((e=>1)),t)}function Pa(e,t,n){b(Ma(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Va(e,t){if(Ma(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Wa(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Ua(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(Oa,"axesAreInnerMostDims",(()=>Ma)),t(Oa,"combineLocations",(()=>La)),t(Oa,"computeOutAndReduceShapes",(()=>za)),t(Oa,"expandShapeToKeepDim",(()=>Ba)),t(Oa,"assertAxesAreInnerMostDims",(()=>Pa)),t(Oa,"getAxesPermutation",(()=>Va)),t(Oa,"getUndoAxesPermutation",(()=>Wa)),t(Oa,"getInnerMostAxes",(()=>Ua));var Ga={};function Ha(e,t){const n=e[0].length;e.forEach(((e,t)=>{b(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),b(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)b(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function qa(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(Ga,"assertParamsConsistent",(()=>Ha)),t(Ga,"computeOutShape",(()=>qa));var ja={};function Ka(e,t,n,r,s="NHWC",a){return Za(e,[...t,e[3]],n,a,r,null,null,oo(s))}function Xa(e,t,n,r,s,a,o="channelsLast"){const[i,l]=eo(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return Za(e,u,n,r,s,a,!1,o)}function Ya(e,t,n,r,s,a,o="NDHWC"){const[i,l,u]=to(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return Ja(e,c,n,r,s,!1,p,a)}function Za(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=eo(n),[y,b]=eo(r),x=no(h,y),w=no(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Qa(e,t,n));const a=e[0],o=e[1],i=ro((a-t+2*r)/n+1,s),l=ro((o-t+2*r)/n+1,s);return[i,l]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ro((t-a+h+d)/r+1,i),p=ro((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Ja(e,t,n,r,s,a=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=to(n),[w,k,v]=to(r),N=no(d,w),S=no(f,k),I=no(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,l,u,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Qa(e,t,r));const o=e[0],i=e[1],l=e[2],u=ro((o-t+2*s)/r+1,a),c=ro((i-t+2*s)/r+1,a),p=ro((l-t+2*s)/r+1,a);return[u,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,u,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let D;return"channelsFirst"===o?D=[l,A,E,$,C]:"channelsLast"===o&&(D=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:D,filterShape:t}}function Qa(e,t,n,r=1){const s=no(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function eo(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function to(e){return"number"==typeof e?[e,e,e]:e}function no(e,t){return t<=1?e:e+(e-1)*(t-1)}function ro(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function so(e){const[t,n,r]=eo(e);return 1===t&&1===n&&1===r}function ao(e,t){return so(e)||so(t)}function oo(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function io(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)b(I(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{b(I(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(ja,"computeDilation2DInfo",(()=>Ka)),t(ja,"convertConv2DDataFormat",(()=>oo)),t(ja,"computeConv2DInfo",(()=>Za)),t(ja,"computePool2DInfo",(()=>Xa)),t(ja,"computePool3DInfo",(()=>Ya)),t(ja,"computeConv3DInfo",(()=>Ja)),t(ja,"computeDefaultPad",(()=>Qa)),t(ja,"tupleValuesAreOne",(()=>so)),t(ja,"eitherStridesOrDilationsAreOne",(()=>ao)),t(ja,"checkPadOnDimRoundingMode",(()=>io));var lo={};t(lo,"getFusedDyActivation",(()=>wo)),t(lo,"getFusedBiasGradient",(()=>ko)),t(lo,"applyActivation",(()=>vo)),t(lo,"shouldFuse",(()=>No));const uo=Tn({elu_:function(e){const t={x:Sn(e,"x","elu","float32")};return dn.runKernel("Elu",t)}});const co=Tn({leakyRelu_:function(e,t=.2){const n={x:Sn(e,"x","leakyRelu")},r={alpha:t};return dn.runKernel("LeakyRelu",n,r)}});const po=Tn({mul_:function(e,t){let n=Sn(e,"a","mul"),r=Sn(t,"b","mul");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Multiply",s)}});const ho=Tn({prelu_:function(e,t){const n={x:Sn(e,"x","prelu"),alpha:Sn(t,"alpha","prelu")};return dn.runKernel("Prelu",n)}});const fo=Tn({relu_:function(e){const t={x:Sn(e,"x","relu")};return dn.runKernel("Relu",t)}});const mo=Tn({relu6_:function(e){const t={x:Sn(e,"x","relu6")};return dn.runKernel("Relu6",t)}});const go=Tn({reshape_:function(e,t){const n={x:Sn(e,"x","reshape","string_or_numeric")},r={shape:t};return dn.runKernel("Reshape",n,r)}});const yo=Tn({sigmoid_:function(e){const t={x:Sn(e,"x","sigmoid","float32")};return dn.runKernel("Sigmoid",t)}});const bo=Tn({step_:function(e,t=0){const n={x:Sn(e,"x","step")},r={alpha:t};return dn.runKernel("Step",n,r)}});const xo=Tn({sum_:function(e,t=null,n=!1){let r=Sn(e,"x","sum");"bool"===r.dtype&&(r=$s(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return dn.runKernel("Sum",s,a)}});function wo(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return po(e,bo(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ko(e,t){let n=t;const r=Ys(e.shape,t.shape);return r.length>0&&(n=xo(n,r)),go(n,e.shape)}function vo(e,t,n,r){if("linear"===t)return e;if("relu"===t)return fo(e);if("elu"===t)return uo(e);if("relu6"===t)return mo(e);if("prelu"===t)return ho(e,n);if("leakyrelu"===t)return co(e,r);if("sigmoid"===t)return yo(e);throw new Error(`Unknown fused activation ${t}.`)}const No=(e,t)=>!(e>0)||"linear"===t;var So={};function Io(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(So,"getImageCenter",(()=>Io));var To={};function Eo(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function $o(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Co(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function Ao(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Do(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(To,"getReshaped",(()=>Eo)),t(To,"getPermuted",(()=>$o)),t(To,"getReshapedPermuted",(()=>Co)),t(To,"getSliceBeginCoords",(()=>Ao)),t(To,"getSliceSize",(()=>Do));var Ro={};function Fo(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===v(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,l=s.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...K(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}t(Ro,"prepareAndValidate",(()=>Fo));var _o={};function Oo(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function Mo(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Oo(n,t,e)}function Lo(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:v(t.shape)/i,sliceSize:o,strides:[...K(n.slice(0,s)),1],outputSize:v(n)}}t(_o,"validateUpdateShape",(()=>Oo)),t(_o,"validateInput",(()=>Mo)),t(_o,"calculateShapes",(()=>Lo));var zo={};t(zo,"SELU_SCALEALPHA",(()=>Bo)),t(zo,"SELU_SCALE",(()=>Po));const Bo=1.7580993408473768,Po=1.0507009873554805;var Vo={};t(Vo,"ERF_P",(()=>Wo)),t(Vo,"ERF_A1",(()=>Uo)),t(Vo,"ERF_A2",(()=>Go)),t(Vo,"ERF_A3",(()=>Ho)),t(Vo,"ERF_A4",(()=>qo)),t(Vo,"ERF_A5",(()=>jo));const Wo=.3275911,Uo=.254829592,Go=-.284496736,Ho=1.421413741,qo=-1.453152027,jo=1.061405429;var Ko={};function Xo(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Yo(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Zo(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Jo(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Qo(e,t){return{real:e[2*t],imag:e[2*t+1]}}function ei(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function ti(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function ni(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(Ko,"mergeRealAndImagArrays",(()=>Xo)),t(Ko,"splitRealAndImagArrays",(()=>Yo)),t(Ko,"complexWithEvenIndex",(()=>Zo)),t(Ko,"complexWithOddIndex",(()=>Jo)),t(Ko,"getComplexWithIndex",(()=>Qo)),t(Ko,"assignToTypedArray",(()=>ei)),t(Ko,"exponents",(()=>ti)),t(Ko,"exponent",(()=>ni));var ri={};t(ri,"decodeEinsumEquation",(()=>ai)),t(ri,"getEinsumPermutation",(()=>oi)),t(ri,"checkEinsumDimSizes",(()=>ii)),t(ri,"getEinsumComputePath",(()=>li)),t(ri,"isIdentityPermutation",(()=>ui));const si=/->/g;function ai(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(si,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split("->");b(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const l=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(i.indexOf(a[e][t]))}const u=i.length,c=[];for(let e=s.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function oi(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function ii(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:b(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function li(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=ci(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function ui(e){return e.every(((e,t)=>e===t))}function ci(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var pi={};function hi(e,t,n=0){let r=[];if("number"==typeof t)b(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{b(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}b(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(pi,"prepareSplitSize",(()=>hi));var di={};function fi(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function mi(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function gi(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(di,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>fi)),t(di,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>mi)),t(di,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>gi));var yi={};function bi(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function xi(e,t){return`size ${e} must be non-negative, not ${t}`}function wi(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ki(e,t){return`Input to reshape is a SparseTensor with ${v(e)}\n  dense values, but the requested shape requires a multiple of ${v(t)}. inputShape=${e} outputShape= ${t}`}function vi(e,t){return`Input to reshape is a tensor with ${v(e)} dense values, but the requested shape has ${v(t)}. inputShape=${e} outputShape=${t}`}t(yi,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>bi)),t(yi,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>xi)),t(yi,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>wi)),t(yi,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>ki)),t(yi,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>vi));var Ni={};function Si(){return"segment ids must be >= 0"}function Ii(){return"segment ids are not increasing"}function Ti(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Ei(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function $i(e){try{return e.map((e=>$t(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Ci(e){return e.map((e=>Et(e)))}t(Ni,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>Si)),t(Ni,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Ii)),t(Ni,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>Ti)),t(Ni,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Ei)),n(Ea,Oa),n(Ea,Ks),n(Ea,Ga),n(Ea,ja),n(Ea,lo),n(Ea,Ca),n(Ea,So),n(Ea,To),n(Ea,Ro),n(Ea,_o),n(Ea,zo),n(Ea,Vo),n(Ea,Te),n(Ea,Ko),n(Ea,ri),n(Ea,pi),n(Ea,di),n(Ea,yi),n(Ea,Ni);var Ai={};function Di(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||Ri)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Ri(e,t){return e>t?1:e<t?-1:0}function Fi(e,t,n,r,s){return Mi(e,t,n,r,s,0)}function _i(e,t,n,r,s,a){return Mi(e,t,n,r,s,0,!1,a,!0)}function Oi(e,t,n,r,s,a){return Mi(e,t,n,r,s,a,!0)}function Mi(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Bi);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Li(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*zi(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&Di(u,t,Bi))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function Li(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function zi(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Bi(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Pi(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Es(e,"int32"),s=Es([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}function Vi(){return dn}function Wi(){return dn.memory()}function Ui(e,t){return dn.tidy(e,t)}function Gi(e){on(e).forEach((e=>e.dispose()))}function Hi(e){return dn.keep(e)}function qi(e,t,n=1){return dn.registerBackend(e,t,n)}function ji(e,t){b(q(e),(()=>"The f passed in variableGrads(f) must be a function")),b(null==t||Array.isArray(t)&&t.every((e=>e instanceof Ut)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in dn.registeredVariables)t.push(dn.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;b((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=dn.gradients(e,t,null,!0);b(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),b(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function Ki(e){return dn.customGrad(e)}t(Ai,"nonMaxSuppressionV3Impl",(()=>Fi)),t(Ai,"nonMaxSuppressionV4Impl",(()=>_i)),t(Ai,"nonMaxSuppressionV5Impl",(()=>Oi)),t(Ai,"whereImpl",(()=>Pi)),Pt=function(e){oe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Xi=Tn({concat_:function(e,t=0){b(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=In(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Cs(n[0]);const r=n,s={axis:t};return dn.runKernel("Concat",r,s)}});const Yi=Tn({imag_:function(e){const t={input:Sn(e,"input","imag")};return dn.runKernel("Imag",t)}});const Zi=Tn({real_:function(e){const t={input:Sn(e,"input","real")};return dn.runKernel("Real",t)}});const Ji=Tn({slice_:function(e,t,n){const r=Sn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return dn.runKernel("Slice",s,a)}});const Qi=Tn({split_:function(e,t,n=0){const r={x:Sn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return dn.runKernel("SplitV",r,s)}});function el(e,t="float32"){if("complex64"===t){const t=el(e,"float32"),n=el(e,"float32");return En(t,n)}const n=J(v(e),t);return dn.makeTensor(n,e,t)}const tl=Tn({zerosLike_:function(e){const t={x:Sn(e,"x","zerosLike")};return dn.runKernel("ZerosLike",t)}});const nl=Tn({fft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return dn.runKernel("FFT",t)}});const rl=Tn({rfft_:function(e,t){b("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Ji(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=Xi([e,el(r)],e.shape.length-1),n=t}else s=e;const a=tl(s),o=go(En(s,a),[r,n]),i=nl(o),l=Math.floor(n/2)+1,u=Zi(i),c=Yi(i),p=Qi(u,[l,n-l],u.shape.length-1),h=Qi(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,go(En(p[0],h[0]),d)}});const sl=Tn({ifft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return dn.runKernel("IFFT",t)}});const al=Tn({reverse_:function(e,t){const n={x:Sn(e,"x","reverse")},r={dims:t};return dn.runKernel("Reverse",n,r)}});function ol(e,t){if((B(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&B(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return $n(e,[],[],t)}const il=Tn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=go(e,[n,t]);r=sl(s)}else{const s=[n,2*(t-1)],a=go(Zi(e),[n,t]),o=go(Yi(e),[n,t]),i=al(Ji(a,[0,1],[n,t-2]),1),l=po(al(Ji(o,[0,1],[n,t-2]),1),ol(-1)),u=Xi([a,i],1),c=Xi([o,l],1),p=go(En(u,c),[s[0],s[1]]);r=sl(p)}if(r=Zi(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=go(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var ll={};t(ll,"conv2d",(()=>dl)),t(ll,"depthwiseConv2d",(()=>yl)),t(ll,"matMul",(()=>xl));const ul=Tn({add_:function(e,t){let n=Sn(e,"a","add"),r=Sn(t,"b","add");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Add",s)}});const cl=Tn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Sn(e,"x","conv2d","float32"),l=Sn(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=go(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),io("conv2d",r,o);const p="NHWC"===s?u.shape[3]:u.shape[1];b(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),b(ao(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=dn.runKernel("Conv2D",h,d);return c?go(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const pl=Tn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=go(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=go(t,[1,t.shape[0],t.shape[1],t.shape[2]])),b(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),b(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),b(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];b(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),b(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),io("conv2dDerFilter",s,o);const p={x:i,dy:l},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return dn.runKernel("Conv2DBackpropFilter",p,h)}});const hl=Tn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=go(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),b(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),b(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),b(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?l.shape[3]:l.shape[1];b(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),b(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),io("conv2dDerInput",s,o);const h={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=dn.runKernel("Conv2DBackpropInput",h,d);return u?go(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const dl=Tn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===No(dn.state.gradientDepth,l)){let p=cl(e,t,n,r,s,a,o);return null!=i&&(p=ul(p,i)),vo(p,l,u,c)}const p=Sn(e,"x","conv2d","float32"),h=Sn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=go(p,[1,p.shape[0],p.shape[1],p.shape[2]])),b(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),io("fused conv2d",r,o),b(d.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),b(ao(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),b("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const m=Za(d.shape,h.shape,n,a,r,o);let g,y;null!=i&&(g=Sn(i,"bias","fused conv2d"),[g]=rn(g,p),Zs(m.outShape,g.shape)),null!=u&&(y=Sn(u,"prelu weights","fused conv2d"));const x=(e,t)=>{const[s,o,i,u]=t,c=wo(e,i,l);b(so(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[hl(o.shape,c,s,n,r),pl(o,c,s.shape,n,r)];if(null!=u){const e=ko(u,c);p.push(e)}return p},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return Ki(((e,t,n)=>{let r=dn.runKernel("FusedConv2D",w,k);return n([t,e,r]),f&&(r=go(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return Ki(((e,t,n,r)=>{let s=dn.runKernel("FusedConv2D",w,k);return r([t,e,s,n]),f&&(s=go(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,h,g)}});const fl=Tn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Sn(e,"x","depthwiseConv2d","float32"),l=Sn(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=go(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),b(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),io("depthwiseConv2d",r,o);const p={x:u,filter:l},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},d=dn.runKernel("DepthwiseConv2dNative",p,h);return c?go(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const ml=Tn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=go(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=go(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return dn.runKernel("DepthwiseConv2dNativeBackpropFilter",u,c)}});const gl=Tn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=go(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=dn.runKernel("DepthwiseConv2dNativeBackpropInput",u,c);return l?go(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const yl=Tn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===No(dn.state.gradientDepth,l)){let p=fl(e,t,n,r,s,a,o);return null!=i&&(p=ul(p,i)),vo(p,l,u,c)}const p=Sn(e,"x","depthwiseConv2d","float32"),h=Sn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=go(p,[1,p.shape[0],p.shape[1],p.shape[2]])),b(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),b(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),b(ao(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),io("fused depthwiseConv2d",r,o);const m=Za(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=Sn(i,"bias","fused conv2d"),[g]=rn(g,p),Zs(m.outShape,g.shape)),null!=u&&(y=Sn(u,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{b(so(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,u,c]=t,p=wo(e,u,l),h=gl(i.shape,p,s,n,r,a,o),d=ml(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,ko(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return Ki(((e,t,n)=>{let r=dn.runKernel("FusedDepthwiseConv2D",w,k);return n([t,e,r]),f&&(r=go(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return Ki(((e,t,n,r)=>{let s=dn.runKernel("FusedDepthwiseConv2D",w,k);return r([t,e,s,n]),f&&(s=go(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,h,g)}});const bl=Tn({matMul_:function(e,t,n=!1,r=!1){let s=Sn(e,"a","matMul"),a=Sn(t,"b","matMul");[s,a]=rn(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return dn.runKernel("BatchMatMul",o,i)}});const xl=Tn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i}){if(!1===No(dn.state.gradientDepth,a)){let l=bl(e,t,n,r);return null!=s&&(l=ul(l,s)),vo(l,a,o,i)}let l=Sn(e,"a","fused matMul"),u=Sn(t,"b","fused matMul");[l,u]=rn(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=v(f),y=v(m);b(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=Zs(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),w=go(l,n?[g,c,h]:[g,h,c]),k=go(u,r?[y,d,p]:[y,p,d]);let N,S;null!=s&&(N=Sn(s,"bias","fused matMul"),[N]=rn(N,l),Zs(x,N.shape)),null!=o&&(S=Sn(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=wo(go(e,l.shape),l,a);let p,h;if(n||r?!n&&r?(p=bl(c,i,!1,!1),h=bl(c,o,!0,!1)):n&&!r?(p=bl(i,c,!1,!0),h=bl(o,c,!1,!1)):(p=bl(i,c,!0,!0),h=bl(c,o,!0,!0)):(p=bl(c,i,!1,!0),h=bl(o,c,!0,!1)),null!=s){return[p,h,ko(u,c)]}return[p,h]},T={a:w,b:k,bias:N,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){return Ki(((e,t,n)=>{const r=dn.runKernel("_FusedMatMul",T,E);return n([e,t,r]),{value:go(r,x),gradFunc:I}}))(w,k)}return Ki(((e,t,n,r)=>{const s=dn.runKernel("_FusedMatMul",T,E);return r([e,t,s,n]),{value:go(s,x),gradFunc:I}}))(w,k,N)}});function wl(e,t){w(e);const n=kn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return $n(e,null,n,t)}function kl(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return wl(s,"float32")}Tn({hammingWindow_:function(e){return kl(e,.54,.46)}});const vl=Tn({hannWindow_:function(e){return kl(e,.5,.5)}});function Nl(e,t,n){const r={shape:e,value:t,dtype:n};return dn.runKernel("Fill",{},r)}function Sl(e,t,n){if(w(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=kn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return $n(e,t,r,n)}const Il=Tn({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(Ji(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=Xi([Ji(e,a,t-r),Nl([r],s)]);o.push(i),a+=n}return 0===o.length?Sl([],[0,t]):go(Xi(o),[o.length,t])}});Tn({stft_:function(e,t,n,r,s=vl){var a;null==r&&(a=t,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const o=Il(e,t,n),i=po(o,s(t));return rl(i,r)}});const Tl=Tn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=Sn(e,"image","cropAndResize"),i=Sn(t,"boxes","cropAndResize","float32"),l=Sn(n,"boxInd","cropAndResize","int32"),u=i.shape[0];b(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),b(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),b(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),b(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),b(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),b("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return dn.runKernel("CropAndResize",c,p)}});const El=Tn({flipLeftRight_:function(e){const t=Sn(e,"image","flipLeftRight","float32");b(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return dn.runKernel("FlipLeftRight",n,{})}});const $l=Tn({tile_:function(e,t){const n=Sn(e,"x","tile","string_or_numeric");b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return dn.runKernel("Tile",r,s)}});const Cl=Tn({grayscaleToRGB_:function(e){const t=Sn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];b(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),b(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,$l(t,s)}});const Al=Tn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Sn(e,"image","rotateWithOffset","float32");b(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return dn.runKernel("RotateWithOffset",a,o)}});function Dl(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),b(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),b(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),b(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),b(1===t.rank,(()=>"scores must be a 1D tensor")),b(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),b(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Rl=Tn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Sn(e,"boxes","nonMaxSuppression","float32"),o=Sn(t,"scores","nonMaxSuppression","float32"),i=Dl(a,o,n,r,s),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return dn.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},l)}});const Fl=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Sn(e,"boxes","nonMaxSuppressionAsync"),o=Sn(t,"scores","nonMaxSuppressionAsync"),i=Dl(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=Fi(u,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),wl(p,"int32")};const _l=Tn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Sn(e,"boxes","nonMaxSuppression"),i=Sn(t,"scores","nonMaxSuppression"),l=Dl(o,i,n,r,s,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},p=dn.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const Ol=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Sn(e,"boxes","nonMaxSuppressionAsync"),i=Sn(t,"scores","nonMaxSuppressionAsync"),l=Dl(o,i,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=Oi(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:wl(h,"int32"),selectedScores:wl(d)}};const Ml=Tn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Sn(e,"boxes","nonMaxSuppression"),i=Sn(t,"scores","nonMaxSuppression"),l=Dl(o,i,n,r,s,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},p=dn.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Ll=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Sn(e,"boxes","nonMaxSuppressionAsync"),i=Sn(t,"scores","nonMaxSuppressionAsync"),l=Dl(o,i,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=_i(h,d,u,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:wl(f,"int32"),validOutputs:ol(m,"int32")}};const zl=Tn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Sn(e,"images","resizeBilinear");b(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),b(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),b(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=go(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=dn.runKernel("ResizeBilinear",i,l);return o?go(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Bl=Tn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Sn(e,"images","resizeNearestNeighbor");b(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),b(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),b("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),b(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=go(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=dn.runKernel("ResizeNearestNeighbor",i,l);return o?go(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Pl=Tn({bincount_:function(e,t,n){const r=Sn(e,"x","bincount"),s=Sn(t,"weights","bincount");b("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return dn.runKernel("Bincount",a,o)}});const Vl=Tn({lessEqual_:function(e,t){let n=Sn(e,"a","lessEqual","string_or_numeric"),r=Sn(t,"b","lessEqual","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("LessEqual",s)}});const Wl=Tn({greater_:function(e,t){let n=Sn(e,"a","greater","string_or_numeric"),r=Sn(t,"b","greater","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("Greater",s)}});const Ul=Tn({floorDiv_:function(e,t){let n=Sn(e,"a","floorDiv"),r=Sn(t,"b","floorDiv");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("FloorDiv",s)}});const Gl=Tn({div_:function(e,t){let n=Sn(e,"a","div"),r=Sn(t,"b","div");if([n,r]=rn(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Ul(n,r);const s={a:n,b:r};return dn.runKernel("RealDiv",s,{})}});const Hl=Tn({sub_:function(e,t){let n=Sn(e,"a","sub"),r=Sn(t,"b","sub");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Sub",s)}});const ql=Tn({round_:function(e){const t={x:Sn(e,"x","round")};return dn.runKernel("Round",t)}});const jl=Tn({broadcastTo_:function(e,t){let n=Sn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=go(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Cs(n);const o={x:n},i={reps:a};return dn.runKernel("Tile",o,i)}});const Kl=Tn({where_:function(e,t,n){const r=Sn(t,"a","where"),s=Sn(n,"b","where"),a=Sn(e,"condition","where","bool"),o=Zs(Zs(a.shape,r.shape),s.shape),i={condition:jl(a,o),t:jl(r,o),e:jl(s,o)};return dn.runKernel("Select",i)}});function Xl(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return dn.runKernel("Range",{},s)}const Yl=Tn({threshold_:function(e,t="binary",n=!1,r=.5){const s=Sn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,l,u,c=po(wl([r]),255);if(b(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),b(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),b("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),b("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,l]=Qi(s,[1,1,1],-1);const e=po(o,.2989),t=po(i,.587),n=po(l,.114);u=ul(ul(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,r,s,a,o,i,l=wl([-1]),u=wl([0]),c=wl([0]);for(let p=0;p<e.size-1;p++){n=Ji(e,0,p+1),r=Ji(e,p+1),o=Gl(xo(n),t),i=Gl(xo(r),t);const h=xo(po(n,Xl(0,n.size)));s=Gl(h,xo(n));const d=Nl(r.shape,n.size),f=ul(Xl(0,r.size),d),m=po(r,f);a=Gl(xo(m),xo(r));const g=Hl(s,a),y=Hl(s,a),b=po(o,i);c=po(po(b,g),y);const x=Wl(c,u);u=Kl(x,c,u),l=Kl(x,wl([p]),l)}return l}(Pl($s(ql(u),"int32"),Cn([]),256),a)}const p=n?Vl(u,c):Wl(u,c);return $s(po(p,255),"int32")}});const Zl=Tn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=Sn(e,"image","transform","float32"),i=Sn(t,"transforms","transform","float32");b(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),b(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),b(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return dn.runKernel("Transform",l,u)}});const Jl=Tn({greaterEqual_:function(e,t){let n=Sn(e,"a","greaterEqual","string_or_numeric"),r=Sn(t,"b","greaterEqual","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("GreaterEqual",s)}});const Ql=Tn({logicalAnd_:function(e,t){const n=Sn(e,"a","logicalAnd","bool"),r=Sn(t,"b","logicalAnd","bool");Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("LogicalAnd",s)}});const eu=Tn({stack_:function(e,t=0){const n=In(e,"tensors","stack","string_or_numeric");b(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&b(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return dn.runKernel("Pack",r,s)}});const tu=Tn({unstack_:function(e,t=0){const n=Sn(e,"x","unstack","string_or_numeric");b(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return dn.runKernel("Unpack",r,s)}});const nu=Tn({bandPart_:function(e,t,n){b(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),b(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Sn(e,"a","bandPart");b(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=go(Xl(0,a,1,"int32"),[-1,1]),l=Xl(0,o,1,"int32"),u=Hl(i,l),c=Ql(Vl(u,ol(+t,"int32")),Jl(u,ol(-n,"int32"))),p=el([a,o],r.dtype);return go(eu(tu(go(r,[-1,a,o])).map((e=>Kl(c,e,p)))),s)}});const ru=Tn({abs_:function(e){const t=Sn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return dn.runKernel("ComplexAbs",e)}{const e={x:t};return dn.runKernel("Abs",e)}}});const su=Tn({max_:function(e,t=null,n=!1){const r={x:Sn(e,"x","max")},s={reductionIndices:t,keepDims:n};return dn.runKernel("Max",r,s)}});const au=Tn({min_:function(e,t=null,n=!1){const r={x:Sn(e,"x","min")},s={axis:t,keepDims:n};return dn.runKernel("Min",r,s)}});const ou=Tn({pow_:function(e,t){let n=Sn(e,"base","pow"),r=Sn(t,"exp","pow");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Pow",s)}});const iu=Tn({sqrt_:function(e){const t={x:Sn(e,"x","sqrt","float32")};return dn.runKernel("Sqrt",t)}});const lu=Tn({square_:function(e){const t=Sn(e,"x","square");return dn.runKernel("Square",{x:t},{})}});function uu(e,t,n=null){if(0===e.rank)return ru(e);if(1!==e.rank&&null===n)return uu(go(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return xo(ru(e),n);if(t===1/0)return su(ru(e),n);if(t===-1/0)return au(ru(e),n);if("euclidean"===t||2===t)return iu(xo(ou(ru(e),ol(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return su(xo(ru(e),n[0]),n[1]-1);if(t===1/0)return su(xo(ru(e),n[1]),n[0]);if(t===-1/0)return au(xo(ru(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return iu(xo(lu(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const cu=Tn({norm_:function(e,t="euclidean",n=null,r=!1){const s=uu(e=Sn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=R(n,e.shape);a=Ba(s.shape,t)}return go(s,a)}});const pu=Tn({squeeze_:function(e,t){const n=Sn(e,"x","squeeze");return go(n,F(n.shape,t).newShape)}});const hu=Tn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,b(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)b(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Qi(e,e.shape[0],0).map((e=>pu(e,[0])));b(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(dn.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=po(xo(po(n[r],e)),n[r]);e=Hl(e,t)}return Gl(e,cu(e,"euclidean"))})));return t?eu(n,0):n}});const du=Tn({expandDims_:function(e,t=0){const n=Sn(e,"x","expandDims","string_or_numeric");b(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return dn.runKernel("ExpandDims",r,s)}});const fu=Tn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Es([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=go(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return $l(du(o,0),[n[0],1,1]);if(2===n.length)return $l(du(du(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return $l(du(du(du(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const mu=Tn({neg_:function(e){const t={x:Sn(e,"x","neg")};return dn.runKernel("Neg",t)}});const gu=Tn({transpose_:function(e,t){const n=Sn(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{b(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return dn.runKernel("Transpose",r,s)}});function yu(e,t=!1){return dn.tidy((()=>{b(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=fu(n),a=Cs(e);const o=Sl([[1]],[1,1]);let i=Cs(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=i,u=s;[i,a,s]=dn.tidy((()=>{const t=Ji(a,[e,e],[n-e,1]),l=cu(t),u=Ji(a,[e,e],[1,1]),c=Kl(Wl(u,0),Sl([[-1]]),Sl([[1]])),p=Hl(u,po(c,l)),h=Gl(t,p);i=1===h.shape[0]?Cs(o):Xi([o,Ji(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=mu(Gl(bl(c,p),l)),f=Ji(a,[e,0],[n-e,r]),m=po(d,i),g=gu(i);if(0===e)a=Hl(f,bl(m,bl(g,f)));else{const t=Hl(f,bl(m,bl(g,f)));a=Xi([Ji(a,[0,0],[e,r]),t],0)}const y=gu(m),b=Ji(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Hl(b,bl(bl(b,i),y));else{const t=Hl(b,bl(bl(b,i),y));s=Xi([Ji(s,[0,0],[n,e]),t],1)}return[i,a,s]})),Gi([t,l,u])}return!t&&n>r&&(s=Ji(s,[0,0],[n,r]),a=Ji(a,[0,0],[r,r])),[s,a]}))}const bu=Tn({qr_:function(e,t=!1){if(b(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return yu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=tu(go(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=yu(e,t);s.push(n),a.push(r)}));return[go(eu(s,0),e.shape),go(eu(a,0),e.shape)]}}});var xu;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(xu||(xu={}));const wu=Tn({mean_:function(e,t=null,n=!1){const r={x:Sn(e,"x","mean")},s={axis:t,keepDims:n};return dn.runKernel("Mean",r,s)}});const ku=Tn({notEqual_:function(e,t){let n=Sn(e,"a","notEqual","string_or_numeric"),r=Sn(t,"b","notEqual","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("NotEqual",s)}});function vu(e,t="float32"){if("complex64"===t){const t=vu(e,"float32"),n=el(e,"float32");return En(t,n)}const n=Z(v(e),t);return dn.makeTensor(n,e,t)}const Nu=Tn({computeWeightedLoss_:function(e,t,n=xu.SUM_BY_NONZERO_WEIGHTS){const r=Sn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Sn(t,"weights","computeWeightedLoss"));const a=null==s?r:po(r,s);if(n===xu.NONE)return a;if(n===xu.SUM)return xo(a);if(n===xu.MEAN){if(null==s)return wu(a);{const e=r.size/s.size,t=Gl(xo(a),xo(s));return e>1?Gl(t,ol(e)):t}}if(n===xu.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Gl(xo(a),ol(r.size));{const e=po(s,vu(r.shape)),t=$s(xo(ku(e,ol(0))),"float32");return Gl(xo(a),t)}}throw Error(`Unknown reduction: ${n}`)}});Tn({absoluteDifference_:function(e,t,n,r=xu.SUM_BY_NONZERO_WEIGHTS){const s=Sn(e,"labels","absoluteDifference"),a=Sn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Sn(n,"weights","absoluteDifference")),x(s.shape,a.shape,"Error in absoluteDifference: ");const i=ru(Hl(s,a));return Nu(i,o,r)}});Tn({cosineDistance_:function(e,t,n,r,s=xu.SUM_BY_NONZERO_WEIGHTS){const a=Sn(e,"labels","cosineDistance"),o=Sn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Sn(r,"weights","cosineDistance")),x(a.shape,o.shape,"Error in cosineDistance: ");const l=ol(1),u=Hl(l,xo(po(a,o),n,!0));return Nu(u,i,s)}});Tn({hingeLoss_:function(e,t,n,r=xu.SUM_BY_NONZERO_WEIGHTS){let s=Sn(e,"labels","hingeLoss");const a=Sn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Sn(n,"weights","hingeLoss")),x(s.shape,a.shape,"Error in hingeLoss: ");const i=ol(1);s=Hl(po(ol(2),s),i);const l=fo(Hl(i,po(s,a)));return Nu(l,o,r)}});const Su=Tn({minimum_:function(e,t){let n=Sn(e,"a","minimum"),r=Sn(t,"b","minimum");[n,r]=rn(n,r),"bool"===n.dtype&&(n=$s(n,"int32"),r=$s(r,"int32")),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("Minimum",s)}});Tn({huberLoss_:function(e,t,n,r=1,s=xu.SUM_BY_NONZERO_WEIGHTS){const a=Sn(e,"labels","huberLoss"),o=Sn(t,"predictions","huberLoss");let i=null;null!=n&&(i=Sn(n,"weights","huberLoss")),x(a.shape,o.shape,"Error in huberLoss: ");const l=ol(r),u=ru(Hl(o,a)),c=Su(u,l),p=Hl(u,c),h=ul(po(ol(.5),lu(c)),po(l,p));return Nu(h,i,s)}});const Iu=Tn({log_:function(e){const t={x:Sn(e,"x","log","float32")};return dn.runKernel("Log",t)}});Tn({logLoss_:function(e,t,n,r=1e-7,s=xu.SUM_BY_NONZERO_WEIGHTS){const a=Sn(e,"labels","logLoss"),o=Sn(t,"predictions","logLoss");let i=null;null!=n&&(i=Sn(n,"weights","logLoss")),x(a.shape,o.shape,"Error in logLoss: ");const l=ol(1),u=ol(r),c=mu(po(a,Iu(ul(o,u)))),p=po(Hl(l,a),Iu(ul(Hl(l,o),u))),h=Hl(c,p);return Nu(h,i,s)}});const Tu=Tn({squaredDifference_:function(e,t){let n=Sn(e,"a","squaredDifference"),r=Sn(t,"b","squaredDifference");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("SquaredDifference",s,{})}});Tn({meanSquaredError_:function(e,t,n,r=xu.SUM_BY_NONZERO_WEIGHTS){const s=Sn(e,"labels","meanSquaredError"),a=Sn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Sn(n,"weights","meanSquaredError")),x(s.shape,a.shape,"Error in meanSquaredError: ");const i=Tu(s,a);return Nu(i,o,r)}});const Eu=Tn({exp_:function(e){const t={x:Sn(e,"x","exp")};return dn.runKernel("Exp",t)}});const $u=Tn({log1p_:function(e){const t={x:Sn(e,"x","log1p")};return dn.runKernel("Log1p",t)}});Tn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=xu.SUM_BY_NONZERO_WEIGHTS){let a=Sn(e,"multiClassLabels","sigmoidCrossEntropy");const o=Sn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Sn(n,"weights","sigmoidCrossEntropy")),x(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=ol(r),t=ol(1),n=ol(.5);a=ul(po(a,Hl(t,e)),po(n,e))}const l=function(e,t){const n=Sn(e,"labels","sigmoidCrossEntropyWithLogits"),r=Sn(t,"logits","sigmoidCrossEntropyWithLogits");x(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=fo(r),a=po(r,n),o=$u(Eu(mu(ru(r))));return ul(Hl(s,a),o)}(a,o);return Nu(l,i,s)}});const Cu=Tn({logSumExp_:function(e,t=null,n=!1){const r=Sn(e,"x","logSumExp"),s=R(t,r.shape),a=su(r,s,!0),o=Hl(r,a),i=Eu(o),l=xo(i,s),u=Iu(l),c=ul(go(a,u.shape),u);if(n){const e=Ba(c.shape,s);return go(c,e)}return c}});Tn({softmaxCrossEntropy_:function(e,t,n,r=0,s=xu.SUM_BY_NONZERO_WEIGHTS){let a=Sn(e,"onehotLabels","softmaxCrossEntropy");const o=Sn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Sn(n,"weights","softmaxCrossEntropy")),x(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=ol(r),t=ol(1),n=ol(a.shape[1]);a=ul(po(a,Hl(t,e)),Gl(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Ki(((e,t,r)=>{const s=Cu(t,[n],!0),a=Hl($s(t,"float32"),s);r([e,a]);const o=mu(po(a,e));return{value:xo(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Ba(e.shape,[n]);return[po(go(e,a),Hl($s(r,"float32"),Eu(s))),po(go(e,a),Hl(Eu(s),$s(r,"float32")))]}}}))(e,t)}(a,o);return Nu(l,i,s)}});Tn({sparseFillEmptyRows_:function(e,t,n,r){const s=Sn(e,"indices","sparseFillEmptyRows","int32"),a=Sn(t,"values","sparseFillEmptyRows"),o=Sn(n,"denseShape","sparseFillEmptyRows","int32"),i=Sn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:s,values:a,denseShape:o,defaultValue:i},u=dn.runKernel("SparseFillEmptyRows",l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});Tn({sparseReshape_:function(e,t,n){const r=Sn(e,"inputIndices","sparseReshape","int32"),s=Sn(t,"inputShape","sparseReshape","int32"),a=Sn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=dn.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});Tn({sparseSegmentMean_:function(e,t,n){const r=Sn(e,"data","sparseSegmentMean"),s=Sn(t,"indices","sparseSegmentMean","int32"),a=Sn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return dn.runKernel("SparseSegmentMean",o)}});Tn({sparseSegmentSum_:function(e,t,n){const r=Sn(e,"data","sparseSegmentSum"),s=Sn(t,"indices","sparseSegmentSum","int32"),a=Sn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return dn.runKernel("SparseSegmentSum",o)}});Tn({stringNGrams_:function(e,t,n,r,s,a,o,i){const l=Sn(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Sn(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=dn.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});Tn({stringSplit_:function(e,t,n=!0){const r=Sn(e,"input","stringSplit","string"),s=Sn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=dn.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});Tn({stringToHashBucketFast_:function(e,t){const n=Sn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return dn.runKernel("StringToHashBucketFast",s,r)}});const Au=Tn({acos_:function(e){const t={x:Sn(e,"x","acos")};return dn.runKernel("Acos",t)}});const Du=Tn({acosh_:function(e){const t={x:Sn(e,"x","acosh")};return dn.runKernel("Acosh",t)}});Tn({addN_:function(e){b(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),b(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Sn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!S(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return dn.runKernel("AddN",r)}});const Ru=Tn({all_:function(e,t=null,n=!1){const r={x:Sn(e,"x","all","bool")},s={axis:t,keepDims:n};return dn.runKernel("All",r,s)}});const Fu=Tn({any_:function(e,t=null,n=!1){const r={x:Sn(e,"x","any","bool")},s={axis:t,keepDims:n};return dn.runKernel("Any",r,s)}});const _u=Tn({argMax_:function(e,t=0){const n={x:Sn(e,"x","argMax")},r={axis:t};return dn.runKernel("ArgMax",n,r)}});const Ou=Tn({argMin_:function(e,t=0){const n={x:Sn(e,"x","argMin")},r={axis:t};return dn.runKernel("ArgMin",n,r)}});const Mu=Tn({asin_:function(e){const t={x:Sn(e,"x","asin")};return dn.runKernel("Asin",t)}});const Lu=Tn({asinh_:function(e){const t={x:Sn(e,"x","asinh")};return dn.runKernel("Asinh",t)}});const zu=Tn({atan_:function(e){const t={x:Sn(e,"x","atan")};return dn.runKernel("Atan",t)}});const Bu=Tn({atan2_:function(e,t){let n=Sn(e,"a","atan2"),r=Sn(t,"b","atan2");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Atan2",s)}});const Pu=Tn({atanh_:function(e){const t={x:Sn(e,"x","atanh")};return dn.runKernel("Atanh",t)}});const Vu=Tn({avgPool_:function(e,t,n,r,s){const a=Sn(e,"x","avgPool","float32");b(ao(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=go(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),io("avgPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=dn.runKernel("AvgPool",l,u);return c=$s(c,a.dtype),i?go(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Wu=Tn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=Sn(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=go(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),b("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),io("avgPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=dn.runKernel("AvgPool3D",u,c);return p=$s(p,i.dtype),l?go(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Uu=Tn({batchToSpaceND_:function(e,t,n){const r=Sn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));b(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),b(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),b(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return dn.runKernel("BatchToSpaceND",a,o)}});const Gu=Tn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=Sn(e,"x","batchNorm"),i=Sn(t,"mean","batchNorm"),l=Sn(n,"variance","batchNorm");let u,c;null!=s&&(u=Sn(s,"scale","batchNorm")),null!=r&&(c=Sn(r,"offset","batchNorm")),b(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),b(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),b(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(e){let t;return t=0===e.rank||1===e.rank?go(e,[1,1,1,e.size]):2===e.rank?go(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?go(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),h={x:p,scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:a},f=dn.runKernel("FusedBatchNorm",h,d);return go(f,o.shape)}});const Hu=Tn({batchNorm2d_:function(e,t,n,r,s,a){const o=Sn(e,"x","batchNorm"),i=Sn(t,"mean","batchNorm"),l=Sn(n,"variance","batchNorm");let u,c;return null!=s&&(u=Sn(s,"scale","batchNorm")),null!=r&&(c=Sn(r,"offset","batchNorm")),b(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),b(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),b(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Gu(o,i,l,c,u,a)}});const qu=Tn({batchNorm3d_:function(e,t,n,r,s,a){const o=Sn(e,"x","batchNorm"),i=Sn(t,"mean","batchNorm"),l=Sn(n,"variance","batchNorm");let u,c;return null!=s&&(u=Sn(s,"scale","batchNorm")),null!=r&&(c=Sn(r,"offset","batchNorm")),b(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),b(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),b(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Gu(o,i,l,c,u,a)}});const ju=Tn({batchNorm4d_:function(e,t,n,r,s,a){const o=Sn(e,"x","batchNorm"),i=Sn(t,"mean","batchNorm"),l=Sn(n,"variance","batchNorm");let u,c;return null!=s&&(u=Sn(s,"scale","batchNorm")),null!=r&&(c=Sn(r,"offset","batchNorm")),b(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),b(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),b(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Gu(o,i,l,c,u,a)}});Tn({broadcastArgs_:function(e,t){const n=Sn(e,"s0","broadcastArgs","int32"),r=Sn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return dn.runKernel("BroadcastArgs",s)}});const Ku=Tn({ceil_:function(e){const t={x:Sn(e,"x","ceil","float32")};return dn.runKernel("Ceil",t)}});const Xu=Tn({clipByValue_:function(e,t,n){const r=Sn(e,"x","clipByValue");b(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:t,clipValueMax:n};return dn.runKernel("ClipByValue",s,a)}});const Yu=Tn({concat1d_:function(e){return Xi(e,0)}});const Zu=Tn({concat2d_:function(e,t){return Xi(e,t)}});const Ju=Tn({concat3d_:function(e,t){return Xi(e,t)}});const Qu=Tn({concat4d_:function(e,t){return Xi(e,t)}});const ec=Tn({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=Sn(e,"x","conv1d"),l=Sn(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=go(i,[1,i.shape[0],i.shape[1]])),b(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),b(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),io("conv1d",r,o),b(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),b(ao(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),b("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=go(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=go(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=cl(h,p,[1,n],r,"NHWC",[1,a],o);return go(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const tc=Tn({conv2dTranspose_:function(e,t,n,r,s,a){const o=Sn(e,"x","conv2dTranspose"),i=Sn(t,"filter","conv2dTranspose");return hl(n,o,i,r,s,"NHWC",a)}});const nc=Tn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=Sn(e,"x","conv3d"),i=Sn(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=go(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),b(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),b(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),b(ao(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),b("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=dn.runKernel("Conv3D",c,p);return u?go(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const rc=Tn({conv3DBackpropInput_:function(e,t,n,r,s){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=go(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];b(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),b(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),b(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),b(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),b(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=dn.runKernel("Conv3DBackpropInputV2",c,p);return i?go(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const sc=Tn({conv3dTranspose_:function(e,t,n,r,s){const a=Sn(e,"x","conv3dTranspose"),o=Sn(t,"filter","conv3dTranspose");return rc(n,a,o,r,s)}});const ac=Tn({cos_:function(e){const t={x:Sn(e,"x","cos","float32")};return dn.runKernel("Cos",t)}});const oc=Tn({cosh_:function(e){const t={x:Sn(e,"x","cosh","float32")};return dn.runKernel("Cosh",t)}});const ic=Tn({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:Sn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return dn.runKernel("Cumsum",s,a)}});Tn({denseBincount_:function(e,t,n,r=!1){const s=Sn(e,"x","denseBincount"),a=Sn(t,"weights","denseBincount");b("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),b(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return dn.runKernel("DenseBincount",o,i)}});const lc=Tn({depthToSpace_:function(e,t,n="NHWC"){const r=Sn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];b(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),b(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),b(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),b(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return dn.runKernel("DepthToSpace",i,l)}});const uc=Tn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=Sn(e,"x","dilation2d"),i=Sn(t,"filter","dilation2d");b(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),b(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),b("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=go(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:s},h=dn.runKernel("Dilation2D",c,p);return u?go(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const cc=Tn({equal_:function(e,t){let n=Sn(e,"a","equal","string_or_numeric"),r=Sn(t,"b","equal","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("Equal",s)}});const pc=Tn({divNoNan_:function(e,t){let n=Sn(e,"a","div"),r=Sn(t,"b","div");[n,r]=rn(n,r);const s=Gl(n,r),a=tl(s),o=cc(r,a);return Kl(o,a,s)}});Tn({einsum_:function(e,...t){const n=t.map(((e,t)=>Sn(e,`tensors${t}`,"einsum"))),r={equation:e};return dn.runKernel("Einsum",n,r)}});const hc=Tn({erf_:function(e){let t=Sn(e,"x","erf");b("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=$s(t,"float32"));const n={x:t};return dn.runKernel("Erf",n)}});const dc=Tn({expm1_:function(e){const t={x:Sn(e,"x","expm1")};return dn.runKernel("Expm1",t)}});const fc=Tn({floor_:function(e){const t={x:Sn(e,"x","floor","float32")};return dn.runKernel("Floor",t)}});const mc=Tn({gather_:function(e,t,n=0,r=0){const s={x:Sn(e,"x","gather"),indices:Sn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return dn.runKernel("GatherV2",s,a)}});const gc=Tn({isFinite_:function(e){const t={x:Sn(e,"x","isFinite")};return dn.runKernel("IsFinite",t)}});const yc=Tn({isInf_:function(e){const t={x:Sn(e,"x","isInf")};return dn.runKernel("IsInf",t)}});const bc=Tn({isNaN_:function(e){const t={x:Sn(e,"x","isNaN")};return dn.runKernel("IsNan",t)}});const xc=Tn({less_:function(e,t){let n=Sn(e,"a","less","string_or_numeric"),r=Sn(t,"b","less","string_or_numeric");[n,r]=rn(n,r),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("Less",s)}});const wc=Tn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Sn(e,"x","localResponseNormalization");b(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),b(I(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=go(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:s},c=dn.runKernel("LRN",l,u);return i?go(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const kc=Tn({softplus_:function(e){const t={x:Sn(e,"x","softplus")};return dn.runKernel("Softplus",t)}});const vc=Tn({logSigmoid_:function(e){const t=Sn(e,"x","logSigmoid");return Ki((e=>({value:mu(kc(mu(e))),gradFunc:t=>po(t,yo(mu(e)))})))(t)}});const Nc=Tn({logSoftmax_:function(e,t=-1){const n=Sn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Ki(((e,n)=>{const r=su(e,t,!0),s=Hl(e,r),a=Hl($s(s,"float32"),Iu(xo(Eu(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=Eu(r);return Hl(e,po(xo(e,t,!0),s))}}}))(n)}});const Sc=Tn({logicalNot_:function(e){const t={x:Sn(e,"x","logicalNot","bool")};return dn.runKernel("LogicalNot",t)}});const Ic=Tn({logicalOr_:function(e,t){const n=Sn(e,"a","logicalOr","bool"),r=Sn(t,"b","logicalOr","bool");Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("LogicalOr",s)}});const Tc=Tn({maxPool_:function(e,t,n,r,s){const a=Sn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=go(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),b(ao(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),io("maxPool",r,s);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=dn.runKernel("MaxPool",l,u);return i?go(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ec=Tn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=Sn(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=go(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),b("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),io("maxPool3d",r,s);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=dn.runKernel("MaxPool3D",u,c);return l?go(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});Tn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Sn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=dn.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const $c=Tn({maximum_:function(e,t){let n=Sn(e,"a","maximum"),r=Sn(t,"b","maximum");[n,r]=rn(n,r),"bool"===n.dtype&&(n=$s(n,"int32"),r=$s(r,"int32")),Zs(n.shape,r.shape);const s={a:n,b:r};return dn.runKernel("Maximum",s)}});const Cc=Tn({mirrorPad_:function(e,t,n){b("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Sn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");b(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)b(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),b(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return dn.runKernel("MirrorPad",o,a)}});const Ac=Tn({mod_:function(e,t){let n=Sn(e,"a","mod"),r=Sn(t,"b","mod");[n,r]=rn(n,r);const s={a:n,b:r};return dn.runKernel("Mod",s)}});const Dc=Tn({moments_:function(e,t=null,n=!1){const r=R(t,(e=Sn(e,"x","moments")).shape),s=wu(e,r,n);let a=s.shape;n||(a=Ba(s.shape,r));const o=lu(Hl($s(e,"float32"),go(s,a)));return{mean:s,variance:wu(o,r,n)}}});Tn({multinomial_:function(e,t,n,r=!1){const s=Sn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?go(s,[1,-1]):s},l={numSamples:t,seed:n,normalized:r},u=dn.runKernel("Multinomial",i,l);return 1===o?go(u,[u.size]):u}});const Rc=Tn({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:Sn(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:r};return dn.runKernel("OneHot",s,a)}});const Fc=Tn({onesLike_:function(e){const t={x:Sn(e,"x","onesLike")};return dn.runKernel("OnesLike",t)}});const _c=Tn({pad_:function(e,t,n=0){const r=Sn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return dn.runKernel("PadV2",a,s)}});const Oc=Tn({prod_:function(e,t=null,n=!1){let r=Sn(e,"x","prod");"bool"===r.dtype&&(r=$s(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return dn.runKernel("Prod",s,a)}});var Mc={},Lc=a("cmoHh"),zc=a("euRi5"),Bc=a("hDsEw"),Pc=a("3J2Zm"),Vc=a("6Px8M"),Wc=a("lDm0S"),Uc={};!function(e,t){var n,r=this,s=256,o=t.pow(s,6),i=t.pow(2,52),l=2*i,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(e)]:null==a?function(){try{var t;return n&&(t=n.randomBytes)?t=t(s):(t=new Uint8Array(s),(r.crypto||r.msCrypto).getRandomValues(t)),m(t)}catch(t){var a=r.navigator,o=a&&a.plugins;return[+new Date,r,o,r.screen,m(e)]}}():a,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),e),(u.pass||c||function(e,n,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(t.random=e,n):e})(x,y,"global"in u?u.global:this==t,u.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=u&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=u&a+1],n=n*s+i[u&(i[a]=i[o=u&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[u&s]=u&(n^=19*t[u&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=c,f(t.random(),e),Uc){Uc=c;try{n=a("kjyEk")}catch(e){}}else"function"==typeof define&&define.amd&&define((function(){return c}))}([],Math),Uc.alea=Lc,Uc.xor128=zc,Uc.xorwow=Bc,Uc.xorshift7=Pc,Uc.xor4096=Vc,Uc.tychei=Wc,Mc=Uc;class Gc{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Mc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Hc{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Mc.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const qc=Tn({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Gc(t,n,r,!1,s),o=Es(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const jc=Tn({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Es(e,r),o=new Hc(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const Kc=Tn({reciprocal_:function(e){const t={x:Sn(e,"x","reciprocal")};return dn.runKernel("Reciprocal",t)}});const Xc=Tn({rsqrt_:function(e){const t={x:Sn(e,"x","rsqrt","float32")};return dn.runKernel("Rsqrt",t)}});const Yc=Tn({selu_:function(e){const t={x:Sn(e,"x","selu")};return dn.runKernel("Selu",t)}});const Zc=Tn({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=Sn(e,"x","separableConv2d"),l=Sn(t,"depthwiseFilter","separableConv2d"),u=Sn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=go(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),b(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),b(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),b(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];b(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=fl(c,l,r,s,o,a),m=cl(f,u,1,"valid",o);return p?go(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Jc=Tn({sign_:function(e){const t={x:Sn(e,"x","sign")};return dn.runKernel("Sign",t)}});const Qc=Tn({sin_:function(e){const t={x:Sn(e,"x","sin","float32")};return dn.runKernel("Sin",t)}});const ep=Tn({sinh_:function(e){const t={x:Sn(e,"x","sinh")};return dn.runKernel("Sinh",t)}});const tp=Tn({slice1d_:function(e,t,n){const r=Sn(e,"x","slice1d");return b(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Ji(r,[t],[n])}});const np=Tn({slice2d_:function(e,t,n){const r=Sn(e,"x","slice2d");return b(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Ji(r,t,n)}});const rp=Tn({slice3d_:function(e,t,n){const r=Sn(e,"x","slice3d");return b(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Ji(r,t,n)}});const sp=Tn({slice4d_:function(e,t,n){const r=Sn(e,"x","slice4d");return b(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Ji(r,t,n)}});const ap=Tn({softmax_:function(e,t=-1){const n=Sn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return dn.runKernel("Softmax",r,s)}});const op=Tn({spaceToBatchND_:function(e,t,n){const r=Sn(e,"x","spaceToBatchND");b(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),b(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),b(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return dn.runKernel("SpaceToBatchND",s,a)}});const ip=Tn({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,l=0){const u={x:Sn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return dn.runKernel("StridedSlice",u,c)}});const lp=Tn({tan_:function(e){const t={x:Sn(e,"x","tan","float32")};return dn.runKernel("Tan",t)}});const up=Tn({tanh_:function(e){const t={x:Sn(e,"x","tanh","float32")};return dn.runKernel("Tanh",t)}});const cp=Tn({topk_:function(e,t=1,n=!0){const r=Sn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,l]=dn.runKernel("TopK",a,o);return{values:i,indices:l}}});const pp=Tn({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Gc(t,n,r,!0,s),o=Es(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const hp=Tn({unique_:function(e,t=0){const n=Sn(e,"x","unique","string_or_numeric");b(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=dn.runKernel("Unique",r,s);return{values:a,indices:o}}});Tn({scatterND_:function(e,t,n){const r=Sn(e,"indices","scatterND","int32"),s=Sn(t,"updates","scatterND");Mo(s,r,n);const a={indices:r,updates:s},o={shape:n};return dn.runKernel("ScatterNd",a,o)}});Tn({sparseToDense_:function(e,t,n,r=0){const s=Sn(e,"sparseIndices","sparseToDense","int32"),a=Sn(t,"sparseValues","sparseToDense"),o=Sn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},l={outputShape:n};return dn.runKernel("SparseToDense",i,l)}});Tn({gatherND_:function(e,t){const n=Sn(t,"indices","gatherND","int32"),r={params:Sn(e,"x","gatherND","string_or_numeric"),indices:n};return dn.runKernel("GatherNd",r)}});const dp=Tn({dropout_:function(e,t,n,r){const s=Sn(e,"x","dropout");if(b("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),b(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Vt?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(S(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=Gl(fc(ul(jc(a,0,1,"float32",r),o)),o);return po(s,i)}}),fp={flipLeftRight:El,grayscaleToRGB:Cl,resizeNearestNeighbor:Bl,resizeBilinear:zl,rotateWithOffset:Al,cropAndResize:Tl,nonMaxSuppression:Rl,nonMaxSuppressionAsync:Fl,nonMaxSuppressionWithScore:_l,nonMaxSuppressionWithScoreAsync:Ol,nonMaxSuppressionPadded:Ml,nonMaxSuppressionPaddedAsync:Ll,threshold:Yl,transform:Zl},mp={bandPart:nu,gramSchmidt:hu,qr:bu};class gp extends Sa{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Gi(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return ji(e,t)}dispose(){null!=this.iterations_&&Gi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:ol(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(gp,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class yp extends gp{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=dn.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=dn.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Ui((()=>tl(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Ui((()=>tl(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Ui((()=>{const e=ul(po(a,this.rho),po(lu(s),1-this.rho)),t=po(Gl(iu(ul(o,this.epsilon)),iu(ul(a,this.epsilon))),s),n=ul(po(o,this.rho),po(lu(t),1-this.rho));a.assign(e),o.assign(n);const i=ul(po(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Gi(this.accumulatedGrads.map((e=>e.variable))),Gi(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}yp.className="Adadelta",Ta(yp);class bp extends gp{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=dn.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Ui((()=>Nl(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Ui((()=>{const e=ul(a,lu(s));a.assign(e);const t=ul(po(Gl(s,iu(ul(e,dn.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Gi(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}bp.className="Adagrad",Ta(bp);class xp extends gp{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ui((()=>{this.accBeta1=ol(t).variable(),this.accBeta2=ol(n).variable()})),null==r&&(this.epsilon=dn.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Ui((()=>{const n=Hl(1,this.accBeta1),r=Hl(1,this.accBeta2);t.forEach(((t,s)=>{const a=dn.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Ui((()=>tl(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Ui((()=>tl(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=ul(po(i,this.beta1),po(o,1-this.beta1)),c=ul(po(l,this.beta2),po(lu(o),1-this.beta2)),p=Gl(u,n),h=Gl(c,r);i.assign(u),l.assign(c);const d=ul(po(Gl(p,ul(iu(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(po(this.accBeta1,this.beta1)),this.accBeta2.assign(po(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Gi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Gi(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Ui((()=>{this.accBeta1.assign(ou(this.beta1,this.iterations_+1)),this.accBeta2.assign(ou(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}xp.className="Adam",Ta(xp);class wp extends gp{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ui((()=>{this.iteration=ol(0).variable(),this.accBeta1=ol(t).variable()})),null==r&&(this.epsilon=dn.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Ui((()=>{const n=Hl(1,this.accBeta1),r=Gl(-this.learningRate,ul(po(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=dn.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:tl(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:tl(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=ul(po(i,this.beta1),po(o,1-this.beta1)),c=po(l,this.beta2),p=ru(o),h=$c(c,p);i.assign(u),l.assign(h);const d=ul(po(Gl(r,n),Gl(u,ul(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(ul(this.iteration,1)),this.accBeta1.assign(po(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Gi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Gi(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}wp.className="Adamax",Ta(wp);class kp extends gp{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=dn.registeredVariables[t];Ui((()=>{const e=ul(po(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Hi(ol(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}kp.className="SGD",Ta(kp);class vp extends kp{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=ol(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=dn.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Ui((()=>tl(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Ui((()=>{let e;const t=ul(po(this.m,s),a);e=this.useNesterov?ul(po(this.c,ul(a,po(t,this.m))),r):ul(po(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Gi(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}vp.className="Momentum",Ta(vp);class Np extends gp{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=dn.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=dn.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Ui((()=>tl(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Ui((()=>tl(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Ui((()=>tl(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Ui((()=>{const e=ul(po(o,this.decay),po(lu(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=ul(po(t,this.decay),po(a,1-this.decay)),l=Gl(po(a,this.learningRate),iu(Hl(e,ul(lu(s),this.epsilon)))),u=ul(po(i,this.momentum),l);o.assign(e),t.assign(s),i.assign(u);const c=Hl(r,u);r.assign(c)}else{const e=ul(po(o,this.decay),po(lu(a),1-this.decay)),t=ul(po(i,this.momentum),Gl(po(a,this.learningRate),iu(ul(e,this.epsilon))));o.assign(e),i.assign(t);const n=Hl(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Gi(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Gi(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Gi(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Np.className="RMSProp",Ta(Np);class Sp{static sgd(e){return new kp(e)}static momentum(e,t,n=!1){return new vp(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new Np(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new xp(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new yp(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new wp(e,t,n,r,s)}static adagrad(e,t=.1){return new bp(e,t)}}const Ip={sgd:Sp.sgd,momentum:Sp.momentum,adadelta:Sp.adadelta,adagrad:Sp.adagrad,rmsprop:Sp.rmsprop,adamax:Sp.adamax,adam:Sp.adam},Tp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Ep(){return new Promise((e=>Tp((()=>e()))))}const $p={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,bo($s(n,"float32"),-1))}}},Cp={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=lu($s(n,"float32")),r=iu(Hl(ol(1),t));return mu(Gl(e,r))}}}},Ap={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=iu(Hl(lu($s(n,"float32")),1));return Gl(e,t)}}}},Dp={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{let t=e;const r=Ys(n.shape,s);return r.length>0&&(t=xo(t,r)),go(t,n.shape)},b:()=>{let t=e;const n=Ys(r.shape,s);return n.length>0&&(t=xo(t,n)),go(t,r.shape)}}}},Rp={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Fp={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tl(n)}}},_p={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tl(n)}}},Op={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,iu(Hl(ol(1),lu($s(n,"float32")))))}}},Mp={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=iu(ul(ol(1),lu($s(n,"float32"))));return Gl(e,t)}}}},Lp={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{const t=ul(lu(n),lu(r));let a=po(e,Gl(r,t));const o=Ys(n.shape,s);return o.length>0&&(a=xo(a,o)),go(a,n.shape)},b:()=>{const t=ul(lu(n),lu(r));let a=mu(po(e,Gl(n,t)));const o=Ys(r.shape,s);return o.length>0&&(a=xo(a,o)),go(a,r.shape)}}}},zp={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,ul(lu($s(n,"float32")),1))}}},Bp={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,Hl(ol(1),lu($s(n,"float32"))))}}};const Pp=Tn({avgPool3dGrad_:function(e,t,n,r,s,a){const o=Sn(e,"dy","avgPool3dGrad"),i=Sn(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=go(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=go(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),b(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),io("avgPool3dGrad",s,a);const p={dy:l,input:u},h={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=dn.runKernel("AvgPool3DGrad",p,h);return c?go(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Vp={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>Pp(e,r,s,a,o,i)}}};const Wp=Tn({avgPoolGrad_:function(e,t,n,r,s){const a=Sn(e,"dy","avgPoolGrad"),o=Sn(t,"input","avgPoolGrad");b(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=go(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=go(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),b(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},p={filterSize:n,strides:r,pad:s},h=dn.runKernel("AvgPoolGrad",c,p);return u?go(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Up={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>Wp(e,r,s,a,o)}}},Gp={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>bl(e,s,!1,!1),b:()=>bl(e,r,!0,!1)}:a&&!o?{a:()=>bl(s,e,!1,!0),b:()=>bl(r,e,!1,!1)}:{a:()=>bl(s,e,!0,!0),b:()=>bl(e,r,!0,!0)}:{a:()=>bl(e,s,!1,!0),b:()=>bl(r,e,!0,!1)}}},Hp={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>op(e,r,s)}}},qp={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>xo(e,i,!0)}}},jp={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},Kp={kernelName:"Ceil",gradFunc:e=>({x:()=>tl(e)})},Xp={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Kl(Ql(Jl(r,s),Vl(r,a)),e,tl(e))}}},Yp={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:$p.gradFunc},Zp={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=R(s,t[0].shape)[0],o=r.map((e=>e[a]));return Qi(e,o,a).map((e=>()=>e))}},Jp={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return b(so(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>hl(r.shape,e,s,o,i,l),filter:()=>pl(r,e,s.shape,o,i,l)}}},Qp={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>cl(e,s,a,o,i,1,l),filter:()=>pl(e,r,s.shape,a,o,i,l)}}};const eh=Tn({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=go(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=go(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),b(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),b(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),b(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),b(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),b(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:r,pad:s,filterShape:n};return dn.runKernel("Conv3DBackpropFilterV2",i,l)}}),th={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;b(so(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>rc(o.shape,e,i,s,a),filter:()=>eh(o,e,i.shape,s,a)}}},nh={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(mu(Qc($s(n,"float32"))),e)}}},rh={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(ep($s(n,"float32")),e)}}},sh={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=Va([s],r.rank);let n=ic(e,s,a,!o);return null!=t&&(n=gu(n,t)),n}}}},ah={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;b(so(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return b(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),b(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),b(ao(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),io("depthwiseConv2d",a,o),{x:()=>gl(l.shape,e,u,s,a,i,o),filter:()=>ml(l,e,u.shape,s,a,i,o)}}},oh={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>dn.runKernel("Dilation2DBackpropInput",a,n),filter:()=>dn.runKernel("Dilation2DBackpropFilter",o,n)}}},ih={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>dn.runKernel("EluGrad",r)}}},lh={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=po(Eu(mu(lu(n))),2/Math.sqrt(Math.PI));return{x:()=>po(e,r)}}},uh={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,n)}}},ch={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>go(e,n.shape)}}},ph={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,Eu(n))}}},hh={kernelName:"Floor",gradFunc:e=>({x:()=>tl(e)})},dh={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{const t=Gl(e,$s(r,"float32")),a=Ys(n.shape,s);return a.length>0?go(xo(t,a),n.shape):t},b:()=>{let t=po(e,$s(n,"float32"));const a=Ys(r.shape,s);a.length>0&&(t=go(xo(t,a),r.shape));const o=lu(r);return mu(Gl(t,$s(o,"float32")))}}}},fh={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,l=null==i?ol(1):i,u=Ys(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=Hl(s,a),h=po(e,l),d=Xc(ul(o,ol(r))),f=po(po(po(d,d),d),ol(-.5));return{x:()=>1===a.rank?go(po(po(e,$l(go(d,[1,1,1,a.shape[0]]),c)),l),s.shape):go(po(po(e,d),l),s.shape),mean:()=>{let e=po(po(d,ol(-1)),h);return 1===a.rank&&(e=xo(e,u)),go(e,a.shape)},variance:()=>{let e=po(po(f,p),h);return 1===a.rank&&(e=xo(e,u)),go(e,a.shape)},scale:()=>{const t=po(p,d);let n=po(e,t);return 1===a.rank&&(n=xo(n,u)),go(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=xo(t,u)),go(t,a.shape)}}}};const mh=Tn({unsortedSegmentSum_:function(e,t,n){const r=Sn(e,"x","unsortedSegmentSum"),s=Sn(t,"segmentIds","unsortedSegmentSum","int32");b(I(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return dn.runKernel("UnsortedSegmentSum",a,o)}}),gh={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=R(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),l=i.length,u=t.slice(a,t.length).slice(1),c=u.length,p=yh(0,l),h=yh(l+1,l+1+c),d=bh([i,[n],u]),f=go(e,d),m=go(s,[n]),g=bh([[l],p,h]),y=gu(f,g);let b=mh(y,m,r.shape[o]);const x=Wa(g);return b=gu(b,x),b},indices:()=>s}}};function yh(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function bh(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const xh={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>tl(n),b:()=>tl(r)}}},wh={kernelName:"Identity",gradFunc:e=>({x:()=>$s(e,"float32")})},kh={kernelName:"IsFinite",gradFunc:e=>({x:()=>tl(e)})},vh={kernelName:"IsInf",gradFunc:e=>({x:()=>tl(e)})},Nh={kernelName:"IsNan",gradFunc:e=>({x:()=>tl(e)})},Sh={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=Wl(r,0);return{x:()=>Kl(a,e,po(e,s))}}},Ih={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,ul(n,1))}}},Th={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,$s(n,"float32"))}}},Eh={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=Eu(r);return Hl(e,po(xo(e,s,!0),t))}}}};const $h=Tn({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:o};return dn.runKernel("LRNGrad",i,l)}}),Ch={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>$h(r,s,e,a,o,i,l)}}};function Ah(e,t,n,r){return t.rank<n.rank&&(t=go(t,Ba(t.shape,r))),e.rank<n.rank&&(e=go(e,Ba(e.shape,r))),{x:()=>po(e,$s(cc(n,t),e.dtype))}}const Dh={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=Ah(e,t[1],a,R(s,a.shape));return{x:()=>o.x()}}},Rh={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>po(e,$s(Jl(n,r),"float32")),b:()=>po(e,$s(xc(n,r),"float32"))}}};const Fh=Tn({maxPool3dGrad_:function(e,t,n,r,s,a,o){const i=Sn(e,"dy","maxPool3dGrad"),l=Sn(t,"input","maxPool3dGrad"),u=Sn(n,"output","maxPool3dGrad");let c=i,p=l,h=u,d=!1;4===l.rank&&(d=!0,c=go(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=go(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=go(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),b(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),b(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),b(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),io("maxPool3dGrad",a,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:s,pad:a,dimRoundingMode:o},g=dn.runKernel("MaxPool3DGrad",f,m);return d?go(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),_h={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>Fh(e,r,s,a,o,i,l)}}};const Oh=Tn({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=Sn(e,"dy","maxPoolGrad"),l=Sn(t,"input","maxPoolGrad"),u=Sn(n,"output","maxPoolGrad");b(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),b(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),b(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),io("maxPoolGrad",a,o);const c={dy:i,input:l,output:u},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return dn.runKernel("MaxPoolGrad",c,p)}}),Mh={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ji(e,a,r.shape)}}},Lh={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Uu(e,r,s)}}},zh={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Xi(e,r)}}};const Bh=[$p,Cp,Ap,Dp,Rp,Fp,_p,Op,Mp,Lp,zp,Bp,Vp,Up,Gp,Hp,qp,jp,Kp,Xp,Yp,Zp,Qp,Jp,th,nh,rh,sh,ah,oh,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{const t=Gl(e,$s(r,"float32")),a=Ys(n.shape,s);return a.length>0?go(xo(t,a),n.shape):t},b:()=>{let t=po(e,$s(n,"float32"));const a=Ys(r.shape,s);a.length>0&&(t=go(xo(t,a),r.shape));const o=lu(r);return mu(Gl(t,$s(o,"float32")))}}}},ih,lh,uh,ch,ph,dh,hh,fh,gh,xh,wh,kh,vh,Nh,Sh,Ih,Th,Eh,Ch,Dh,Dh,Rh,_h,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>Oh(e,r,s,a,o,i)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=R(s,r.shape),o=v(za(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=go(e,t);return Gl(po(n,vu(r.shape,"float32")),o)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=Ah(e,o,a,R(s,a.shape));return{x:()=>i.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>po(e,$s(Vl(n,r),"float32")),b:()=>po(e,$s(Wl(n,r),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ji(e,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{const t=Ys(n.shape,s);return t.length>0?go(xo(e,t),n.shape):e},b:()=>{const t=po(e,mu(fc(Gl(n,r)))),a=Ys(r.shape,s);return a.length>0?go(xo(t,a),r.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{const t=po(e,$s(r,"float32")),a=Ys(n.shape,s);return a.length>0?go(xo(t,a),n.shape):t},b:()=>{const t=po(e,$s(n,"float32")),a=Ys(r.shape,s);return a.length>0?go(xo(t,a),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>mu(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>el(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>tl(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return tu(e,r).map((e=>()=>e))}},Mh,Mh,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=Zs(a.shape,o.shape);return{a:()=>{const t=$s(o,"float32");let n=po(e,po(t,ou(a,Hl(t,ol(1)))));const r=Ys(a.shape,i);return r.length>0&&(n=xo(n,r)),go(n,a.shape)},b:()=>{const t=Wl(a,0),n=Kl(t,Iu(a),tl(a));let r=po(e,po(s,n));const l=Ys(o.shape,i);return l.length>0&&(r=xo(r,l)),go(r,o.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=Wl(n,0);return{x:()=>Kl(s,e,po(e,r)),alpha:()=>{let t=Kl(s,tl(e),po(e,n));const a=Ys(r.shape,e.shape);return a.length>0&&(t=xo(t,a)),go(t,r.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,mu(lu(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=po(Vl(n,6),bo(n));return{x:()=>po(e,$s(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,$s(bo(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>go(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>dn.runKernel("ResizeBilinearGrad",s,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>dn.runKernel("ResizeNearestNeighborGrad",s,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=R(r,e.shape);return{x:()=>al(e,s)}}},{kernelName:"Round",gradFunc:e=>({x:()=>tl(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>mu(Gl(e,po(ou(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>$s(tl(n),"float32"),t:()=>po(e,$s(n,e.dtype)),e:()=>po(e,$s(Sc(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Wl(n,ol(0)),r=ol(Bo),s=ol(Po),a=po(e,s),o=po(po(e,r),Eu($s(n,"float32")));return Kl(t,a,o)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,po(n,Hl(ol(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>tl(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(ac($s(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(oc($s(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,l]=wa(r,s,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>_c(e,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=po(e,r);return{logits:()=>Hl(a,po(xo(a,[s],true),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,yo(n))}}},Lh,Lh,zh,zh,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,po(iu($s(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=ol(2);return{a:()=>po(e,po(s,Hl(n,r))),b:()=>po(e,po(s,Hl(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(e,po($s(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>tl(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Zs(n.shape,r.shape);return{a:()=>{let t=e;const r=Ys(n.shape,s);return r.length>0&&(t=xo(t,r)),go(t,n.shape)},b:()=>{let t=e;const n=Ys(r.shape,s);return n.length>0&&(t=xo(t,n)),go(mu(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;R(a,r.shape).forEach((e=>{s[e]=1}));const o=go(e,s),i=po(o,vu(r.shape,"float32"));return{x:()=>i}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gl(e,lu(ac(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>po(Hl(ol(1),lu(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=tl(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=ul(t,Ji(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=ul(t,Ji(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=ul(t,Ji(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=ul(t,Ji(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Wa(s);return{x:()=>gu(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>eu(e,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=$c(t,tl(t)),r=mc(e,n);let s=Jl(t,ol(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=du(s,e+1);s=Ql(s,vu(r.shape,"bool"));const o=tl(r);return Kl(s,r,o)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>tl(e)})}];for(const e of Bh)Oe(e);Wt().prototype.abs=function(){return this.throwIfDisposed(),ru(this)},Wt().prototype.acos=function(){return this.throwIfDisposed(),Au(this)},Wt().prototype.acosh=function(){return this.throwIfDisposed(),Du(this)},Wt().prototype.add=function(e){return this.throwIfDisposed(),ul(this,e)},Wt().prototype.all=function(e,t){return this.throwIfDisposed(),Ru(this,e,t)},Wt().prototype.any=function(e,t){return this.throwIfDisposed(),Fu(this,e,t)},Wt().prototype.argMax=function(e){return this.throwIfDisposed(),_u(this,e)},Wt().prototype.argMin=function(e){return this.throwIfDisposed(),Ou(this,e)},Wt().prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,(()=>"The array must have only 1 element.")),go(this,[])},Wt().prototype.asType=function(e){return this.throwIfDisposed(),$s(this,e)},Wt().prototype.as1D=function(){return this.throwIfDisposed(),go(this,[this.size])},Wt().prototype.as2D=function(e,t){return this.throwIfDisposed(),go(this,[e,t])},Wt().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),go(this,[e,t,n])},Wt().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),go(this,[e,t,n,r])},Wt().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),go(this,[e,t,n,r,s])},Wt().prototype.asin=function(){return this.throwIfDisposed(),Mu(this)},Wt().prototype.asinh=function(){return this.throwIfDisposed(),Lu(this)},Wt().prototype.atan=function(){return this.throwIfDisposed(),zu(this)},Wt().prototype.atan2=function(e){return this.throwIfDisposed(),Bu(this,e)},Wt().prototype.atanh=function(){return this.throwIfDisposed(),Pu(this)},Wt().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Vu(this,e,t,n,r)},Wt().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Uu(this,e,t)},Wt().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),Gu(this,e,t,n,r,s)},Wt().prototype.broadcastTo=function(e){return this.throwIfDisposed(),jl(this,e)},Wt().prototype.cast=function(e){return this.throwIfDisposed(),$s(this,e)},Wt().prototype.ceil=function(){return this.throwIfDisposed(),Ku(this)},Wt().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Xu(this,e,t)},Wt().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Vt&&(e=[e]),Xi([this,...e],t)},Wt().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ec(this,e,t,n,r,s,a)},Wt().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),tc(this,e,t,n,r,s)},Wt().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),cl(this,e,t,n,r,s,a)},Wt().prototype.cos=function(){return this.throwIfDisposed(),ac(this)},Wt().prototype.cosh=function(){return this.throwIfDisposed(),oc(this)},Wt().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),ic(this,e,t,n)},Wt().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),lc(this,e,t)},Wt().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),fl(this,e,t,n,r,s,a)},Wt().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),uc(this,e,t,n,r,s)},Wt().prototype.divNoNan=function(e){return this.throwIfDisposed(),pc(this,e)},Wt().prototype.div=function(e){return this.throwIfDisposed(),Gl(this,e)};const Ph=Tn({dot_:function(e,t){const n=Sn(e,"t1","dot"),r=Sn(t,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(b(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=go(n,[1,-1]),t=go(r,[-1,1]),s=bl(e,t);return go(s,[])}if(1===n.rank&&2===r.rank){const e=go(n,[1,-1]),t=go(r,[r.shape[0],r.shape[1]]),s=bl(e,t);return go(s,[s.size])}if(2===n.rank&&1===r.rank){const e=go(r,[-1,1]),t=bl(n,e);return go(t,[t.size])}{const e=go(r,[r.shape[0],r.shape[1]]);return bl(n,e)}}});Wt().prototype.dot=function(e){return this.throwIfDisposed(),Ph(this,e)},Wt().prototype.elu=function(){return this.throwIfDisposed(),uo(this)},Wt().prototype.equal=function(e){return this.throwIfDisposed(),cc(this,e)},Wt().prototype.erf=function(){return this.throwIfDisposed(),hc(this)},Wt().prototype.exp=function(){return this.throwIfDisposed(),Eu(this)},Wt().prototype.expandDims=function(e){return this.throwIfDisposed(),du(this,e)},Wt().prototype.expm1=function(){return this.throwIfDisposed(),dc(this)},Wt().prototype.fft=function(){return this.throwIfDisposed(),nl(this)},Wt().prototype.flatten=function(){return this.throwIfDisposed(),go(this,[this.size])},Wt().prototype.floor=function(){return this.throwIfDisposed(),fc(this)},Wt().prototype.floorDiv=function(e){return this.throwIfDisposed(),Ul(this,e)},Wt().prototype.gather=function(e,t){return this.throwIfDisposed(),mc(this,e,t)},Wt().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Jl(this,e)},Wt().prototype.greater=function(e){return this.throwIfDisposed(),Wl(this,e)},Wt().prototype.ifft=function(){return this.throwIfDisposed(),sl(this)},Wt().prototype.irfft=function(){return this.throwIfDisposed(),il(this)},Wt().prototype.isFinite=function(){return this.throwIfDisposed(),gc(this)},Wt().prototype.isInf=function(){return this.throwIfDisposed(),yc(this)},Wt().prototype.isNaN=function(){return this.throwIfDisposed(),bc(this)},Wt().prototype.leakyRelu=function(e){return this.throwIfDisposed(),co(this,e)},Wt().prototype.lessEqual=function(e){return this.throwIfDisposed(),Vl(this,e)},Wt().prototype.less=function(e){return this.throwIfDisposed(),xc(this,e)},Wt().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),wc(this,e,t,n,r)},Wt().prototype.logSigmoid=function(){return this.throwIfDisposed(),vc(this)},Wt().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Nc(this,e)},Wt().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Cu(this,e,t)},Wt().prototype.log=function(){return this.throwIfDisposed(),Iu(this)},Wt().prototype.log1p=function(){return this.throwIfDisposed(),$u(this)},Wt().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ql(this,e)},Wt().prototype.logicalNot=function(){return this.throwIfDisposed(),Sc(this)},Wt().prototype.logicalOr=function(e){return this.throwIfDisposed(),Ic(this,e)};const Vh=Tn({logicalXor_:function(e,t){const n=Sn(e,"a","logicalXor","bool"),r=Sn(t,"b","logicalXor","bool");return Zs(n.shape,r.shape),Ql(Ic(e,t),Sc(Ql(e,t)))}});Wt().prototype.logicalXor=function(e){return this.throwIfDisposed(),Vh(this,e)},Wt().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),bl(this,e,t,n)},Wt().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Tc(this,e,t,n,r)},Wt().prototype.max=function(e,t){return this.throwIfDisposed(),su(this,e,t)},Wt().prototype.maximum=function(e){return this.throwIfDisposed(),$c(this,e)},Wt().prototype.mean=function(e,t){return this.throwIfDisposed(),wu(this,e,t)},Wt().prototype.min=function(e,t){return this.throwIfDisposed(),au(this,e,t)},Wt().prototype.minimum=function(e){return this.throwIfDisposed(),Su(this,e)},Wt().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Cc(this,e,t)},Wt().prototype.mod=function(e){return this.throwIfDisposed(),Ac(this,e)},Wt().prototype.mul=function(e){return this.throwIfDisposed(),po(this,e)},Wt().prototype.neg=function(){return this.throwIfDisposed(),mu(this)},Wt().prototype.norm=function(e,t,n){return this.throwIfDisposed(),cu(this,e,t,n)},Wt().prototype.notEqual=function(e){return this.throwIfDisposed(),ku(this,e)},Wt().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Rc(this,e,t,n)},Wt().prototype.onesLike=function(){return this.throwIfDisposed(),Fc(this)},Wt().prototype.pad=function(e,t){return this.throwIfDisposed(),_c(this,e,t)};const Wh=Tn({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Sn(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=go(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(ao(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=Xa(l.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:op(l,p,f),x=("avg"===n?()=>Vu(y,t,a,g,o):()=>Tc(y,t,a,g,o))(),w=d?x:Uu(x,p,m);return u?go(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});function Uh(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(jh(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const o=Uh(e[a],t,n,r);s[a]=o}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function Gh(e,t=qh){return Hh(e,t)}function Hh(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(jh(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=Hh(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function qh(e){return null===e?null:jh(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function jh(e){let t=!1;if(oe().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("kjyEk");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Vt)&&!(e instanceof Promise)&&!t)}function Kh(e){return Uh(e,Xh)}function Xh(e){return e instanceof Vt?{value:e.clone(),recurse:!1}:jh(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}Wt().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),Wh(this,e,t,n,r,s,a)},Wt().prototype.pow=function(e){return this.throwIfDisposed(),ou(this,e)},Wt().prototype.prelu=function(e){return this.throwIfDisposed(),ho(this,e)},Wt().prototype.prod=function(e,t){return this.throwIfDisposed(),Oc(this,e,t)},Wt().prototype.reciprocal=function(){return this.throwIfDisposed(),Kc(this)},Wt().prototype.relu=function(){return this.throwIfDisposed(),fo(this)},Wt().prototype.relu6=function(){return this.throwIfDisposed(),mo(this)},Wt().prototype.reshapeAs=function(e){return this.throwIfDisposed(),go(this,e.shape)},Wt().prototype.reshape=function(e){return this.throwIfDisposed(),go(this,e)},Wt().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),zl(this,e,t,n)},Wt().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Bl(this,e,t,n)},Wt().prototype.reverse=function(e){return this.throwIfDisposed(),al(this,e)},Wt().prototype.rfft=function(){return this.throwIfDisposed(),rl(this)},Wt().prototype.round=function(){return this.throwIfDisposed(),ql(this)},Wt().prototype.rsqrt=function(){return this.throwIfDisposed(),Xc(this)},Wt().prototype.selu=function(){return this.throwIfDisposed(),Yc(this)},Wt().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Zc(this,e,t,n,r,s,a)},Wt().prototype.sigmoid=function(){return this.throwIfDisposed(),yo(this)},Wt().prototype.sign=function(){return this.throwIfDisposed(),Jc(this)},Wt().prototype.sin=function(){return this.throwIfDisposed(),Qc(this)},Wt().prototype.sinh=function(){return this.throwIfDisposed(),ep(this)},Wt().prototype.slice=function(e,t){return this.throwIfDisposed(),Ji(this,e,t)},Wt().prototype.softmax=function(e){return this.throwIfDisposed(),ap(this,e)},Wt().prototype.softplus=function(){return this.throwIfDisposed(),kc(this)},Wt().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),op(this,e,t)},Wt().prototype.split=function(e,t){return this.throwIfDisposed(),Qi(this,e,t)},Wt().prototype.sqrt=function(){return this.throwIfDisposed(),iu(this)},Wt().prototype.square=function(){return this.throwIfDisposed(),lu(this)},Wt().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Tu(this,e)},Wt().prototype.squeeze=function(e){return this.throwIfDisposed(),pu(this,e)},Wt().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Vt?[this,e]:[this,...e];return eu(n,t)},Wt().prototype.step=function(e){return this.throwIfDisposed(),bo(this,e)},Wt().prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),ip(this,e,t,n,r,s,a,o,i)},Wt().prototype.sub=function(e){return this.throwIfDisposed(),Hl(this,e)},Wt().prototype.sum=function(e,t){return this.throwIfDisposed(),xo(this,e,t)},Wt().prototype.tan=function(){return this.throwIfDisposed(),lp(this)},Wt().prototype.tanh=function(){return this.throwIfDisposed(),up(this)},Wt().prototype.tile=function(e){return this.throwIfDisposed(),$l(this,e)},Wt().prototype.toBool=function(){return this.throwIfDisposed(),$s(this,"bool")},Wt().prototype.toFloat=function(){return this.throwIfDisposed(),$s(this,"float32")},Wt().prototype.toInt=function(){return this.throwIfDisposed(),$s(this,"int32")},Wt().prototype.topk=function(e,t){return this.throwIfDisposed(),cp(this,e,t)},Wt().prototype.transpose=function(e){return this.throwIfDisposed(),gu(this,e)},Wt().prototype.unique=function(e){return this.throwIfDisposed(),hp(this,e)},Wt().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),mh(this,e,t)},Wt().prototype.unstack=function(e){return this.throwIfDisposed(),tu(this,e)},Wt().prototype.where=function(e,t){return this.throwIfDisposed(),Kl(e,this,t)},Wt().prototype.zerosLike=function(){return this.throwIfDisposed(),tl(this)};class Yh{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Zh extends Yh{constructor(){super(Zh.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Jh(e){return new nd(e)}function Qh(e){return new rd(e)}function ed(e,t){return new fd(e,t)}Zh.INITIAL_CAPACITY=32;class td{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new cd(this,e)}filter(e){return new ld(this,e)}map(e){return new ud(this,e)}mapAsync(e){return new pd(this,e)}serialMapAsync(e){return new pd(this,e).serial()}flatmap(e){return new dd(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new id(this,e,t)}columnMajorBatch(e,t=!0,n=qh){return this.rowMajorBatch(e,t).map((e=>Gh(e,n)))}concatenate(e,t){return new fd(Jh([this,e]),t)}take(e){return e<0||null==e?this:new od(this,e)}skip(e){return e<0||null==e?this:new ad(this,e)}prefetch(e){return new gd(this,e)}shuffle(e,t){return new yd(this,e,t)}serial(){return new sd(this)}}class nd extends td{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Kh(e),done:!1}}}class rd extends td{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class sd extends td{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class ad extends td{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Gi(e.value)}return this.upstream.next()}}class od extends td{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class id extends td{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class ld extends td{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Gi(e.value)}}}class ud extends td{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Qt.getTensorsInContainer(e.value),n=this.transform(e.value),r=Qt.getTensorsInContainer(n);for(const e of t)Qt.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class cd extends td{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class pd extends td{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Qt.getTensorsInContainer(e.value),n=await this.transform(e.value),r=Qt.getTensorsInContainer(n);for(const e of t)Qt.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class hd extends td{constructor(){super(),this.outputQueue=new Zh,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class dd extends hd{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Qt.getTensorsInContainer(e.value),n=this.transform(e.value),r=Qt.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)Qt.isTensorInList(e,r)||e.dispose();return!0}}class fd extends td{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var md;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(md||(md={}));class gd extends td{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Yh(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class yd extends gd{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Mc.alea(n||Le.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class bd{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return Le.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),xd((async()=>(await n.iterator()).columnMajorBatch(e,t,wd)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,xd((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,xd((async()=>(await t.iterator()).filter((t=>Ui((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return xd((async()=>(await t.iterator()).map((t=>Ui((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return xd((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return xd((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,xd((async()=>ed(Qh((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,xd((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Mc.alea(t||Le.now().toString());return xd((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,xd((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function xd(e,t=null){return new class extends bd{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function wd(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Vt||Le.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Vt?eu(e):Cn(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}bd.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function kd(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Le.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function vd(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(kd(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=Le.sizeFromShape(o.shape),c=n||o.dtype,p=Le.getArrayFromDType(c,u);for(let e=0;e<u;++e)p[e]=t(l[e],s);return i.makeTensorInfo(o.shape,c,p)}}function Nd(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;if(kd(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=n||o.dtype,c=t(l,u,s);return i.makeTensorInfo(o.shape,u,c)}}const Sd=vd("Elu",(e=>e>=0?e:Math.exp(e)-1)),Id={kernelName:"Elu",backendName:"cpu",kernelFunc:Sd};function Td(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Ed={kernelName:"Identity",backendName:"cpu",kernelFunc:Td};function $d(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;kd([s],"leakyRelu");const o=Le.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,l=Le.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(s.shape,"float32",l)}const Cd={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:$d};function Ad(e){return(t,n,r,s,a)=>{const o=Ea.assertAndGetBroadcastShape(t,n),i=o.length,l=Le.computeStrides(o),u=Le.sizeFromShape(o),c=Le.getTypedArrayFromDType(a,u),p=t.length,h=n.length,d=Le.computeStrides(t),f=Le.computeStrides(n),m=Ea.getBroadcastDims(t,o),g=Ea.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const n=Le.indexToLoc(t,i,l),a=n.slice(-p);m.forEach((e=>a[e]=0));const o=Le.locToIndex(a,p,d),u=n.slice(-h);g.forEach((e=>u[e]=0));const y=Le.locToIndex(u,h,f);c[t]=e(r[o],s[y])}return[c,o]}}const Dd=Ad(((e,t)=>e<0?t*e:e));function Rd(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;kd([r,s],"prelu");const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,[i,l]=Dd(r.shape,s.shape,a,o,"float32");return n.makeTensorInfo(l,"float32",i)}const Fd={kernelName:"Prelu",backendName:"cpu",kernelFunc:Rd},_d=vd("Relu",(e=>Math.max(0,e))),Od={kernelName:"Relu",backendName:"cpu",kernelFunc:_d},Md=vd("Relu6",(e=>Math.min(Math.max(0,e),6))),Ld={kernelName:"Relu6",backendName:"cpu",kernelFunc:Md};function zd(e){return(t,n,r)=>{const s=Le.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const Bd=zd((e=>1/(1+Math.exp(-e)))),Pd=vd("Sigmoid",(e=>1/(1+Math.exp(-e)))),Vd={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:Pd};function Wd(e,t,n,r,s){if("linear"===n)return Td({inputs:{x:t},backend:e});if("relu"===n)return _d({inputs:{x:t},backend:e});if("elu"===n)return Sd({inputs:{x:t},backend:e});if("relu6"===n)return Md({inputs:{x:t},backend:e});if("prelu"===n)return Rd({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return $d({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return Pd({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Ud(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const Gd={kernelName:"Complex",backendName:"cpu",kernelFunc:Ud};function Hd(e,t,n="float32"){if("complex64"===n){return Ud({inputs:{real:Hd(e,t,"float32"),imag:Hd(e,t,"float32")},backend:e})}const r=Le.makeZerosTypedArray(Le.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function qd(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const jd={kernelName:"Real",backendName:"cpu",kernelFunc:qd};function Kd(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return Td({inputs:{x:s},backend:n});const e=Hd(n,s.shape,s.dtype),t=Kd({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=Ud({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=qd({inputs:{input:s},backend:n}),t=Kd({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Le.hasEncodingLoss(s.dtype,a)){const e=Td({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(s.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(s.shape,"int32",t)}if("bool"===a){const e=n.data.get(s.dataId).values,t=Le.toTypedArray([0],s.dtype),[r,a]=Ad(((e,t)=>e!==t?1:0))(s.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const Xd={kernelName:"Cast",backendName:"cpu",kernelFunc:Kd};function Yd(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:o}=n,i=s;kd([a,o],e);const l=i.data.get(a.dataId).values,u=i.data.get(o.dataId).values,c="string"===a.dtype?Ea.fromUint8ToStringArray(l):l,p="string"===a.dtype?Ea.fromUint8ToStringArray(u):u,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a:a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=Kd({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,l=i.data.get(r.dataId).values,u=i.data.get(s.dataId).values,c=Kd({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(a.shape,o.shape,l,u,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=Ud({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[l,u]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(u,s,l)}}}function Zd(e){return(t,n,r,s,a,o)=>{const i=Ea.assertAndGetBroadcastShape(t,n),l=Le.sizeFromShape(i),u=i.length,c=Le.computeStrides(i),p=Le.getTypedArrayFromDType("float32",l),h=Le.getTypedArrayFromDType("float32",l),d=Ea.getBroadcastDims(t,i),f=Ea.getBroadcastDims(n,i),m=Ea.mergeRealAndImagArrays(r,s),g=Ea.mergeRealAndImagArrays(a,o),y=t.length,b=Le.computeStrides(t),x=n.length,w=Le.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=Le.indexToLoc(t,u,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=Le.locToIndex(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const o=Le.locToIndex(a,x,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const Jd=Ad(((e,t)=>e+t)),Qd=Zd(((e,t,n,r)=>({real:e+n,imag:t+r}))),ef=Yd("Add",Jd,Qd),tf={kernelName:"Add",backendName:"cpu",kernelFunc:ef};function nf(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=Le.sizeFromShape(s.shape),i=Le.inferFromImplicitShape(a,o),l=Le.sizeFromShape(i);Le.assert(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const u=n.data.get(s.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const rf={kernelName:"Reshape",backendName:"cpu",kernelFunc:nf};function sf(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;kd([s,a],"matMul");const l=s.shape.length,u=a.shape.length,c=o?s.shape[l-2]:s.shape[l-1],p=i?a.shape[u-1]:a.shape[u-2],h=o?s.shape[l-1]:s.shape[l-2],d=i?a.shape[u-2]:a.shape[u-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Le.sizeFromShape(f),y=Le.sizeFromShape(m),b=Ks.assertAndGetBroadcastShape(s.shape.slice(0,-2),a.shape.slice(0,-2)).concat([h,d]);Le.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=nf({inputs:{x:s},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=nf({inputs:{x:a},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=Le.computeStrides(w.shape),C=Le.computeStrides(k.shape),[A,D,R]=o?[$[0],1,$[1]]:[$[0],$[1],1],[F,_,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=Es([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const s=Math.min(t+B,N),a=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<s;i++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<o;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[r+i*D+s*R]*E[s*F+t*_+a]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const af={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:sf};const of={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=sf({inputs:{a:s,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(d=ef({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=Wd(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function lf(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const uf={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;kd(t,"abs");let r=new Float32Array(Le.sizeFromShape(t.shape));return r=lf(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},cf={kernelName:"Acos",backendName:"cpu",kernelFunc:vd("Acos",(e=>Math.acos(e)))},pf={kernelName:"Acosh",backendName:"cpu",kernelFunc:vd("Acosh",(e=>Math.acosh(e)))};const hf={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;kd(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=Es(r[0].shape,r[0].dtype),o=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function df(e,t,n,r,s){const a=t.length,o=Le.sizeFromShape(t),i=Le.computeStrides(t),l=Le.computeStrides(s),u=Le.getTypedArrayFromDType(n,Le.sizeFromShape(s));for(let t=0;t<o;++t){const n=Le.indexToLoc(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];u[Le.locToIndex(s,a,l)]=e[t]}return u}function ff(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;kd(s,"transpose");const o=s.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=s.shape[a[e]];const l=df(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(l,i,s.dtype),shape:i,dtype:s.dtype}}const mf={kernelName:"Transpose",backendName:"cpu",kernelFunc:ff};const gf={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;kd(s,"all");const i=Le.parseAxisParam(a,s.shape);let l=i;const u=Ea.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=ff({inputs:{x:s},backend:n,attrs:{perm:u}}),l=Ea.getInnerMostAxes(l.length,s.shape.length)),Ea.assertAxesAreInnerMostDims("all",l,c.shape.length);const[p,h]=Ea.computeOutAndReduceShapes(c.shape,l),d=Le.sizeFromShape(h),f=Le.makeZerosTypedArray(Le.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=nf({inputs:{x:g},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const yf={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;kd(s,"any");const i=Le.parseAxisParam(a,s.shape);let l=i;const u=Ea.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=ff({inputs:{x:s},backend:n,attrs:{perm:u}}),l=Ea.getInnerMostAxes(l.length,s.shape.length)),Ea.assertAxesAreInnerMostDims("any",l,c.shape.length);const[p,h]=Ea.computeOutAndReduceShapes(c.shape,l),d=Le.sizeFromShape(h),f=Le.makeZerosTypedArray(Le.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=nf({inputs:{x:g},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const bf={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;kd(s,"argMax");let o=Le.parseAxisParam(a,s.shape);const i=Ea.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=ff({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=Ea.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],Ea.assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[c,p]=Ea.computeOutAndReduceShapes(l.shape,o),h=Le.sizeFromShape(c),d=Le.makeZerosTypedArray(h,"int32"),f=Le.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const xf={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;kd(s,"argMin");let o=Le.parseAxisParam(a,s.shape);const i=Ea.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=ff({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=Ea.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],Ea.assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[c,p]=Ea.computeOutAndReduceShapes(l.shape,o),h=Le.sizeFromShape(c),d=Le.makeZerosTypedArray(h,"int32"),f=Le.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},wf={kernelName:"Asin",backendName:"cpu",kernelFunc:vd("Asin",(e=>Math.asin(e)))},kf={kernelName:"Asinh",backendName:"cpu",kernelFunc:vd("Asinh",(e=>Math.asinh(e)))},vf={kernelName:"Atan",backendName:"cpu",kernelFunc:vd("Atan",(e=>Math.atan(e)))},Nf={kernelName:"Atan2",backendName:"cpu",kernelFunc:Yd("Atan2",Ad(((e,t)=>Math.atan2(e,t))))},Sf={kernelName:"Atanh",backendName:"cpu",kernelFunc:vd("Atanh",(e=>Math.atanh(e)))};function If(e,t,n,r,s,a){const o=s.strideHeight,i=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,p=s.effectiveFilterWidth,h=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Es(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(s.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const s=m+n*r[1];for(let n=c;n<h;n+=u){const o=e[s+n*r[2]+t];"max"===a&&o>y?y=o:"avg"===a&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function Tf(e,t,n,r,s=!1,a=!1){const o=Es(r.outShape,"int32"),i=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Es(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*l-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const o=n-g;for(let i=d;i<x;i+=c){const l=i-p,u=m.get(e,n,i,t);u>w&&(w=u,k=s?a?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+l)}}o.set(k,e,n,i,t)}}return o}function Ef(e,t,n,r,s,a){const o=s.strideDepth,i=s.strideHeight,l=s.strideWidth,u=s.dilationDepth,c=s.dilationHeight,p=s.dilationWidth,h=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Es(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],N=s.outShape[3]*s.outShape[4],S=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=u;const E=Math.min(s.inDepth,h+I),$=n+k*v;for(let n=0;n<s.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(s.inHeight,d+o),k=$+n*N;for(let n=0;n<s.outWidth;++n){const o=n*l-y;let i=o;for(;i<0;)i+=p;const d=Math.min(s.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=u){const s=x+n*r[1];for(let n=h;n<m;n+=c){const o=s+n*r[2];for(let n=i;n<d;n+=p){const s=e[o+n*r[3]+t];if("max"===a&&s>v?v=s:"avg"===a&&(N+=s,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/I:v}}}}return x}const $f={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;kd(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Le.assert(Ea.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ea.computePool2DInfo(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Le.arraysEqual(u.inShape,u.outShape))c=Td({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Le.computeStrides(s.shape),r=If(e,s.shape,s.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}};const Cf={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;kd(s,"avgPool3d");const c=Ea.computePool3DInfo(s.shape,a,o,1,i,l,u),p=Ef(n.data.get(s.dataId).values,s.shape,s.dtype,Le.computeStrides(s.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const Af={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;kd([s,a],"avgPool3DGrad");const c=Ea.computePool3DInfo(a.shape,o,i,1,l,u),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=Es(a.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-N,o=r-I,i=s-S;let l=0;for(let n=0;n<w;n+=y){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const s=(o+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const a=(i+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,r,s,a,t)}}}T.set(l*E,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Df={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;kd([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=Ea.computePool2DInfo(o.shape,i,l,1,u),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Es(o.shape,"float32"),v=1/(d*f),N=n.data.get(s.dataId).values,S=Es(s.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(s+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;o+=S.get(e,r,s,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const Rf={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:o,mean:i,variance:l}=t;Le.assert(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Le.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Le.assert(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),kd([s,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function Ff(e,t,n,r,s){const a=aa.isSliceContinous(r,t,n),o=Le.sizeFromShape(n),i=Le.computeStrides(r);if(a){const n=aa.computeFlatOffset(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const l=Es(r,s,"string"===s?Ea.fromUint8ToStringArray(e):e),u=Es(n,s);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));u.set(l.get(...r),...n)}return"string"===s?Ea.fromStringArrayToUint8(u.values):u.values}function _f(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r;kd(s,"slice");const[i,l]=aa.parseSliceParams(s,a,o);aa.assertParamsValid(s,i,l);const u=Ff(n.data.get(s.dataId).values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,u)}const Of={kernelName:"Slice",backendName:"cpu",kernelFunc:_f};const Mf={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;kd([s],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),l=Ea.getReshaped(s.shape,a,i),u=Ea.getPermuted(l.length,a.length),c=Ea.getReshapedPermuted(s.shape,a,i),p=Ea.getSliceBeginCoords(o,a.length),h=Ea.getSliceSize(c,o,a.length),d=nf({inputs:{x:s},backend:n,attrs:{shape:l}}),f=ff({inputs:{x:d},backend:n,attrs:{perm:u}}),m=nf({inputs:{x:f},backend:n,attrs:{shape:c}}),g=_f({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function Lf(e,t,n,r,s){const a=Le.sizeFromShape(r),o=Le.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function zf(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=Es([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}const Bf={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=Lf(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}};const Pf={kernelName:"BroadcastArgs",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=Ea.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Vf=zd((e=>Math.ceil(e))),Wf={kernelName:"Ceil",backendName:"cpu",kernelFunc:Nd("Ceil",Vf)},Uf={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:vd("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},Gf={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(Le.sizeFromShape(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function Hf(e,t,n,r){const s=Le.getArrayFromDType(n,Le.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=Le.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?Ea.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}function qf(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const jf={kernelName:"Imag",backendName:"cpu",kernelFunc:qf};function Kf(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Le.parseAxisParam(s,t[0].shape)[0];let o=Ea.computeOutShape(t.map((e=>e.shape)),a);if(0===Le.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>Le.sizeFromShape(e.shape)>0));if(1===i.length)return Td({inputs:{x:i[0]},backend:n});const l=i.map((e=>e.shape));if(Ea.assertParamsConsistent(l,a),"complex64"===i[0].dtype){const e=i.map((e=>qd({inputs:{input:e},backend:n}))),t=i.map((e=>qf({inputs:{input:e},backend:n}))),r=Kf({inputs:e,backend:n,attrs:{axis:a}}),s=Kf({inputs:t,backend:n,attrs:{axis:a}}),o=Ud({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}const u=i.map((e=>{const t=Le.sizeFromShape(e.shape.slice(a));return nf({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Ea.computeOutShape(u.map((e=>e.shape)),1);const p=1===u[0].shape[0],h=Hf(c,o,t[0].dtype,p),d=Ea.computeOutShape(i.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Xf={kernelName:"Concat",backendName:"cpu",kernelFunc:Kf};function Yf(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r;kd([s,a],"conv2d");const p=Ea.convertConv2DDataFormat(l),h=Ea.computeConv2DInfo(s.shape,a.shape,o,u,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new Lt(h.outShape,s.dtype),k=Le.computeStrides(s.shape),v=Le.computeStrides(a.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],D=n.data.get(s.dataId).values,R=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,s=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=h.inHeight)continue;const a=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const s=o+r*I;let i=a+e*v[1];for(let e=0;e<h.inChannels;++e){const n=D[s+e*T];for(let e=0;e<h.outChannels;++e)F[t+e*A]+=n*R[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const Zf={kernelName:"Conv2D",backendName:"cpu",kernelFunc:Yf};const Jf={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;kd([s,a],"conv2dBackpropFilter");const p=Ea.convertConv2DDataFormat(l),h=Ea.computeConv2DInfo(s.shape,c,o,1,i,u,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new Lt(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=new Lt(s.shape,s.dtype,k),S=new Lt(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;l+=y?N.get(u,t,n,o)*S.get(u,c,e,i):N.get(u,o,t,n)*S.get(u,i,c,e)}}b.set(l,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Qf={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r;kd([s,a],"conv2dBackpropInput");const p=Le.computeStrides(a.shape),h=Le.computeStrides(s.shape);let d=Ea.convertConv2DDataFormat(u);const f=Ea.computeConv2DInfo(o,a.shape,i,1,l,c,!1,d),m=new Lt(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:D,strideWidth:R}=f;d=f.dataFormat;const F=N-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],V=O?h[1]:h[2],W=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-F,s=Math.max(0,Math.ceil(r/D)),a=Math.min(C,(N+r)/D);for(let o=0;o<E;++o){const i=o-_,l=Math.max(0,Math.ceil(i/R)),u=Math.min(A,(S+i)/R);let c=0;for(let n=s;n<a;++n){const s=n*D-r;for(let r=l;r<u;++r){const a=P*e+V*n+W*r,o=x*(N-1-s)+w*(S-1-(r*R-i))+k*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const em={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r;kd([s,a],"conv3d");const u=Ea.computeConv3DInfo(s.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Lt(u.outShape,s.dtype),k=n.data.get(s.dataId).values,v=n.data.get(a.dataId).values,N=w.values,S=Le.computeStrides(s.shape),I=Le.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const r=n+e*w.strides[1],s=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=u.inDepth)continue;const a=e*I[0],o=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=r+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=u.inHeight)continue;const s=a+e*I[1],i=o+r*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=u.inWidth)continue;const a=s+e*I[2],o=i+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const tm={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r;kd([s,a],"conv3dBackpropFilterV2");const u=Le.computeStrides(s.shape),c=Le.computeStrides(a.shape),p=Ea.computeConv3DInfo(s.shape,l,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new Lt(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(a.dataId).values,[I,T,E,$]=c,C=n.data.get(s.dataId).values,[A,D,R,F]=u,_=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/h)),n=Math.min(p.outDepth,(p.inDepth+_-e)/h),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),o=Math.min(p.outHeight,(p.inHeight+M-s)/d),i=s*k+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-_)*D+p,n=m*T+y;for(let e=a;e<o;++e){const a=(s+e*d-M)*R+t,o=e*E+n;for(let e=l;e<u;++e){const t=e*$+o;g+=C[(r+e*f-O)*F+a+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const nm={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r;kd([s],"conv3dBackpropInputV2");const u=Le.computeStrides(s.shape),c=Le.computeStrides(a.shape),p=Ea.computeConv3DInfo(l,a.shape,i,1,o),h=new Lt(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(s.dataId).values,[x,w,k,v]=u,N=n.data.get(a.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:D,inChannels:R,inDepth:F,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=D-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(C+r)/P);for(let o=0;o<_;++o){const i=o-G,l=Math.max(0,Math.ceil(i/V)),u=Math.min(z,(A+i)/V);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/W)),$=Math.min(B,(D+p)/W);let R=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=l;r<u;++r){const a=r*V-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,l=S*(C-1-s)+I*(A-1-a)+T*(D-1-(o*W-p))+E*t;for(let e=0;e<M;++e){R+=b[i+e]*N[l+e]}}}}d[f*e+m*n+g*o+y*c+t]=R}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},rm={kernelName:"Cos",backendName:"cpu",kernelFunc:vd("Cos",(e=>Math.cos(e)))},sm={kernelName:"Cosh",backendName:"cpu",kernelFunc:vd("Cosh",(e=>Math.cosh(e)))};const am={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,[c,p,h,d]=s.shape,f=a.shape[0],[m,g]=i,y=Es([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,k=Le.computeStrides(s.shape),v=Le.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(s-n)*(p-1)/(m-1):0,f=g>1?(a-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+s)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=u}else if("bilinear"===l){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?r*(h-1)+l*f:.5*(r+a)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+l*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let a=r+p*k[2]+n*k[1]+o*k[0];const u=w[a];a=r+m*k[2]+n*k[1]+o*k[0];const c=w[a];a=r+p*k[2]+s*k[1]+o*k[0];const h=w[a];a=r+m*k[2]+s*k[1]+o*k[0];const d=u+(c-u)*b,f=h+(w[a]-h)*b;a=r+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const s=g>1?r*(h-1)+n*f:.5*(r+a)*(h-1);if(s<0||s>h-1){for(let r=0;r<d;r++){const s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const i=Math.round(s),l=Math.round(c);for(let r=0;r<d;r++){const s=r+i*k[2]+l*k[1]+o*k[0],a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const om={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r;kd(s,"cumsum");const l=Ea.getAxesPermutation([a],s.shape.length);let u=s;null!=l&&(u=ff({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=Ea.getInnerMostAxes(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=tn(u.dtype,"int32"),h=Le.makeZerosTypedArray(Le.sizeFromShape(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=ff({inputs:{x:g},backend:n,attrs:{perm:Ea.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const im={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=Lf(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===s.shape.length){const e=zf(n.bufferSync(s),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const lm={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r;Le.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=s.shape[0],l=s.shape[1],u=s.shape[2],c=s.shape[3],p=l*a,h=u*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<h;++t){const s=Math.floor(t/a),o=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+o+c*(s+u*(n+l*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],s.dtype,m)}};function um(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;kd([s,a],"depthwiseConv2DNative");const c=Le.computeStrides(s.shape),p=Le.computeStrides(a.shape);let h=l;null==h&&(h=[1,1]),Le.assert(Ea.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=Ea.computeConv2DInfo(s.shape,a.shape,o,h,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Lt(d.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*p[1],i=o+r*d.inChannels;let l=t,u=s;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[l+e]+=t*S[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const cm={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:um};const pm={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r;kd([s,a],"depthwiseConv2dNativeBackpropFilter");const p=Ea.computeConv2DInfo(s.shape,c,o,i,l,u,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new Lt(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(s.dataId).values,k=new Lt(s.shape,s.dtype,w),v=n.data.get(a.dataId).values,N=new Lt(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),l=o%x;let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=s;e<a;++e){const n=r+e*d-y;u+=k.get(l,t,n,i)*N.get(l,c,e,o)}}g.set(u,e,r,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const hm={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r;kd([s,a],"depthwiseConv2DNativeBackpropInput");const p=Le.computeStrides(s.shape),h=Le.computeStrides(a.shape),d=Ea.computeConv2DInfo(c,a.shape,o,i,l,u,!0),f=new Lt(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,k,v]=p,N=n.data.get(a.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:D,inWidth:R,outChannels:F,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=F/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<D;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(_,($+r)/M);for(let o=0;o<R;++o){const i=o-B,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(C+i)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=l;r<u;++r){const a=w*e+k*n+v*r,o=S*($-1-s)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const dm={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=Le.sizeFromShape(r.shape),a=n.data.get(r.dataId).values,o=Es([s,s],r.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*s+e]=a[e];const l=[...r.shape,...r.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},fm={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:o,dilations:i}=n,l=t,u=l.data.get(r.dataId).values,c=r.shape.length,p=l.data.get(s.dataId).values,h=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=Ea.computeDilation2DInfo(r.shape,s.shape,a,o,"NHWC",i),E=Le.sizeFromShape(T),$=T.length,C=Le.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const o=a*k-x.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=Le.locToIndex([e,a,d,i],c,Le.computeStrides(r.shape)),f=Le.locToIndex([t,n,i],h,Le.computeStrides(s.shape)),m=u[o]+p[f];m>l&&(l=m)}}}C[Le.locToIndex([e,t,a,i],$,Le.computeStrides(T))]=l}}}return{dataId:l.write(Le.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},mm={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Le.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Le.toNestedArray(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Ea.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",l);Le.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Le.toNestedArray(I,u.data.get(a.dataId).values),E=Le.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=s+n*S;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=t,l=n)}}}E[i][l][a]+=T[e][t][r][a]}}}return{dataId:u.write(Le.toTypedArray(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},gm={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Le.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Le.toNestedArray(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=Ea.computeDilation2DInfo(r.shape,s.shape,o,i,"NHWC",l);Le.assert(a.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${a.rank}`));const T=Le.toNestedArray(I,u.data.get(a.dataId).values),E=Le.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=s+n*S;if(u>=0&&u<f){const s=c[e][r][u][a]+p[t][n][a];s>o&&(o=s,i=r,l=u)}}}E[e][i][l][a]+=T[e][t][r][a]}}}return{dataId:u.write(Le.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ym=Ad(((e,t)=>e*t)),bm=Zd(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),xm=Yd("Multiply",ym,bm),wm={kernelName:"Multiply",backendName:"cpu",kernelFunc:xm};function km(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;let i;kd(s,"sum"),i="bool"===s.dtype?Kd({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):Td({inputs:{x:s},backend:n});const l=i.shape.length,u=Le.parseAxisParam(a,i.shape),c=Ea.getAxesPermutation(u,l);let p=u,h=i;null!=c&&(h=ff({inputs:{x:i},backend:n,attrs:{perm:c}}),p=Ea.getInnerMostAxes(p.length,l)),Ea.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=Ea.computeOutAndReduceShapes(h.shape,p);let m=Hd(n,d,Ea.upcastType(h.dtype,"int32"));const g=Le.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=nf({inputs:{x:m},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const vm={kernelName:"Sum",backendName:"cpu",kernelFunc:km};const Nm={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=Ea.decodeEinsumEquation(s,a.length);Ea.checkEinsumDimSizes(o.length,l,a);const{path:u,steps:c}=Ea.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Ea.getEinsumPermutation(d,l[t]);let s;Ea.isIdentityPermutation(e)?s=a[t]:(s=ff({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Le.arraysEqual(s.shape,o)||(s=nf({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=xm({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=km({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const Sm={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;kd([r,s],"eluGrad");const a=new Float32Array(Le.sizeFromShape(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},Im=Ad(((e,t)=>e===t?1:0)),Tm=Yd("Equal",Im,null,"bool"),Em={kernelName:"Equal",backendName:"cpu",kernelFunc:Tm},$m=Ea.ERF_P,Cm=Ea.ERF_A1,Am=Ea.ERF_A2,Dm=Ea.ERF_A3,Rm=Ea.ERF_A4,Fm=Ea.ERF_A5,_m={kernelName:"Erf",backendName:"cpu",kernelFunc:vd("Erf",(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+$m*n);return t*(1-((((Fm*r+Rm)*r+Dm)*r+Am)*r+Cm)*r*Math.exp(-n*n))}))},Om=zd((e=>Math.exp(e))),Mm=Nd("Exp",Om,"float32"),Lm={kernelName:"Exp",backendName:"cpu",kernelFunc:Mm};function zm(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,o=s.shape.length,i=s.shape.slice();let l=a;return a<0&&(Le.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),nf({inputs:{x:s},backend:n,attrs:{shape:i}})}const Bm={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:zm},Pm=zd((e=>Math.expm1(e))),Vm={kernelName:"Expm1",backendName:"cpu",kernelFunc:Nd("Expm1",Pm)},Wm=Yd("RealDiv",Ad(((e,t)=>e/t))),Um={kernelName:"RealDiv",backendName:"cpu",kernelFunc:Wm},Gm=Ad(((e,t)=>e-t)),Hm=Zd(((e,t,n,r)=>({real:e-n,imag:t-r}))),qm=Yd("Sub",Gm,Hm),jm={kernelName:"Sub",backendName:"cpu",kernelFunc:qm};function Km(e,t,n){const r=e.shape,s=r[0],a=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[s,a],c=Le.sizeFromShape(u),p=Le.getTypedArrayFromDType("float32",c),h=Le.getTypedArrayFromDType("float32",c);for(let e=0;e<s;e++){const r=_f({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=_f({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=Ud({inputs:{real:r,imag:s},backend:n}),{real:u,imag:c}=Xm(o,t,n),d=Ea.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=Ea.getComplexWithIndex(d,t);p[e*a+t]=n.real,h[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",h),m=Ud({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Xm(e,t,n){const r=Le.sizeFromShape(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const s=Ym(a,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",s.real),t=n.makeTensorInfo(i,"float32",s.imag),a=n.makeTensorInfo([],"float32",Le.createScalarValue(r,"float32")),o=Td({inputs:{x:a},backend:n}),l=Um.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Um.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:p}}return s}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,o=0;for(let r=0;r<t;r++){const i=Ea.exponent(s*r,t,n),l=Ea.getComplexWithIndex(e,r);a+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(a/=t,o/=t),Ea.assignToTypedArray(r,a,o,s)}return r}(Ea.mergeRealAndImagArrays(a,o),r,t);return Ea.splitRealAndImagArrays(e)}var i}function Ym(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=Ea.mergeRealAndImagArrays(e,t),o=n/2,i=Ea.complexWithEvenIndex(a),l=i.real,u=i.imag,c=[l.length],p=s.makeTensorInfo(c,"float32",l),h=s.makeTensorInfo(c,"float32",u),d=Ud({inputs:{real:p,imag:h},backend:s}),f=Ea.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=Ud({inputs:{real:b,imag:x},backend:s}),k=Ym(l,u,o,r,s),v=k.real,N=k.imag,S=[v.length],I=s.makeTensorInfo(S,"float32",v),T=s.makeTensorInfo(S,"float32",N),E=Ud({inputs:{real:I,imag:T},backend:s}),$=Ym(m,g,o,r,s),C=$.real,A=$.imag,D=[C.length],R=s.makeTensorInfo(D,"float32",C),F=s.makeTensorInfo(D,"float32",A),_=Ud({inputs:{real:R,imag:F},backend:s}),O=Ea.exponents(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=Ud({inputs:{real:L,imag:z},backend:s}),P=xm({inputs:{a:B,b:_},backend:s}),V=ef({inputs:{a:E,b:P},backend:s}),W=qm({inputs:{a:E,b:P},backend:s}),U=qd({inputs:{input:V},backend:s}),G=qd({inputs:{input:W},backend:s}),H=qf({inputs:{input:V},backend:s}),q=qf({inputs:{input:W},backend:s}),j=Kf({inputs:[U,G],backend:s,attrs:{axis:0}}),K=Kf({inputs:[H,q],backend:s,attrs:{axis:0}}),X=s.data.get(j.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(I),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Zm={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Le.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=nf({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=Km(o,!1,n),l=nf({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function Jm(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,o=a||Le.inferDtype(s),i=Le.getArrayFromDType(o,Le.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,s),t.makeTensorInfo(r,o,i)}const Qm={kernelName:"Fill",backendName:"cpu",kernelFunc:Jm};const eg={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=Le.getTypedArrayFromDType(r.dtype,Le.sizeFromShape(r.shape)),[o,i,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const r=e*u;for(let s=0;s<u;s++){const o=Math.round(l-e-1),i=t+n+r+s;let p=c[i];if(o>=0&&o<l){p=c[t+n+o*u+s]}a[i]=p}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},tg=zd((e=>Math.floor(e))),ng={kernelName:"Floor",backendName:"cpu",kernelFunc:Nd("Floor",tg)},rg={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Yd("FloorDiv",Ad(((e,t)=>Math.floor(e/t))),null,"int32")};const sg={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=Yf({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=ef({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Wd(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const ag={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=um({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=ef({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Wd(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function og(e,t,n,r,s,a,o,i,l){const u=Es([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const ig={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=Le.sizeFromShape(r.shape),o=s.shape,i=o[o.length-1],[l,u,c,p]=Ea.prepareAndValidate(r,s);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);const h=og(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,u,i,c,p,r.shape,a);return n.makeTensorInfo(l,r.dtype,h.values)}};function lg(e,t,n){const r=Es(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const l=e.locToIndex(s);0<=l&&l<e.values.length&&(r.values[n]=e.values[l])}return r}const ug={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r;kd([s,a],"gatherV2");const l=Le.parseAxisParam(o,s.shape)[0],u=n.data.get(a.dataId).values,c=s.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Le.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=Le.sizeFromShape(a.shape),d=Ea.segment_util.collectGatherOpShapeInfo(s,a,l,p),f=nf({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=nf({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=lg(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},cg=Ad(((e,t)=>e>t?1:0)),pg={kernelName:"Greater",backendName:"cpu",kernelFunc:Yd("Greater",cg,null,"bool")},hg=Ad(((e,t)=>e>=t?1:0)),dg={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Yd("GreaterEqual",hg,null,"bool")};const fg={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=Le.sizeFromShape(r.shape),a=r.shape[r.shape.length-1],o=nf({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),i=Km(o,!0,n),l=nf({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},mg={kernelName:"IsFinite",backendName:"cpu",kernelFunc:vd("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},gg={kernelName:"IsInf",backendName:"cpu",kernelFunc:vd("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},yg={kernelName:"IsNan",backendName:"cpu",kernelFunc:vd("IsNan",(e=>Number.isNaN(e)?1:0),"bool")},bg=Ad(((e,t)=>e<t?1:0)),xg={kernelName:"Less",backendName:"cpu",kernelFunc:Yd("Less",bg,null,"bool")},wg=Ad(((e,t)=>e<=t?1:0)),kg={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Yd("LessEqual",wg,null,"bool")};function vg(e,t,n){const r=(t-e)/(n-1),s=Le.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const Ng={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=vg(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},Sg=zd((e=>Math.log(e))),Ig={kernelName:"Log",backendName:"cpu",kernelFunc:Nd("Log",Sg)},Tg={kernelName:"Log1p",backendName:"cpu",kernelFunc:vd("Log1p",(e=>Math.log1p(e)))},Eg={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Yd("LogicalAnd",Ad(((e,t)=>e&&t)),null,"bool")},$g={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:vd("LogicalNot",(e=>e?0:1),"bool")},Cg={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Yd("LogicalOr",Ad(((e,t)=>e||t)),null,"bool")};const Ag={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r;kd(s,"LRN");const u=s.shape[3],c=u-1,p=n.data.get(s.dataId).values,h=Le.sizeFromShape(s.shape),d=new Float32Array(h);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-l);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const Dg={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r;kd(o,"LRNGrad");const p=Le.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=u*s+l;for(let t=n;t<r;t++){let n=-2*u*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function Rg(e,t,n,r){const s=Le.getTypedArrayFromDType(r,Le.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function Fg(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=n;let l=s.shape;const u=l.length,c=Le.parseAxisParam(a,l);let p=c;const h=Ea.getAxesPermutation(p,u);let d=i.data.get(s.dataId).values;if(null!=h){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[h[t]];d=df(d,l,s.dtype,h,e),p=Ea.getInnerMostAxes(p.length,u),l=e}kd(s,"max"),Ea.assertAxesAreInnerMostDims("max",p,u);const[f,m]=Ea.computeOutAndReduceShapes(l,p),g=Rg(d,Le.sizeFromShape(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=Ea.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const _g={kernelName:"Max",backendName:"cpu",kernelFunc:Fg},Og=Ad(((e,t)=>Math.max(e,t))),Mg={kernelName:"Maximum",backendName:"cpu",kernelFunc:Yd("Maximum",Og)};const Lg={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;kd(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Le.assert(Ea.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ea.computePool2DInfo(s.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Le.arraysEqual(u.inShape,u.outShape))c=Td({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=Le.computeStrides(s.shape),r=If(e,s.shape,s.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}};const zg={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;kd(s,"maxPool3d");const c=Ea.computePool3DInfo(s.shape,a,o,1,i,l,u),p=Ef(n.data.get(s.dataId).values,s.shape,s.dtype,Le.computeStrides(s.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const Bg={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;kd([s,a],"maxPool3DGrad");const c=Ea.computePool3DInfo(a.shape,o,i,1,l,u),p=function(e,t){const n=Es(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*s-d;let h=u;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+u);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const s=r-u;for(let a=v;a<N;a+=l){const o=a-d,i=e.get(m,t,r,a,g);i>=S&&(S=i,I=n*c*p+s*c+o)}}}n.set(I,m,y,r,s,g)}}}return n}(n.bufferSync(a),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=Es(a.shape,"float32"),I=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-k,o=r-N,i=s-v;let l=0;for(let n=0;n<b;n+=m){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(o+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<w;o+=y){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=b*x*w-1-p.get(e,r,a,u,t)===n*x*w+s*w+o?1:0;if(0===h)continue;l+=I.get(e,r,a,u,t)*h}}}S.set(l,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Pg={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;kd([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=Ea.computePool2DInfo(i.shape,l,u,1,c,p),d=n.data.get(i.dataId).values,f=Es(h.outShape,i.dtype,Tf(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=Es(i.shape,"float32"),S=n.data.get(s.dataId).values,I=Es(s.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=n-v,a=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const i=(a+s)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const l=x*w-1-f.get(e,r,i,t)===n*w+s?1:0;if(0===l)continue;o+=I.get(e,r,i,t)*l}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Vg={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;kd(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=Ea.computePool2DInfo(r.shape,s,a,[1,1],o),[p,h]=function(e,t,n,r,s){const a=If(e,0,n,Le.computeStrides(t),s,"max"),o=Tf(e,t,n,s,!0,r);return[a.values,o.values]}(u,r.shape,r.dtype,i,c),d=l.write(p,c.outShape,r.dtype),f=l.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Wg={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=Le.parseAxisParam(a,s.shape),l=Ea.computeOutAndReduceShapes(s.shape,i)[1],u=Le.sizeFromShape(l),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(p);const h=Kd({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=Wm({inputs:{a:h,b:p},backend:n});c.push(d);const f=km({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Ug={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;kd(s,"min");const i=Le.parseAxisParam(a,s.shape);let l=i;const u=Ea.getAxesPermutation(l,s.shape.length);let c=s;null!=u&&(c=ff({inputs:{x:s},backend:n,attrs:{perm:u}}),l=Ea.getInnerMostAxes(l.length,s.shape.length)),Ea.assertAxesAreInnerMostDims("min",l,c.shape.length);const[p,h]=Ea.computeOutAndReduceShapes(c.shape,l),d=Le.sizeFromShape(h),f=Le.makeZerosTypedArray(Le.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=nf({inputs:{x:g},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Gg=Ad(((e,t)=>Math.min(e,t))),Hg={kernelName:"Minimum",backendName:"cpu",kernelFunc:Yd("Minimum",Gg)};const qg={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:o}=r;kd(s,"mirrorPad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===o?0:1,p=n.data.get(s.dataId).values,h=s.shape.length,d=Le.computeStrides(s.shape),f=Le.sizeFromShape(i),m=i.length,g=Le.computeStrides(i),y=Le.getTypedArrayFromDType(s.dtype,f);for(let e=0;e<f;e++){let t=Le.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Le.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},jg={kernelName:"Mod",backendName:"cpu",kernelFunc:Yd("Mod",Ad(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function Kg(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=s.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=Le.parseAxisParam([i],s.shape),u=Fg({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Ea.expandShapeToKeepDim(u.shape,l),p=nf({inputs:{x:u},backend:n,attrs:{shape:c}}),h=qm({inputs:{a:s,b:p},backend:n}),d=Mm({inputs:{x:h},backend:n}),f=km({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=nf({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Wm({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Xg={kernelName:"Softmax",backendName:"cpu",kernelFunc:Kg};const Yg={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r;kd(s,"multinomial");const l=i?s:Kg({inputs:{logits:s},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=n.data.get(l.dataId).values,h=[u,a],d=Le.makeZerosTypedArray(Le.sizeFromShape(h),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=Mc.alea(o.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(h,"int32",d)}};function Zg(e,t,n){const r=Le.createScalarValue(-1,n);return ym([],t,r,e,n)}const Jg={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;kd(r,"neg");const s=n.data.get(r.dataId).values,[a,o]=Zg(s,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,a)}},Qg=Ai.nonMaxSuppressionV3Impl;const ey={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r;kd(s,"NonMaxSuppression");const u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:p}=Qg(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},ty=Ai.nonMaxSuppressionV4Impl;const ny={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r;kd(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:d}=ty(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},ry=Ai.nonMaxSuppressionV5Impl;const sy={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r;kd(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,p=n.data.get(a.dataId).values,h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=ry(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},ay=Ad(((e,t)=>e!==t?1:0)),oy={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Yd("NotEqual",ay,null,"bool")};const iy={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:o,offValue:i}=r;kd(s,"oneHot");const l=Le.sizeFromShape(s.shape),u=new Float32Array(l*a);u.fill(i);const c=n.data.get(s.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=o);return n.makeTensorInfo([...s.shape,a],"int32",u)}};function ly(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=qd({inputs:{input:r},backend:n}),t=ly({inputs:{x:e},backend:n}),s=qf({inputs:{input:r},backend:n}),a=ly({inputs:{x:s},backend:n}),o=Ud({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return Jm({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const uy={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:ly};const cy={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=qd({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=qf({inputs:{input:s},backend:r}),o=ly({inputs:{x:a},backend:r}),i=Ud({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return Jm({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function py(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return zm({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Le.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Le.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=Kf({inputs:t.map((e=>{const t=zm({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const hy={kernelName:"Pack",backendName:"cpu",kernelFunc:py};const dy={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;kd(s,"pad");const i=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(s.dataId).values,c=Le.sizeFromShape(s.shape),p=s.shape.length,h=Le.computeStrides(s.shape),d=Le.sizeFromShape(i),f=i.length,m=Le.computeStrides(i),g=Le.getTypedArrayFromDType(s.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=Le.indexToLoc(e,p,h).map(((e,t)=>e+l[t]));g[Le.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},fy={kernelName:"Pow",backendName:"cpu",kernelFunc:Yd("Pow",Ad(((e,t)=>Math.pow(e,t))))};function my(e,t,n,r){const[s,a]=Ea.computeOutAndReduceShapes(e,r),o=tn(t,"int32"),i=Le.makeZerosTypedArray(Le.sizeFromShape(s),o),l=Le.sizeFromShape(a);for(let e=0;e<i.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}const gy={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;kd(s,"prod");const i=s.shape.length,l=Le.parseAxisParam(a,s.shape),u=Ea.getAxesPermutation(l,i);let c=l,p=s;const h=[];null!=u&&(p=ff({inputs:{x:s},backend:n,attrs:{perm:u}}),h.push(p),c=Ea.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=my(p.shape,p.dtype,d,c);let y=m;return o&&(y=Ea.expandShapeToKeepDim(m,l)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function yy(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Le.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=Le.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const by={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:o}=n,i=yy(r,s,o,a);return t.makeTensorInfo([i.length],a,i)}},xy={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:vd("Reciprocal",(e=>1/e))};const wy={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;kd(s,"resizeBilinear");const l=Le.computeStrides(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(Le.sizeFromShape([p,u,c,f])),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(h-1,Math.ceil(n)),i=e*l[0]+r*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=i+n*l[2],p=u+n*l[2],h=i+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],a=t+(m[h+e]-t)*r,o=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=o}}}return n.makeTensorInfo([p,u,c,f],"float32",g)}};const ky={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;kd([a,s],"resizeBilinearGrad");const i=Le.computeStrides(s.shape),[l,u,c,p]=s.shape,[,h,d]=a.shape,f=new Float32Array(l*u*c*p),m=[o&&h>1?u-1:u,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),u-1),a=t+r*i[1],o=t+s*i[1],l=n-r,h=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,u=1-s,d=a+n*i[2],m=a+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*u,v=h*s,N=l*u,S=l*s;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,p],"float32",f)}};const vy={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r;kd(s,"resizeNearestNeighbor");const l=Le.computeStrides(s.shape),[u,c]=i,[p,h,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(p*u*c*f),y=[a&&u>1?h-1:h,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,a?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=t+r*l[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*l[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,u,c,f],s.dtype,g)}};const Ny={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r;kd([a,s],"resizeNearestNeighborGrad");const i=Le.computeStrides(s.shape),l=Le.computeStrides(a.shape),[u,c,p,h]=s.shape,[,d,f]=a.shape,m=new Float32Array(u*c*p*h),g=n.data.get(a.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),s=Math.floor(r-N/2);for(let r=0;r<p;r++){const a=n+r*i[2],u=Math.floor(r*v),y=Math.floor(u-S/2);for(let n=0;n<h;n++){let i=0;for(let a=0;a<N;a++){const u=a+s;if(u<0||u>=d)continue;const h=t+u*l[1],m=u*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const s=h+t*l[2],a=t*w;r===Math.min(p-1,o?Math.round(a):Math.floor(a))&&(i+=g[s+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const Sy={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;kd(s,"reverse");const o=s.shape.length,i=Le.parseAxisParam(a,s.shape);if(0===o)return Td({inputs:{x:s},backend:n});const l=new Lt(s.shape,s.dtype),u=n.bufferSync(s);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=s.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Iy={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=Le.getTypedArrayFromDType(r.dtype,Le.sizeFromShape(r.shape)),[u,c,p,h]=r.shape,[d,f]=Ea.getImageCenter(o,c,p),m=Math.sin(s),g=Math.cos(s),y=i.data.get(r.dataId).values;for(let e=0;e<u;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const s=r*h;for(let o=0;o<h;o++){const i=[u,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===o?255:a[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}l[t+n+s+o]=v}}}}return{dataId:i.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Ty={kernelName:"Round",backendName:"cpu",kernelFunc:vd("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))},Ey=zd((e=>1/Math.sqrt(e))),$y={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:Nd("Rsqrt",Ey)};function Cy(e,t,n,r,s,a,o,i,l,u){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return Es(n,t.dtype);const d=Es(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),l+=n*i[t]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=h[e*s+n]:d.values[l*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}const Ay={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=Ea.calculateShapes(a,s,o),h=Cy(n.bufferSync(s),n.bufferSync(a),o,p,u,l,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};const Dy={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;kd([r,s,a],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=tn(s.dtype,a.dtype),p=Le.makeZerosTypedArray(Le.sizeFromShape(s.shape),c);let h=0;const d=0===o||o>1||1===s.shape.length?1:Le.sizeFromShape(s.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=l[e]:p[h++]=u[e];return n.makeTensorInfo(s.shape,c,p)}},Ry=Ea.SELU_SCALEALPHA,Fy=Ea.SELU_SCALE,_y={kernelName:"Selu",backendName:"cpu",kernelFunc:vd("Selu",(e=>e>=0?Fy*e:Ry*(Math.exp(e)-1)))},Oy={kernelName:"Sign",backendName:"cpu",kernelFunc:vd("Sign",(e=>e<0?-1:e>0?1:0))},My={kernelName:"Sin",backendName:"cpu",kernelFunc:vd("Sin",(e=>Math.sin(e)))},Ly={kernelName:"Sinh",backendName:"cpu",kernelFunc:vd("Sinh",(e=>Math.sinh(e)))},zy=Math.log(1.1920928955078125e-7)+2,By={kernelName:"Softplus",backendName:"cpu",kernelFunc:vd("Softplus",(e=>{const t=e>-zy,n=e<zy,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s}))};const Py={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;kd([s],"spaceToBatchND");const i=Le.sizeFromShape(a),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=dy.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=Ea.getReshaped(u.shape,a,i,!1),p=Ea.getPermuted(c.length,a.length,!1),h=Ea.getReshapedPermuted(u.shape,a,i,!1),d=nf({inputs:{x:u},backend:n,attrs:{shape:c}}),f=ff({inputs:{x:d},backend:n,attrs:{perm:p}}),m=nf({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function Vy(e,t,n,r,s,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),p=t[1];if(0===l){if(0!==i)throw new Error(Ea.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[Le.getArrayFromDType(n,0),[0,p],Le.getArrayFromDType(s,0),u,c]}let h=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(Ea.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(Ea.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,u,c]}{const t=f[l-1],a=Le.getArrayFromDType(n,t*p),h=Le.getArrayFromDType(s,t),d=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}}return[a,[t,p],h,u,c]}}const Wy={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=Vy(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function Uy(e,t,n,r,s){const a=Le.sizeFromShape(r),o=t[0],i=s.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(Ea.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Ea.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(Ea.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Ea.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[c]=e}if(Le.sizeFromShape(l)!==a)throw new Error(Ea.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Le.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],l]}const Gy={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(r.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,p]=Uy(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};function Hy(e,t,n,r,s,a=!1,o=0){const i=r.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error(Ea.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=Le.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(Ea.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<i){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(Ea.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Ea.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*u,y*u);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=l[0])throw new Error(Ea.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*u,c*u),[d,p]}const qy={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=Hy(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const jy={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[u,c]=Hy(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const Ky={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=Ea.calculateShapes(a,s,i),d=Cy(n.bufferSync(s),n.bufferSync(a),i,h,c,u,l,p,n.data.get(o.dataId).values[0],!1);return n.makeTensorInfo(i,d.dtype,d.values)}};const Xy={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Le.parseAxisParam(o,s.shape)[0],l=Ea.prepareSplitSize(s,a,i),u=new Array(s.shape.length).fill(0),c=s.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const r=_f({inputs:{x:s},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,r}))}},Yy=zd((e=>Math.sqrt(e))),Zy={kernelName:"Sqrt",backendName:"cpu",kernelFunc:vd("Sqrt",(e=>Math.sqrt(e)))},Jy={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;kd(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Qy=Ad(((e,t)=>{const n=e-t;return n*n})),eb={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Yd("SquaredDifference",Qy)},tb={kernelName:"Step",backendName:"cpu",kernelFunc:vd("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};function nb(e,t,n,r){const s=Es(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}const rb={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;kd(s,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=aa.sliceInfo(s.shape,a,o,i,l,u,c,p,h);let k;if(m)k=nf({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Le.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=aa.computeOutShape(b,x,w),t=_f({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=nf({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=nb(d,n.bufferSync(s),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class sb{constructor(e,t,n,r,s,a){this.separator=Le.encodeString(e),this.nGramWidths=t,this.leftPad=Le.encodeString(n),this.rightPad=Le.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),l=Math.max(0,i-o),u=Math.max(0,i-(s-(o+1))),c=a-(l+u),p=t+(l>0?0:o-i);let h=0;h+=l*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=u*this.rightPad.length;h+=(l+u+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=Le.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,l,a),s+=l})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,l=1;this.createNGrams(e,r,o,s,l,i)}}return[o,a]}}function ab(e,t,n,r,s,a,o,i){return new sb(n,r,s,a,o,i).compute(e,t)}const ob={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=ab(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function ib(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function lb(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let l=0;l<r;++l){const r=s.length;ib(e[l],t,n,s);const u=s.length-r;i[l]=u,a+=u,o=Math.max(o,u)}const l=Le.getArrayFromDType("int32",2*a),u=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=s[p],++p;return[l,u,c]}const ub={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,p]=lb(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function cb(e,t){const n=Le.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Le.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const pb={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=cb(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",o)}},hb={kernelName:"Tan",backendName:"cpu",kernelFunc:vd("Tan",(e=>Math.tan(e)))},db=vd("Tanh",(e=>Math.tanh(e)));function fb(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Es(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const mb=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function gb(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);gb(e,t,Math.max(n,Math.floor(t-a*i/s+l)),Math.min(r,Math.floor(t+(s-a)*i/s+l)))}const s=e[t];let a=n,o=r;for(Le.swap(e,n,t),mb(e[r],s)>0&&Le.swap(e,n,r);a<o;){for(Le.swap(e,a,o),a++,o--;mb(e[a],s)<0;)a+=1;for(;mb(e[o],s)>0;)o-=1}0===mb(e[n],s)?Le.swap(e,n,o):(o+=1,Le.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function yb(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],l=Le.getTypedArrayFromDType(n,o*r),u=Le.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(gb(o,r),o=o.slice(0,r)),s&&o.sort(mb);const c=t*r,p=l.subarray(c,c+r),h=u.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[Es(c,n,l),Es(c,"int32",u)]}const bb={kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=[c,f,m,d],y=Le.computeStrides(s.shape),b=y[0],x=y[1],w=y[2],k=Le.getTypedArrayFromDType(s.dtype,Le.sizeFromShape(g));k.fill(l);const v=r.data.get(s.dataId).values,N=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?N:N.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const u=t[6]*r+t[7]*n+1;if(0===u)continue;const c=(t[0]*r+t[1]*n+t[2])/u,d=(t[3]*r+t[4]*n+t[5])/u,f=xb(c,h,i),m=xb(d,p,i);switch(o){case"nearest":a=kb(v,p,h,b,x,w,e,m,f,s,l);break;case"bilinear":a=vb(v,p,h,b,x,w,e,m,f,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}k[e*b+n*x+r*w+s]=a}return r.makeTensorInfo(g,s.dtype,k)}return{dataId:r.write(k,g,s.dtype),shape:s.shape,dtype:s.dtype}}};function xb(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Le.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Le.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Le.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function wb(e,t,n,r,s,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*r+i*s+l*a+u]:c}function kb(e,t,n,r,s,a,o,i,l,u,c){return wb(e,t,n,r,s,a,o,Math.round(i),Math.round(l),u,c)}function vb(e,t,n,r,s,a,o,i,l,u,c){const p=Math.floor(i),h=Math.floor(l),d=p+1,f=h+1;return(d-i)*((f-l)*wb(e,t,n,r,s,a,o,p,h,u,c)+(l-h)*wb(e,t,n,r,s,a,o,p,f,u,c))+(i-p)*((f-l)*wb(e,t,n,r,s,a,o,d,h,u,c)+(l-h)*wb(e,t,n,r,s,a,o,d,f,u,c))}function Nb(e,t,n,r){const s=Le.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[s]),l=new Lt(a,r,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,u.push(t)}}const p=a.slice();p[1]=Object.keys(o).length;const h=new Lt(p,r);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(l.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const Sb=[of,uf,cf,pf,tf,hf,gf,yf,bf,xf,wf,kf,vf,Nf,Sf,$f,Cf,Af,Df,af,Rf,Mf,Bf,Pf,Xd,Wf,Uf,Gd,Gf,Xf,Zf,Jf,Qf,em,tm,nm,rm,sm,am,om,im,lm,cm,pm,hm,dm,fm,mm,gm,Nm,Id,Sm,Em,_m,Lm,Bm,Vm,Zm,Qm,eg,ng,rg,sg,ag,ig,ug,pg,dg,Ed,fg,jf,mg,gg,yg,Cd,xg,kg,Ng,Ig,Tg,Eg,$g,Cg,Ag,Dg,_g,Mg,Lg,zg,Bg,Pg,Vg,Wg,Ug,Hg,qg,jg,Yg,wm,Jg,ey,ny,sy,oy,iy,cy,hy,dy,fy,Fd,gy,by,jd,Um,xy,Od,Ld,rf,wy,ky,vy,Ny,Sy,Iy,Ty,$y,Ay,Dy,_y,Vd,Oy,My,Ly,Of,Xg,By,Py,Wy,Gy,qy,jy,Ky,Xy,Zy,Jy,eb,tb,rb,ob,ub,pb,jm,vm,hb,{kernelName:"Tanh",backendName:"cpu",kernelFunc:db},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;kd(s,"tile");const o=fb(n.bufferSync(s),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r;kd(s,"topk");const i=n.data.get(s.dataId).values,[l,u]=yb(i,s.shape,s.dtype,a,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},bb,mf,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;kd(a,"unique");const o=r.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=Nb(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s.shape.length,i=s.shape[a],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==a&&(l[u++]=s.shape[e]);const c=new Array(o).fill(0),p=s.shape.slice();p[a]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[a]=e;const t=_f({inputs:{x:s},backend:n,attrs:{begin:c,size:p}});h[e]=nf({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r;kd(s,"unsortedSegmentSum");const i=[],l=[],u=s.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=zm({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=Le.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=Tm({inputs:{a:r,b:c},backend:n}),o=Kd({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=xm({inputs:{a:o,b:s},backend:n}),p=km({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),l.push(r),l.push(a),l.push(o),l.push(u),l.push(p)}const p=py({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},uy];for(const e of Sb)_e(e);const Ib=Ai.whereImpl;class Tb extends i{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o(this,Vi())}nextDataId(){return Tb.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,oe().get("IS_NODE")&&Ea.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Le.isString(n[0])){const s=n.map((e=>Le.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Ea.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Le.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Es(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return Vi().makeTensorFromDataId(r,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Le.now();e();return{kernelMs:Le.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){kd([e],"where");const t=this.readSync(e.dataId);return Ib(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}Tb.nextDataId=0;function Eb(){let e,t,n,r,s,a,o,i,l,u;return 2===oe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function $b(e,t,n="index"){const r=Le.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function Cb(e,t,n="index"){const r=Le.computeStrides(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function Ab(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${r[s]}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}function Db(e){const t=Le.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}qi("cpu",(()=>new Tb),1);const Rb="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Fb}=Ea;function _b(e,t,n){const r=[];if(e.forEach((e=>{const t=Le.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Hb(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?Mb(e,r):Ob(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=Fb(e.shapeInfo.logicalShape,t.logicalShape),l=Gb(o),u=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Le.sizeFromShape(e.shapeInfo.logicalShape),m=1===Le.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&Le.arraysEqual(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Gb(l),c=Fb(e.shapeInfo.logicalShape,t.logicalShape),p=l-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=Eb(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Lb}\n    ${zb}\n    ${Bb}\n  `}(i);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return Vb();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Le.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return Vb();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Le.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Cb(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=$b(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Cb(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=$b(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=$b(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=$b(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=Pb);return[p,l,c,s,u,a,n.userCode].join("\n")}function Ob(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=Wb(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${Ub(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=Wb(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Le.arraysEqual(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=Le.squeezeShape(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${Ob(qb(e,l),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${jb(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Ub(e)}\n      }\n    `;const u=a[0],c=a[1],p=Wb(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=Le.squeezeShape(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${Ob(qb(e,u),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${jb(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${Ub(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=Wb(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${a} + col * ${o} + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:l,keptDims:u}=Le.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Ob(qb(e,l),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${jb(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${Ub(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=Wb(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=Le.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Ob(qb(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${jb(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${Ub(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Wb(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=Le.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Ob(qb(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${jb(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Ub(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Wb(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Mb(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=Eb();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=Eb();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],l=Eb();if(null!=a&&Le.arraysEqual(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${Mb(qb(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${jb(a,r)});\n        }\n      `}const i=Eb();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=Eb();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Lb="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",zb="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Bb="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Pb="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Vb(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Wb(e){return`offset${e}`}function Ub(e){const t=e.name,n=Le.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Gb(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Hb(e,t,n){const{newShape:r,keptDims:s}=Le.squeezeShape(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,l=!e&&a>1&&!Le.arraysEqual(t,n)&&r.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:s}}function qb(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function jb(e,t){return t.map((t=>e[t])).join(", ")}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Kb={},Xb={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Yb(e,t){if(!(e in Kb)){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete Kb[e]}),!1),1===e?n.getContext("webgl",Xb)||n.getContext("experimental-webgl",Xb):n.getContext("webgl2",Xb)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;Kb[e]=n}const n=Kb[e];return null==n||n.isContextLost()?(delete Kb[e],Yb(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),Kb[e])}var Zb,Jb,Qb;function ex(e,t){return[t,e]}function tx(e){const t=Le.sizeFromShape(e),n=Math.ceil(t/4);return Le.sizeToSquarishShape(n)}function nx(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function rx(e,t){const n=e;let r,s,a,o,i,l,u,c,p,h;return 2===oe().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function sx(e,t){const n=t();return oe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Zb||(Zb={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(Jb||(Jb={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Qb||(Qb={}));function ax(e){return!!(oe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function ox(e,t){return mx(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function ix(e,t){const n=mx(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(sx(e,(()=>e.shaderSource(n,t))),sx(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=lx.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>Le.rightPad((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,r-1),u=o.slice(r-1,r),c=o.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Le.rightPad(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const lx=/ERROR: [0-9]+:([0-9]+):/g;function ux(e,t){if(sx(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function cx(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(sx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),sx(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),sx(e,(()=>e.enableVertexAttribArray(i))),!0)}function px(e,t,n,r){sx(e,(()=>function(e,t,n){gx(e,n),sx(e,(()=>e.activeTexture(e.TEXTURE0+n))),sx(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),sx(e,(()=>e.uniform1i(n,r)))}function hx(e,t,n){sx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),sx(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function dx(e,t){sx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),sx(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function fx(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function mx(e,t,n){const r=sx(e,(()=>t()));if(null==r)throw new Error(n);return r}function gx(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function yx(e,t=2){return Le.sizeFromShape(e.slice(0,e.length-t))}function bx(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function xx(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[yx(e),...bx(e)]),t}function wx(e){return e%2==0}function kx(e,t){if(e=e.slice(-2),t=t.slice(-2),Le.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(wx(n)&&wx(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&wx(e[0])&&wx(t[0])}let vx,Nx;function Sx(e,t){return null!=e.getExtension(t)}function Ix(e){try{if(null!=Yb(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Tx(e){if(0===e)return!1;const t=Yb(e);if(1!==e){if(Sx(t,"EXT_color_buffer_float"))return Ex(t);const e="EXT_color_buffer_half_float";if(Sx(t,e)){const n=t.getExtension(e);return function(e,t){const n=rx(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!Sx(t,"OES_texture_float"))return!1;if(!Sx(t,"WEBGL_color_buffer_float"))return!1;return Ex(t)}function Ex(e){const t=rx(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function $x(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Le.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function Cx(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!Le.arraysEqual(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!Le.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function Ax(e){return oe().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Dx{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ea.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Ax(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function Rx(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Fx(e,t){return 1===t?[e]:Rx(e,t)}class _x{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ea.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=Ax(s);let a="";if(r)if(0===s||1===Le.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Gb(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Fx("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Ox(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Mx={kernelName:"Identity",backendName:"webgl",kernelFunc:Ox};function Lx(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=Ox({inputs:{x:r},backend:n}),l=Ox({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:l},a}const zx={kernelName:"Complex",backendName:"webgl",kernelFunc:Lx},Bx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Px={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,o=n.makeTensorInfo([],"float32",Le.createScalarValue(a,"float32")),i=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _x(Bx,s.shape,o.shape):new Dx("return (a < 0.) ? b * a : a;",s.shape,o.shape),l=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},Vx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Wx={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _x(Vx,r.shape,s.shape):new Dx("return (a < 0.) ? b * a : a;",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};class Ux{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Gx{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function Hx({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,l=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Gx(o.shape,t):new Ux(o.shape,e),i.runWebGLProgram(u,[o],l)}}function qx({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},o=new Dx(e,l.shape,u.shape);return c.runWebGLProgram(o,[s,a],tn(n.dtype,r.dtype))})),a=Lx({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||tn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=s){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Ea.fromUint8ToStringArray(e):e,r="string"===l.dtype?Ea.fromUint8ToStringArray(t):t,[a,o]=s(l.shape,u.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new _x(t,l.shape,u.shape,n):new Dx(e,l.shape,u.shape),c.runWebGLProgram(h,[l,u],p)}}function jx(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?Vx:"return (a < 0.) ? b * a : a;";if("leakyrelu"===e)return t?Bx:"return (a < 0.) ? b * a : a;";if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Kx{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Ax(this.outputShape.length);const u=r?e[1]:e[2],c=Math.ceil(u/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const Xx="return areal * breal - aimag * bimag;",Yx="return areal * bimag + aimag * breal;";class Zx{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ea.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var Jx={};t(Jx,"simpleAbsImpl",(()=>lf)),t(Jx,"addImpl",(()=>Jd)),t(Jx,"bincountImpl",(()=>Lf)),t(Jx,"bincountReduceImpl",(()=>zf)),t(Jx,"ceilImpl",(()=>Vf)),t(Jx,"concatImpl",(()=>Hf)),t(Jx,"equalImpl",(()=>Im)),t(Jx,"expImpl",(()=>Om)),t(Jx,"expm1Impl",(()=>Pm)),t(Jx,"floorImpl",(()=>tg)),t(Jx,"gatherNdImpl",(()=>og)),t(Jx,"gatherV2Impl",(()=>lg)),t(Jx,"greaterImpl",(()=>cg)),t(Jx,"greaterEqualImpl",(()=>hg)),t(Jx,"lessImpl",(()=>bg)),t(Jx,"lessEqualImpl",(()=>wg)),t(Jx,"linSpaceImpl",(()=>vg)),t(Jx,"logImpl",(()=>Sg)),t(Jx,"maxImpl",(()=>Rg)),t(Jx,"maximumImpl",(()=>Og)),t(Jx,"minimumImpl",(()=>Gg)),t(Jx,"multiplyImpl",(()=>ym)),t(Jx,"negImpl",(()=>Zg)),t(Jx,"notEqualImpl",(()=>ay)),t(Jx,"prodImpl",(()=>my)),t(Jx,"rangeImpl",(()=>yy)),t(Jx,"rsqrtImpl",(()=>Ey)),t(Jx,"sigmoidImpl",(()=>Bd)),t(Jx,"sliceImpl",(()=>Ff)),t(Jx,"sparseFillEmptyRowsImpl",(()=>Vy)),t(Jx,"sparseReshapeImpl",(()=>Uy)),t(Jx,"sparseSegmentReductionImpl",(()=>Hy)),t(Jx,"sqrtImpl",(()=>Yy)),t(Jx,"squaredDifferenceImpl",(()=>Qy)),t(Jx,"stridedSliceImpl",(()=>nb)),t(Jx,"stringNGramsImpl",(()=>ab)),t(Jx,"stringSplitImpl",(()=>lb)),t(Jx,"stringToHashBucketFastImpl",(()=>cb)),t(Jx,"subImpl",(()=>Gm)),t(Jx,"tileImpl",(()=>fb)),t(Jx,"topKImpl",(()=>yb)),t(Jx,"transposeImpl",(()=>df)),t(Jx,"uniqueImpl",(()=>Nb));const{addImpl:Qx,bincountImpl:ew,bincountReduceImpl:tw,ceilImpl:nw,concatImpl:rw,equalImpl:sw,expImpl:aw,expm1Impl:ow,floorImpl:iw,gatherNdImpl:lw,gatherV2Impl:uw,greaterImpl:cw,greaterEqualImpl:pw,lessImpl:hw,lessEqualImpl:dw,linSpaceImpl:fw,logImpl:mw,maxImpl:gw,maximumImpl:yw,minimumImpl:bw,multiplyImpl:xw,negImpl:ww,notEqualImpl:kw,prodImpl:vw,rangeImpl:Nw,rsqrtImpl:Sw,sigmoidImpl:Iw,simpleAbsImpl:Tw,sliceImpl:Ew,sparseFillEmptyRowsImpl:$w,sparseReshapeImpl:Cw,sparseSegmentReductionImpl:Aw,sqrtImpl:Dw,stridedSliceImpl:Rw,stringNGramsImpl:Fw,stringSplitImpl:_w,stringToHashBucketFastImpl:Ow,subImpl:Mw,tileImpl:Lw,topKImpl:zw,transposeImpl:Bw,uniqueImpl:Pw}=Jx;function Vw(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=Ea.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new Zx(Xx,r.shape,s.shape),o=new Zx(Yx,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(a,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=Lx({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=xw(r.shape,s.shape,e.values,t.values,a),l=n.makeTensorInfo(i,a);return n.texData.get(l.dataId).values=o,l}let o;return o=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _x("return a * b;",r.shape,s.shape):new Dx("return a * b;",r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const Ww={kernelName:"Multiply",backendName:"webgl",kernelFunc:Vw};class Uw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?Ab(["r","c","d"],"inputShape"):$b(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Db(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function Gw(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=Le.sizeFromShape(s.shape),l=Le.inferFromImplicitShape(a,i),u=Le.sizeFromShape(l);Le.assert(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||kx(s.shape,l)||null!==c.texture&&kx(c.shape,l)?(o.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(e,t,n){const r=[yx(e.shape),...bx(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[yx(t),...bx(t)],o=new Uw(a,r),i=[r],l=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(s,l,o)}const Hw={kernelName:"Reshape",backendName:"webgl",kernelFunc:Gw};class qw{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Le.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";s%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class jw{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${l});\n      }\n    `}}function Kw(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Ea.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:l,outSize:u}=s[o];let c,p;c="mean"===n?0===o?new qw({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new qw({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new jw({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}class Xw{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=Gb(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class Yw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Gb(this.rank),s=Rx("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Zw(e,t,n){const r=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Yw(e.shape,t):new Xw(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function Jw(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return function(e,t,n,r){const s=t,a=e.shape.length,o=Le.parseAxisParam(s,e.shape);let i=o;const l=Ea.getAxesPermutation(i,a),u=null!=l;let c=e;u&&(c=Zw(e,l,r),i=Ea.getInnerMostAxes(i.length,a)),Ea.assertAxesAreInnerMostDims("sum",i,a);const[p,h]=Ea.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=Ea.expandShapeToKeepDim(p,o));const f=Le.sizeFromShape(h),m=Gw({inputs:{x:c},attrs:{shape:[Le.sizeFromShape(e.shape)/f,f]},backend:r}),g=Kw(m,nn(e.dtype),"sum",r),y=Gw({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),u&&r.disposeIntermediateTensorInfo(c),y}(s,a,o,n)}const Qw={kernelName:"Sum",backendName:"webgl",kernelFunc:Jw};function ek(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=s.shape[a[e]];let u;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=Bw(e,s.shape,s.dtype,a,l);u=o.makeTensorInfo(l,s.dtype);o.texData.get(u.dataId).values=t}else u=Zw(s,a,o);return u}const tk={kernelName:"Transpose",backendName:"webgl",kernelFunc:ek};function nk({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Le.sizeFromShape(m),b=Le.sizeFromShape(g),x=Ks.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Le.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=Gw({inputs:{x:e},backend:s,attrs:{shape:w}}),N=Gw({inputs:{x:t},backend:s,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=a,$=null!=o,C="leakyrelu"===l,A=null!=l?jx(l,!0):null;let D;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=ek({inputs:{x:v},backend:s,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=ek({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let o=e;1!==f&&(o=Gw({inputs:{x:e},backend:s,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let l=t;a&&(l=Gw({inputs:{x:t},backend:s,attrs:{shape:[I,1,T]}}),S.push(l));const u=Vw({inputs:{a:o,b:l},backend:s});D=Jw({inputs:{x:u},backend:s,attrs:{axis:i,keepDims:!0}}),S.push(u)}else{const l=tn(e.dtype,t.dtype),u=new Kx(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=a&&c.push(a),$&&c.push(o),C){const e=s.makeTensorInfo([],"float32",Le.createScalarValue(i,"float32"));c.push(e),S.push(e)}D=s.runWebGLProgram(u,c,l)}const R=Gw({inputs:{x:D},backend:s,attrs:{shape:x}});S.push(D);for(const e of S)s.disposeIntermediateTensorInfo(e);return R}const rk={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;return nk({a:s,b:a,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}};const sk={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=Tw(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Gx(r.shape,"return abs(x);"):new Ux(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},ak={kernelName:"Acos",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},ok={kernelName:"Acosh",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},ik={kernelName:"Add",backendName:"webgl",kernelFunc:qx({opSnippet:"return a + b;",packedOpSnippet:"return a + b;",supportsComplex:!0,cpuKernelImpl:Qx})};class lk{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class uk{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const ck={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return Ox({inputs:{x:s[0]},backend:r});if(s.length>oe().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>tn(e,t))),o=s.map((e=>e.shape)),i=oe().getBool("WEBGL_PACK")?new uk(s[0].shape,o):new lk(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};const pk={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Le.parseAxisParam(a,s.shape);let u=l;const c=Ea.getAxesPermutation(u,i);let p=s;null!=c&&(p=ek({inputs:{x:s},backend:n,attrs:{perm:c}}),u=Ea.getInnerMostAxes(u.length,i)),Ea.assertAxesAreInnerMostDims("all",u,i);const[h,d]=Ea.computeOutAndReduceShapes(p.shape,u),f=Gw({inputs:{x:p},backend:n,attrs:{shape:[-1,Le.sizeFromShape(d)]}}),m=Kw(f,f.dtype,"all",n);let g;if(o){g=Gw({inputs:{x:m},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(h,l)}})}else g=Gw({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const hk={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Le.parseAxisParam(a,s.shape);let u=l;const c=Ea.getAxesPermutation(u,i);let p=s;null!=c&&(p=ek({inputs:{x:s},backend:n,attrs:{perm:c}}),u=Ea.getInnerMostAxes(u.length,i)),Ea.assertAxesAreInnerMostDims("any",u,i);const[h,d]=Ea.computeOutAndReduceShapes(p.shape,u),f=Gw({inputs:{x:p},backend:n,attrs:{shape:[-1,Le.sizeFromShape(d)]}}),m=Kw(f,f.dtype,"any",n);let g;if(o){g=Gw({inputs:{x:m},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(h,l)}})}else g=Gw({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class dk{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class fk{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Le.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=Gb(i),u=Fx("coords",i);let c,p;if(1===a){p=i+1;const e=Gb(p);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else p=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=Fx("sourceLocR",p-1).concat("inIdx.r"),g=Fx("sourceLocG",p-1).concat("inIdx.g"),y=Fx("sourceLocB",p-1).concat("inIdx.b"),b=Fx("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function mk(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const o=Ea.computeOptimalWindowSize(a),i={windowSize:o,inSize:a,batchSize:s,outSize:Math.ceil(a/o)},l=new dk(i,n,null==r),u=[t];null!=r&&u.push(r);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const p=mk(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function gk(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=s[s.length-1],o=Ea.computeOptimalWindowSize(a),i=new fk(s,o,n,null==r),l=null==r?[t]:[t,r],u=e.runWebGLProgram(i,l,"int32");if(u.shape.length===t.shape.length){const r=gk(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function yk(e,t,n,r){const s=[n];if(Ea.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!oe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=Ea.computeOutAndReduceShapes(o.shape,s),u=Le.sizeFromShape(l),c=Gw({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const p=mk(e,c,r);n.push(p);const h=Gw({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return gk(e,t,r)}const bk={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Le.parseAxisParam(a,s.shape);const i=Ea.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=ek({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=Ea.getInnerMostAxes(o.length,l.shape.length)),Ea.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const c=yk(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const xk={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let o=Le.parseAxisParam(a,s.shape);const i=Ea.getAxesPermutation(o,s.shape.length);let l=s;const u=[];null!=i&&(l=ek({inputs:{x:s},backend:n,attrs:{perm:i}}),u.push(l),o=Ea.getInnerMostAxes(o.length,l.shape.length)),Ea.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const c=yk(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},wk={kernelName:"Asin",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},kk={kernelName:"Asinh",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},vk={kernelName:"Atan",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},Nk={kernelName:"Atan2",backendName:"webgl",kernelFunc:qx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},Sk={kernelName:"Atanh",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class Ik{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Tk{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const Ek={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;$x(s,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Le.assert(Ea.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ea.computePool2DInfo(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Le.arraysEqual(u.inShape,u.outShape))return Ox({inputs:{x:s},backend:n});const c=new Ik(u,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const $k={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r,c=Ea.computePool3DInfo(s.shape,a,o,[1,1,1],i,l,u),p=new Tk(c,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class Ck{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ak{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Dk={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=Ea.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new Ak(p);return n.runWebGLProgram(h,[s],o.dtype)}};const Rk={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a;$x([s,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=Ea.computePool2DInfo(o.shape,i,l,1,u),p=new Ck(c);return n.runWebGLProgram(p,[s],o.dtype)}};const Fk={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:o,transposeB:i}=r;return nk({a:s,b:a,transposeA:o,transposeB:i,backend:n})}};class _k{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ea.assertAndGetBroadcastShape(e,t),Ea.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(Ea.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(Ea.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Ok{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ea.assertAndGetBroadcastShape(e,t),Ea.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(Ea.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(Ea.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Mk={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:o,scale:i}=e;Le.assert(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Le.assert(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Le.assert(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,s,a];let c=null;null!=o&&(c=o.shape,u.push(o));let p=null;null!=i&&(p=i.shape,u.push(i));const h=oe().getBool("WEBGL_PACK_NORMALIZATION")?new Ok(r.shape,s.shape,a.shape,c,p,l):new _k(r.shape,s.shape,a.shape,c,p,l);return t.runWebGLProgram(h,u,u[0].dtype)}};class Lk{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Gb(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return zk.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${zk[t]} = start[${t}] + coords.${zk[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const zk=["x","y","z","w","u","v"];class Bk{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Gb(this.rank),n=Fx("coords",this.rank),r=Fx("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function Pk(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,l]=aa.parseSliceParams(s,a,o);if(aa.assertParamsValid(s,i,l),0===Le.sizeFromShape(l))return n.makeTensorInfo(l,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=Ew(e.values,i,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,t)}const{isPacked:u}=n.texData.get(s.dataId),c=aa.isSliceContinous(s.shape,i,l);if(u||!c){const e=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Bk(l):new Lk(l),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=aa.computeFlatOffset(t,Le.computeStrides(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),a}(s,i,l,n)}const Vk={kernelName:"Slice",backendName:"webgl",kernelFunc:Pk},Wk={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:o}=r;Le.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=Ea.getReshaped(s.shape,a,i),u=Ea.getPermuted(l.length,a.length),c=Ea.getReshapedPermuted(s.shape,a,i),p=Ea.getSliceBeginCoords(o,a.length),h=Ea.getSliceSize(c,o,a.length),d=[],f=Gw({inputs:{x:s},backend:n,attrs:{shape:l}}),m=ek({inputs:{x:f},backend:n,attrs:{perm:u}}),g=Gw({inputs:{x:m},backend:n,attrs:{shape:c}}),y=Pk({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const Uk={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o}=r,i=n.readSync(s.dataId),l=n.readSync(a.dataId),u=ew(i,l,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,u)}};const Gk={kernelName:"BroadcastArgs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),o=n.readSync(s.dataId),i=Ea.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Hk=qx({opSnippet:"return float(a != b);",cpuKernelImpl:kw,dtype:"bool"}),qk={kernelName:"NotEqual",backendName:"webgl",kernelFunc:Hk};function jk(e){const{inputs:t,backend:n}=e,{input:r}=t;return Ox({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const Kk={kernelName:"Real",backendName:"webgl",kernelFunc:jk};const Xk={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===a.dtype)return Ox({inputs:{x:a},backend:r});const t=el(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=Lx({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=jk({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!Le.hasEncodingLoss(a.dtype,o)){const e=Ox({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new Ux(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",Le.getTypedArrayFromDType("bool",1)),t=Hk({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},Yk={kernelName:"Ceil",backendName:"webgl",kernelFunc:Hx({opSnippet:"return ceil(x);",packedOpSnippet:"return ceil(x);",cpuKernelImpl:nw})};class Zk{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Jk{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Qk={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:o}=r;let i;i=oe().getBool("WEBGL_PACK_CLIP")?new Jk(s.shape):new Zk(s.shape);const l=[[a],[o]];return n.runWebGLProgram(i,[s],s.dtype,l)}};class ev{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function tv(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const nv={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new ev(r.shape),o=[tv(r,s.complexTensorInfos.real),tv(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class rv{constructor(e){this.outputShape=[],this.outputShape=Ea.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class sv{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ea.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=Gb(r),a=Fx("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let p=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${av(o,l,t)}),\n            vec2(${av(u,l,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${av(o,l,d)}),\n          vec2(${av(u,l,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function av(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function ov(e){const{inputs:t,backend:n}=e,{input:r}=t;return Ox({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const iv={kernelName:"Imag",backendName:"webgl",kernelFunc:ov};function lv(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>jk({inputs:{input:e},backend:n}))),s=e.map((e=>ov({inputs:{input:e},backend:n}))),a=lv(r,t,n),o=lv(s,t,n),i=Lx({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=Le.sizeFromShape(e.shape.slice(t));return Gw({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Ea.computeOutShape(s.map((e=>e.shape)),1),i=1===s[0].shape[0],l=rw(a,o,r,i),u=Ea.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,r,l);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>oe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),s=lv(e.slice(0,r),t,n),a=lv(e.slice(r),t,n),o=lv([s,a],t,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}if(oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new sv(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:a,outShape:o}=function(e,t,n){const r=Ea.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>Gw({inputs:{x:e},attrs:{shape:[-1,Le.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),i=new rv(a.map((e=>e.shape))),l=n.runWebGLProgram(i,a,r);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=Gw({inputs:{x:l},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(l),u}function uv(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=Le.parseAxisParam(s,t[0].shape)[0],o=Ea.computeOutShape(t.map((e=>e.shape)),a);if(0===Le.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>Le.sizeFromShape(e.shape)>0));if(1===i.length)return Ox({inputs:{x:i[0]},backend:n});const l=i.map((e=>e.shape));return Ea.assertParamsConsistent(l,a),lv(i,a,n)}const cv={kernelName:"Concat",backendName:"webgl",kernelFunc:uv};class pv{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class hv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length);const{dataFormat:n}=t,r=Eb(),s="channelsLast"===n,a=s?0:1,o=s?1:2,i=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${r.output} = result;\n      }\n    `}}function fv({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=r.texData.get(e.dataId),c=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(!((1===p||1===h)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Le.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Le.assert(kx(u.shape,p.shape),(()=>`packed reshape ${u.shape} to ${p.shape} isn't free`));const d=Gw({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=nk({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),y=r.texData.get(g.dataId);Le.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=h,y.shape=n.outShape,f=Ox({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=Gw({inputs:{x:e},backend:r,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=Gw({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=nk({a:u,b:c,transposeA:false,transposeB:false,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=Gw({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function mv({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=h*p,y=[m,g],b=[],x=Gw({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),w=Gw({inputs:{x:t},backend:r,attrs:{shape:[1,m,Le.sizeFromShape(t.shape)/m]}});b.push(x),b.push(w);const k=new dv(y,n),v=[x.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],N=r.runWebGLProgram(k,[x],"float32",v),S=Gw({inputs:{x:N},backend:r,attrs:{shape:[1,y[0],y[1]]}});b.push(N),b.push(S);const I=null!=s,T=null!=a,E="leakyrelu"===i,$=i?jx(i,!0):null,C=new Kx(S.shape,w.shape,[1,g,n.outChannels],!0,!1,I,$,T,E),A=[S,w];if(s&&A.push(s),T&&A.push(a),E){const e=r.makeTensorInfo([],"float32",Le.createScalarValue(o,"float32"));A.push(e),b.push(e)}const D=r.runWebGLProgram(C,A,"float32"),R=Gw({inputs:{x:D},backend:r,attrs:{shape:f?[1,h,p,n.outChannels]:[1,n.outChannels,h,p]}});b.push(D);for(const e of b)r.disposeIntermediateTensorInfo(e);return R}const gv={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r,p=Ea.convertConv2DDataFormat(l),h=Ea.computeConv2DInfo(s.shape,a.shape,o,u,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(oe().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])d=mv({x:s,filter:a,convInfo:h,backend:n});else{const e=new pv(h);d=n.runWebGLProgram(e,[s,a],"float32")}else d=fv({x:s,filter:a,convInfo:h,backend:n});const f=Gw({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class yv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kv={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,p=Ea.convertConv2DDataFormat(l),h=Ea.computeConv2DInfo(s.shape,c,o,1,i,u,!1,p),d=new yv(h);return n.runWebGLProgram(d,[s,a],"float32")}};const vv={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r,p=Ea.convertConv2DDataFormat(u),h=Ea.computeConv2DInfo(o,a.shape,i,1,l,c,!1,p),d=new bv(h);return n.runWebGLProgram(d,[s,a],"float32")}};const Nv={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=Ea.computeConv3DInfo(s.shape,a.shape,o,l,i),c=new hv(u);return n.runWebGLProgram(c,[s,a],"float32")}};const Sv={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,pad:i,filterShape:l}=r,u=Ea.computeConv3DInfo(s.shape,l,o,1,i),c=new xv(u);return n.runWebGLProgram(c,[s,a],"float32")}};const Iv={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:o,strides:i,inputShape:l}=r,u=Ea.computeConv3DInfo(l,a.shape,i,1,o),c=new wv(u);return n.runWebGLProgram(c,[s,a],"float32")}},Tv={kernelName:"Cos",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},Ev={kernelName:"Cosh",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class $v{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,l]=e,[u]=t,[c,p]=n;this.outputShape=[u,c,p,l];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Cv={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,c=new $v(s.shape,a.shape,i,l,u);return n.runWebGLProgram(c,[s,a,o],"float32")}};class Av{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${Dv(r,"coords")})`,a=e[e.length-1];let o="",i="";t?(o=n?"end != "+(a-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?`end + pow2 < ${a}`:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Gb(r)} coords = getOutputCoords();\n        int end = ${Rv(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${Rv(r,"coords")} = idx;\n          val += getX(${Dv(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function Dv(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function Rv(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const Fv={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:o,reverse:i}=r,l=s.shape.length,u=Ea.getAxesPermutation([a],l);let c=s;null!=u&&(c=ek({inputs:{x:s},backend:n,attrs:{perm:u}}));const p=Ea.getInnerMostAxes(1,l)[0];if(p!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=${a}`);const h=c.shape[p];let d=Ox({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(h))-1;e++){const t=new Av(c.shape,!1,i),r=[[e]],s=d;d=n.runWebGLProgram(t,[d],d.dtype,r),n.disposeIntermediateTensorInfo(s)}if(o){const e=new Av(c.shape,o,i),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=ek({inputs:{x:d},backend:n,attrs:{perm:Ea.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const _v={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:o,binaryOutput:i}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=ew(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=tw(e,t,o,i);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class Ov{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Mv={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:o}=r,i=s.shape[0],l=("NHWC"===o?s.shape[1]:s.shape[2])*a,u=("NHWC"===o?s.shape[2]:s.shape[3])*a,c=("NHWC"===o?s.shape[3]:s.shape[1])/(a*a),p=new Ov("NHWC"===o?[i,l,u,c]:[i,c,l,u],a,o);return n.runWebGLProgram(p,[s],s.dtype)}};class Lv{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Ax(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class zv{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Ax(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?Le.nearestLargerEven(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(h+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const Bv={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;let c=l;null==c&&(c=[1,1]),Le.assert(Ea.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=Ea.computeConv2DInfo(s.shape,a.shape,o,c,i,u,!0);let h;h=oe().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new zv(p):new Lv(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,a],"float32",d)}};class Pv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Wv={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r,p=Ea.computeConv2DInfo(s.shape,c,o,i,l,u,!0),h=new Pv(p);return n.runWebGLProgram(h,[s,a],"float32")}};const Uv={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r,p=Ea.computeConv2DInfo(c,a.shape,o,i,l,u,!0),h=new Vv(p);return n.runWebGLProgram(h,[s,a],"float32")}};class Gv{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Hv={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=Le.sizeFromShape(r.shape),o=Gw({inputs:{x:r},backend:n,attrs:{shape:[a]}}),i=new Gv(a),l=n.runWebGLProgram(i,[o],o.dtype),u=Gw({inputs:{x:l},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class qv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const jv={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:o,pad:i,dilations:l}=r,u=Ea.computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC",l);let c;const p=new qv(u);c=n.runWebGLProgram(p,[s,a],"float32");const h=Gw({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const Kv={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:o,summedDims:i,idDims:l}=Ea.decodeEinsumEquation(s,a.length);Ea.checkEinsumDimSizes(o.length,l,a);const{path:u,steps:c}=Ea.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=Ea.getEinsumPermutation(d,l[t]);let s;Ea.isIdentityPermutation(e)?s=a[t]:(s=ek({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Le.arraysEqual(s.shape,o)||(s=Gw({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===h?h=s:(h=Vw({inputs:{a:s,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=Jw({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},Xv={kernelName:"Elu",backendName:"webgl",kernelFunc:Hx({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},Yv={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _x("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new Dx("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},Zv={kernelName:"Equal",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:sw})},Jv={kernelName:"Erf",backendName:"webgl",kernelFunc:Hx({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Ea.ERF_P};\n  float a1 = ${Ea.ERF_A1};\n  float a2 = ${Ea.ERF_A2};\n  float a3 = ${Ea.ERF_A3};\n  float a4 = ${Ea.ERF_A4};\n  float a5 = ${Ea.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},Qv=Hx({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:aw,dtype:"float32"}),eN={kernelName:"Exp",backendName:"webgl",kernelFunc:Qv};function tN(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=s;return s<0&&(Le.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),i.splice(l,0,1),Gw({inputs:{x:a},backend:r,attrs:{shape:i}})}const nN={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:tN},rN={kernelName:"Expm1",backendName:"webgl",kernelFunc:Hx({opSnippet:"return exp(x) - 1.0;",packedOpSnippet:"return exp(x) - 1.0;",cpuKernelImpl:ow})};class sN{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function aN(e,t,n){const r=n.texData.get(e.dataId),s=Le.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=Gw({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),i=o.shape,l=new sN("real",i,t),u=new sN("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(l,c,"float32"),h=n.runWebGLProgram(u,c,"float32"),d=Lx({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=Gw({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const oN={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return aN(r,!1,n)}};class iN{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function lN(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Le.inferDtype(s),"string"===a){const e=Le.getArrayFromDType(a,Le.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new iN(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const uN={kernelName:"Fill",backendName:"webgl",kernelFunc:lN};class cN{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const pN={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new cN(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},hN={kernelName:"Floor",backendName:"webgl",kernelFunc:Hx({opSnippet:"return floor(x);",packedOpSnippet:"return floor(x);",cpuKernelImpl:iw})},dN={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:qx({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class fN{constructor(e){this.variableNames=["A"];const t=Eb(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class mN{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Eb(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const gN={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,u]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[u,l],p=[u,l,a];(i||o)&&(null==yN&&(yN=document.createElement("canvas").getContext("2d")),yN.canvas.width=l,yN.canvas.height=u,yN.drawImage(s,0,0,l,u),s=yN.canvas);const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=Jb.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),s);const d=oe().getBool("WEBGL_PACK")?new mN(p):new fN(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let yN;const bN={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=Ea.convertConv2DDataFormat(c),g=Ea.computeConv2DInfo(s.shape,a.shape,l,p,u,h,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(oe().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])y=mv({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=null!=o,t=null!=i,r="leakyrelu"===d,l=d?jx(d,!1):null,u=new pv(g,e,l,t,r),c=[s,a];if(o&&c.push(o),i&&c.push(i),r){const e=n.makeTensorInfo([],"float32",Le.createScalarValue(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=fv({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const x=Gw({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const xN={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),Le.assert(Ea.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Ea.computeConv2DInfo(s.shape,a.shape,l,m,u,p,!0),y=oe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?jx(h,y):null,x=[s,a],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",Le.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new zv(g,w,b,k,v):new Lv(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class wN{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=Gb(t.length),s=Gb(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const kN={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,o=a[a.length-1],i=Le.sizeFromShape(r.shape),[l,u,c,p]=Ea.prepareAndValidate(r,s),h=Gw({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),d=Gw({inputs:{x:r},backend:n,attrs:{shape:[Le.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=lw(e,t,r.dtype,u,o,c,p,r.shape,i);return n.makeTensorInfo(l,r.dtype,a.values)}const f=new wN(o,p,[u,c]),m=n.runWebGLProgram(f,[d,h],d.dtype),g=Gw({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class vN{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Gb(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function NN(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:o,batchDims:i}=r,l=Le.parseAxisParam(o,s.shape)[0];if(oe().get("DEBUG")){const e=n.readSync(a.dataId),t=s.shape[l];for(let n=0;n<e.length;++n){const r=e[n];Le.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const u=Ea.segment_util.collectGatherOpShapeInfo(s,a,l,i),c=Le.sizeFromShape(a.shape),p=[],h=Gw({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=Gw({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(h),p.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=uw(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const m=new vN(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=Gw({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const SN={kernelName:"GatherV2",backendName:"webgl",kernelFunc:NN},IN={kernelName:"Greater",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:cw,dtype:"bool"})},TN={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:pw})};const EN={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return aN(r,!0,n)}},$N={kernelName:"IsFinite",backendName:"webgl",kernelFunc:Hx({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},CN={kernelName:"IsInf",backendName:"webgl",kernelFunc:Hx({opSnippet:"return float(isinf(x));",dtype:"bool"})},AN={kernelName:"IsNan",backendName:"webgl",kernelFunc:Hx({opSnippet:"return float(isnan(x));",dtype:"bool"})},DN={kernelName:"Less",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:hw,dtype:"bool"})},RN={kernelName:"LessEqual",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:dw,dtype:"bool"})};const FN={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,o=fw(r,s,a);return t.makeTensorInfo([o.length],"float32",o)}},_N={kernelName:"Log",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:mw})},ON={kernelName:"Log1p",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"})},MN={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},LN={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:Hx({opSnippet:"return float(!(x >= 1.0));"})},zN={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:qx({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class BN{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class PN{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const VN={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=r,u=oe().getBool("WEBGL_PACK_NORMALIZATION")?new PN(s.shape,a,o,i,l):new BN(s.shape,a,o,i,l);return n.runWebGLProgram(u,[s],s.dtype)}};class WN{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const UN={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r,p=new WN(s.shape,i,l,u,c);return n.runWebGLProgram(p,[s,a,o],s.dtype)}};function GN(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:o}=r,i=s.shape.length,l=Le.parseAxisParam(a,s.shape);let u=l;const c=Ea.getAxesPermutation(u,i),p=null!=c,h=n.shouldExecuteOnCPU([s]);let d=s;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=Bw(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=Zw(s,c,n);u=Ea.getInnerMostAxes(u.length,i)}Ea.assertAxesAreInnerMostDims("max",u,i);const[f,m]=Ea.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(o&&(y=Ea.expandShapeToKeepDim(f,l)),h){const e=n.texData.get(d.dataId).values,t=gw(e,Le.sizeFromShape(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const s=Le.sizeFromShape(t),a=Gw({inputs:{x:e},attrs:{shape:[Le.sizeFromShape(e.shape)/s,s]},backend:r}),o=Kw(a,e.dtype,"max",r),i=Gw({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const HN={kernelName:"Max",backendName:"webgl",kernelFunc:GN},qN={kernelName:"Maximum",backendName:"webgl",kernelFunc:qx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:yw})};const jN={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;$x(s,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=r;Le.assert(Ea.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ea.computePool2DInfo(s.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Le.arraysEqual(u.inShape,u.outShape))return Ox({inputs:{x:s},backend:n});const c=new Ik(u,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const KN={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=r,c=Ea.computePool3DInfo(s.shape,a,o,[1,1,1],i,u,l),p=new Tk(c,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class XN{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class YN{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=l-1-e.padInfo.top,h=u-1-e.padInfo.left,d=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ZN={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=Ea.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new Tk(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new YN(p),m=n.runWebGLProgram(f,[s,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const JN={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:o}=t,i=a;$x([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=Ea.computePool2DInfo(i.shape,l,u,1,c,p),d=new Ik(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new XN(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const QN={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;Le.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];Le.assert(Ea.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Ea.computePool2DInfo(r.shape,s,a,u,o),[p,h]=function(e,t,n,r){let s=new Ik(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new Ik(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,i,c,l);return[p,h]}};const eS={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,o=n,i=r.shape.length,l=Le.parseAxisParam(a,r.shape);let u=l;const c=Ea.getAxesPermutation(u,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=Bw(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=Zw(r,c,o);d.push(f),u=Ea.getInnerMostAxes(u.length,i)}Ea.assertAxesAreInnerMostDims("sum",u,i);const[m,g]=Ea.computeOutAndReduceShapes(f.shape,u);let y=m;s&&(y=Ea.expandShapeToKeepDim(m,l));const b=function(e,t,n,r){const s=Le.sizeFromShape(t),a=Gw({inputs:{x:e},attrs:{shape:[Le.sizeFromShape(e.shape)/s,s]},backend:r}),o=Kw(a,"float32","mean",r),i=Gw({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const tS={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=Le.parseAxisParam(a,s.shape);let u=l;const c=Ea.getAxesPermutation(u,i);let p=s;null!=c&&(p=ek({inputs:{x:s},backend:n,attrs:{perm:c}}),u=Ea.getInnerMostAxes(u.length,s.shape.length)),Ea.assertAxesAreInnerMostDims("min",u,i);const[h,d]=Ea.computeOutAndReduceShapes(p.shape,u),f=Gw({inputs:{x:p},backend:n,attrs:{shape:[-1,Le.sizeFromShape(d)]}}),m=Kw(f,f.dtype,"min",n);let g;if(o){g=Gw({inputs:{x:m},backend:n,attrs:{shape:Ea.expandShapeToKeepDim(h,l)}})}else g=Gw({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},nS={kernelName:"Minimum",backendName:"webgl",kernelFunc:qx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:bw})};class rS{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=Gb(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class sS{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=Gb(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Fx("rc",r),l=Fx("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const aS={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,o=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sS(r.shape,s,a):new rS(r.shape,s,a);return t.runWebGLProgram(o,[r],r.dtype)}},oS={kernelName:"Mod",backendName:"webgl",kernelFunc:qx({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};class iS{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const lS=qx({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),uS={kernelName:"RealDiv",backendName:"webgl",kernelFunc:lS},cS=qx({opSnippet:"return a - b;",packedOpSnippet:"return a - b;",supportsComplex:!0,cpuKernelImpl:Mw}),pS={kernelName:"Sub",backendName:"webgl",kernelFunc:cS};function hS(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,o=Le.parseAxisParam([a],s.shape),i=GN({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=Ea.expandShapeToKeepDim(i.shape,o),u=Gw({inputs:{x:i},backend:n,attrs:{shape:l}}),c=cS({inputs:{a:s,b:u},backend:n}),p=Qv({inputs:{x:c},backend:n}),h=Jw({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=Gw({inputs:{x:h},backend:n,attrs:{shape:l}}),f=lS({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const dS={kernelName:"Softmax",backendName:"webgl",kernelFunc:hS};const fS={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:o,normalized:i}=r,l=i?s:hS({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new iS(u,c,a),h=[[o]],d=n.runWebGLProgram(p,[l],"int32",h);return i||n.disposeIntermediateTensorInfo(l),d}};const mS={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=ww(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Gx(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Ux(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},gS=Ai.nonMaxSuppressionV3Impl;const yS={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){Ea.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:p}=gS(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},bS=Ai.nonMaxSuppressionV4Impl;const xS={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){Ea.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),{selectedIndices:h,validOutputs:d}=bS(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},wS=Ai.nonMaxSuppressionV5Impl;const kS={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){Ea.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(s.dataId),p=n.readSync(a.dataId),h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=wS(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class vS{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const NS={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:o,offValue:i}=r,l=Le.sizeFromShape(s.shape),u=new vS(l,a,o,i),c=Gw({inputs:{x:s},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(u,[c],s.dtype);n.disposeIntermediateTensorInfo(c);const h=Gw({inputs:{x:p},backend:n,attrs:{shape:[...s.shape,a]}});return n.disposeIntermediateTensorInfo(p),h}};function SS(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=jk({inputs:{input:r},backend:n}),t=SS({inputs:{x:e},backend:n}),s=ov({inputs:{input:r},backend:n}),a=SS({inputs:{x:s},backend:n}),o=Lx({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),o}return lN({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const IS={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:SS};const TS={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=jk({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=ov({inputs:{input:s},backend:r}),o=SS({inputs:{x:a},backend:r}),i=Lx({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),i}return lN({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const ES={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return tN({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{Le.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Le.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=uv({inputs:t.map((e=>{const t=tN({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class $S{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=Gb(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class CS{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=Gb(r),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Fx("rc",r),l=Fx("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${s} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${u}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const AS=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:o}=r;if(0===Le.sizeFromShape(s.shape)){return lN({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:o,dtype:s.dtype}})}const i=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CS(s.shape,a,o):new $S(s.shape,a,o),l=[[o]];return n.runWebGLProgram(i,[s],s.dtype,l)},DS={kernelName:"PadV2",backendName:"webgl",kernelFunc:AS},RS={kernelName:"Pow",backendName:"webgl",kernelFunc:qx({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};const FS={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r,i=s.shape.length,l=[],u=Le.parseAxisParam(a,s.shape);let c=u;const p=Ea.getAxesPermutation(c,i);let h,d=s;if(null!=p&&(d=ek({inputs:{x:s},backend:n,attrs:{perm:p}}),c=Ea.getInnerMostAxes(c.length,i),l.push(d)),Ea.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=vw(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,s,t)}else{const[e,t]=Ea.computeOutAndReduceShapes(d.shape,c),r=Le.sizeFromShape(t),a=Gw({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=Kw(a,nn(s.dtype),"prod",n);h=Gw({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(a),l.push(o)}if(o){l.push(h);const e=Ea.expandShapeToKeepDim(h.shape,u);h=Gw({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},_S=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:o}=n,i=Nw(r,s,a,o);return t.makeTensorInfo([i.length],o,i)},OS={kernelName:"Range",backendName:"webgl",kernelFunc:_S},MS={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:Hx({opSnippet:"return 1.0 / x;"})},LS={kernelName:"Relu",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},zS={kernelName:"Relu6",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class BS{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class PS{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const VS={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=oe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new PS(s.shape,l,u,a,o):new BS(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],"float32")}};class WS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const US={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new WS(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class GS{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class HS{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const qS={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:o,size:i}=r,[l,u]=i,c=oe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new HS(s.shape,l,u,a,o):new GS(s.shape,l,u,a,o);return n.runWebGLProgram(c,[s],s.dtype)}};class jS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,o]=e,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const KS={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:o}=r,i=new jS(a.shape,s.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class XS{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=Gb(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class YS{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=Fx("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=Gb(n);var i;function l(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${i=r.slice(),l(i)};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const ZS={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,o=s.shape.length,i=Le.parseAxisParam(a,s.shape);if(0===o)return Ox({inputs:{x:s},backend:n});const l=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YS(s.shape,i):new XS(s.shape,i);return n.runWebGLProgram(l,[s],s.dtype)}};class JS{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const QS={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,l=new JS(r.shape,a),[u,c]=Ea.getImageCenter(o,r.shape[1],r.shape[2]),p=[[u,c,Math.sin(s),Math.cos(s)]];return i.runWebGLProgram(l,[r],r.dtype,p)}},eI={kernelName:"Round",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},tI={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:Hx({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Sw})};class nI{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=Gb(s.length),l=Gb(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const rI={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=Ea.calculateShapes(a,s,o),h=[p/u,u];if(0===p)return n.makeTensorInfo(o,s.dtype);const d=Gw({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),f=Gw({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new nI(l,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=Gw({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class sI{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=o.join()}const a=Gb(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const aI={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,o=new sI(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[r,s,a],tn(s.dtype,a.dtype))}},oI={kernelName:"Selu",backendName:"webgl",kernelFunc:Hx({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Ea.SELU_SCALEALPHA};\n  float scale = ${Ea.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},iI={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Iw})},lI={kernelName:"Sign",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},uI={kernelName:"Sin",backendName:"webgl",kernelFunc:Hx({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},cI={kernelName:"Sinh",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},pI={kernelName:"Softplus",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},hI={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:o}=r;Le.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const u=[],c=AS({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),p=Ea.getReshaped(c.shape,a,i,!1),h=Ea.getPermuted(p.length,a.length,!1),d=Ea.getReshapedPermuted(c.shape,a,i,!1),f=Gw({inputs:{x:c},backend:n,attrs:{shape:p}}),m=ek({inputs:{x:f},backend:n,attrs:{perm:h}}),g=Gw({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const dI={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(s.dataId),u=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=$w(i,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const fI={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(s.dataId)),i=n.readSync(r.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,p]=Cw(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],a.dtype,new Int32Array(p))]}};const mI={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=Aw(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const gI={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(r.dataId),i=n.readSync(s.dataId),l=n.readSync(a.dataId),[u,c]=Aw(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const yI={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,strides:c,outputSize:p}=Ea.calculateShapes(a,s,i),h=new nI(u,l,s.shape.length,a.shape.length,c,[p,1],!1),d=n.runWebGLProgram(h,[a,s,o],a.dtype),f=Gw({inputs:{x:d},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),f}};const bI={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:o}=r,i=Le.parseAxisParam(o,s.shape)[0],l=Ea.prepareSplitSize(s,a,i),u=s.shape.length,c=new Array(u).fill(0),p=s.shape.slice();return l.map((e=>{const t=[...p];t[i]=e;const r=Pk({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},xI={kernelName:"Sqrt",backendName:"webgl",kernelFunc:Hx({opSnippet:"return sqrt(x);",packedOpSnippet:"return sqrt(x);",cpuKernelImpl:Dw})},wI={kernelName:"Square",backendName:"webgl",kernelFunc:Hx({opSnippet:"return x * x;"})},kI={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:qx({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const vI={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new Ux(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class NI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Gb(n.length),a=Gb(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const SI={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=aa.sliceInfo(s.shape,a,o,i,l,u,c,p,h);let k;if(m)k=Gw({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){Le.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=aa.computeOutShape(b,x,w),t=Pk({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=Gw({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=Es(s.shape,s.dtype,e),r=Rw(d,t,w,b);k=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new NI(b,w,d);k=n.runWebGLProgram(e,[s],s.dtype)}}const v=Gw({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const II={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=Fw(h,d,s,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const TI={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),l=n.readSync(o.dataId)[0],[u,c,p]=_w(i,l,s),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const EI={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=Ow(o,s);return n.makeTensorInfo(a.shape,"int32",i)}},$I={kernelName:"Tan",backendName:"webgl",kernelFunc:Hx({opSnippet:"return tan(x);"})},CI={kernelName:"Tanh",backendName:"webgl",kernelFunc:Hx({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class AI{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=Gb(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function DI(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Le.decodeString(e))):e,r=Es(s.shape,s.dtype,t),o=Lw(r,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new AI(s.shape,a);return n.runWebGLProgram(o,[s],s.dtype)}const RI={kernelName:"Tile",backendName:"webgl",kernelFunc:DI};class FI{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class _I{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function OI(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function MI(e){let t=1;for(;t<e;)t*=2;return t}const LI={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:o}=r,i=oe().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=oe().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=s.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([s])||c<i||a>l){const e=n.readSync(s.dataId),[t,r]=zw(e,u,s.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,s.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[s,lN({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(s):s,f=Le.sizeFromShape(u)/c,m=Gw({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&OI(n,d);const g=MI(a),y=MI(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new FI(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,s,"int32",o),OI(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new _I([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),OI(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=Pk({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),OI(n,k);let v=NN({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});OI(n,m);const N=u.slice(0,-1);N.push(a),k=b,b=Gw({inputs:{x:b},attrs:{shape:N},backend:n}),OI(n,k);const S=v;return v=Gw({inputs:{x:v},attrs:{shape:N},backend:n}),OI(n,S),[v,b]}};class zI{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const BI={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=r,[c,p,h,d]=s.shape,[f,m]=null!=u?u:[p,h],g=new zI(p,h,o,i,l,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const PI={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;$x(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=Pw(o,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}};const VI={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const o=s,i=o.shape.length,l=s.shape[a],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(u[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){h[a]=e;const t=Pk({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=Gw({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class WI{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const UI=[rk,sk,ak,ok,ik,ck,pk,hk,bk,xk,wk,kk,vk,Nk,Sk,Ek,$k,Dk,Rk,Fk,Mk,Wk,Uk,Gk,Xk,Yk,Qk,zx,nv,cv,gv,kv,vv,Nv,Sv,Iv,Tv,Ev,Cv,Fv,_v,Mv,Bv,Wv,Uv,Hv,jv,Kv,Xv,Yv,Zv,Jv,eN,nN,rN,oN,uN,pN,hN,dN,gN,bN,xN,kN,SN,IN,TN,Mx,EN,iv,$N,CN,AN,Px,DN,RN,FN,_N,ON,MN,LN,zN,VN,UN,HN,qN,jN,KN,ZN,JN,QN,eS,tS,nS,aS,oS,fS,Ww,mS,yS,xS,kS,qk,NS,TS,ES,DS,RS,Wx,FS,OS,Kk,uS,MS,LS,zS,Hw,VS,US,qS,KS,ZS,QS,eI,tI,rI,aI,oI,iI,lI,uI,cI,Vk,dS,pI,hI,dI,fI,mI,gI,yI,bI,xI,wI,kI,vI,SI,II,TI,EI,pS,Qw,$I,CI,RI,LI,BI,tk,PI,VI,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:o}=r,i=s.shape.length,l=[];let u=0;const c=Ea.getAxesPermutation([u],i);let p=s;null!=c&&(p=ek({inputs:{x:s},backend:n,attrs:{perm:c}}),l.push(p),u=Ea.getInnerMostAxes(1,i)[0]);const h=Ea.segment_util.computeOutShape(p.shape,u,o),d=Le.sizeFromShape([p.shape[u]]),f=Gw({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=nn(s.dtype),g=(e,t,r,s,a)=>{const o=e.shape[0],i=e.shape[1],u=Ea.segment_util.segOpComputeOptimalWindowSize(i,a),c=new WI({windowSize:u,inSize:i,batchSize:o,numSegments:a},t),p=n.compileAndRun(c,[e,r],s);if(l.push(p),p.shape[1]===a)return p;const h=_S({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=DI({inputs:{x:h},backend:n,attrs:{reps:[i/u]}});l.push(h),l.push(d);return g(p,t,d,s,a)},y=Gw({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){l.push(y);const e=Ea.getUndoAxesPermutation(c);b=ek({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},IS];for(const e of UI)_e(e);const GI=oe();GI.registerFlag("HAS_WEBGL",(()=>GI.getNumber("WEBGL_VERSION")>0)),GI.registerFlag("WEBGL_VERSION",(()=>Ix(2)?2:Ix(1)?1:0)),GI.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),GI.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===GI.get("WEBGL_VERSION"))),GI.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),GI.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),GI.registerFlag("WEBGL_PACK",(()=>GI.getBool("HAS_WEBGL"))),GI.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_CLIP",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_PACK_REDUCE",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_LAZILY_UNPACK",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_CONV_IM2COL",(()=>GI.getBool("WEBGL_PACK"))),GI.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==vx){const t=Yb(e);vx=t.getParameter(t.MAX_TEXTURE_SIZE)}return vx}(GI.getNumber("WEBGL_VERSION")))),GI.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Nx){const t=Yb(e);Nx=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Nx)}(GI.getNumber("WEBGL_VERSION")))),GI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=GI.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Yb(e);return t=Sx(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Sx(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),GI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>GI.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!mn.isMobile())),GI.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Yb(e);if(1===e){if(!Sx(t,"OES_texture_float"))return!1}else if(!Sx(t,"EXT_color_buffer_float"))return!1;return Ex(t)}(GI.getNumber("WEBGL_VERSION")))),GI.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!GI.getBool("WEBGL_FORCE_F16_TEXTURES")&&GI.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),GI.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>Tx(GI.getNumber("WEBGL_VERSION")))),GI.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=GI.getNumber("WEBGL_VERSION"))&&null!=Yb(e).fenceSync;var e})),GI.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>GI.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),GI.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),GI.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>mn.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),GI.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),GI.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),GI.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),GI.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));class HI{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Zb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Eb();this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Cb(["r","c","d"],e):$b(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class qI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Zb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Eb();this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Cb(["r","c","d"],e):$b(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class jI{constructor(e){this.variableNames=["A"],this.outTexUsage=Jb.DOWNLOAD;const t=Eb();this.outputShape=e,this.userCode=`\n      ${Rb}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class KI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Jb.DOWNLOAD;const t=Eb();this.outputShape=e,this.userCode=`\n      ${Rb}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class XI{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Eb();this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Db(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class YI{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Eb();this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${s};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Db(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function ZI(e){const t=Eb();return function(e,t){const n=mx(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(sx(e,(()=>e.shaderSource(n,t))),sx(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function JI(e){return function(e,t){const n=mx(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return sx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),sx(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function QI(e){return function(e,t){const n=mx(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return sx(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),sx(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function eT(e,t,n,r,s,a){!function(e,t){const n=oe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return mx(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return sx(e,(()=>e.bindTexture(i,o))),sx(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),sx(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),sx(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),sx(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===oe().getNumber("WEBGL_VERSION")?sx(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):sx(e,(()=>e.texStorage2D(i,1,r,t,n))),sx(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function tT(e){return e.internalFormatFloat}function nT(e){return e.internalFormatHalfFloat}function rT(e){return e.downloadTextureFormat}function sT(e){return e.internalFormatPackedFloat}function aT(e){return e.internalFormatPackedHalfFloat}function oT(e,t,n,r,s,a,o,i){const l=e,u=new Float32Array(function(e,t){const[n,r]=nx(e,t);return n*r*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class iT{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=oe().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Kb[e]=t}(t,e)):this.gl=Yb(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===oe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=ox(this.gl,e),Sx(this.gl,t))this.textureHalfFloatExtension=ox(this.gl,t);else if(oe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Sx(this.gl,r))this.colorBufferHalfFloatExtension=ox(this.gl,r);else if(oe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Sx(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Sx(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=JI(this.gl),this.indexBuffer=QI(this.gl),this.framebuffer=function(e){return mx(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=rx(this.gl,this.textureHalfFloatExtension)}get debug(){return oe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;sx(e,(()=>e.finish())),sx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),sx(e,(()=>e.deleteFramebuffer(this.framebuffer))),sx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),sx(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),sx(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=ex(t,n);return eT(e,s,a,tT(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=ex(t,n);return eT(e,s,a,nT(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=ex(t,n);return eT(e,s,a,rT(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){sx(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===oe().getNumber("WEBGL_VERSION")?sx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):sx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===oe().getNumber("WEBGL_VERSION")?sx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):sx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),sx(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,l;sx(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,l=a.internalFormatPackedFloat),o.set(s),2===oe().getNumber("WEBGL_VERSION")?sx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):sx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,i,o))),sx(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=nx(t,n);return eT(e,s,a,aT(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=nx(t,n);return eT(e,s,a,sT(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(dx(this.gl,this.framebuffer),this.outputTexture=null),sx(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=ex(t,n),o=new Uint8Array(t*n*4);return sx(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return oT(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();sx(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return sx(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),sx(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),sx(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(oe().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return sx(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=ZI(t));const n=function(e){return mx(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return sx(t,(()=>t.attachShader(n,this.vertexShader))),sx(t,(()=>t.attachShader(n,e))),function(e,t){if(sx(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&ux(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return sx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),cx(e,t,"clipSpacePos",n,3,20,0)&&cx(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&sx(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&ux(this.gl,this.program),sx(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return mx(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),sx(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),px(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=nx(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&ux(this.gl,this.program),fx(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),sx(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),sx(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ox(this.gl,2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Le.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||Le.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),hx(this.gl,e,this.framebuffer),this.debug&&fx(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(hx(this.gl,this.outputTexture,this.framebuffer),this.debug&&fx(this.gl)):dx(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;hx(r,e,this.framebuffer),this.debug&&fx(r),this.outputTexture=e,sx(r,(()=>r.viewport(0,0,t,n))),sx(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),sx(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class lT{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Ax(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Fx("rc",this.rank),t=Gb(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class uT{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=pT(t,n),s=hT(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=cT(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===Qb.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===Qb.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===Qb.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===Qb.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===Qb.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=pT(n,r),a=hT(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=cT(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=oe().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function cT(e,t,n,r,s){const a=function(e,t){switch(e){case Qb.PACKED_2X2_FLOAT32:return sT(t);case Qb.PACKED_2X2_FLOAT16:return aT(t);case Qb.UNPACKED_FLOAT32:return tT(t);case Qb.UNPACKED_FLOAT16:return nT(t);case Qb.PACKED_4X1_UNSIGNED_BYTE:return rT(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=nx(e[0],e[1]);o=t*n}else{const[t,n]=ex(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function pT(e,t){if(e===Jb.UPLOAD)return Qb.PACKED_2X2_FLOAT32;if(e===Jb.RENDER||null==e)return function(e){return oe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Qb.PACKED_2X2_FLOAT32:Qb.UNPACKED_FLOAT32:e?Qb.PACKED_2X2_FLOAT16:Qb.UNPACKED_FLOAT16}(t);if(e===Jb.DOWNLOAD||e===Jb.PIXELS)return Qb.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function hT(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class dT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Ax(this.outputShape.length);const t=e.length,n=Fx("rc",t),r=Gb(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const fT=Ai.whereImpl,mT={};const gT=oe().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class yT extends i{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!oe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof iT)t=e;else{const n=Yb(oe().getNumber("WEBGL_VERSION"),e);t=new iT(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Yb(oe().getNumber("WEBGL_VERSION"));t=new iT(e),this.binaryCache=((n=oe().getNumber("WEBGL_VERSION"))in mT||(mT[n]={}),mT[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new uT(this.gpgpu),this.numMBBeforeWarning=null==oe().global.screen?1024:oe().global.screen.height*oe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o(this,Vi())}nextDataId(){return yT.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((oe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||oe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:Jb.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if(oe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:Jb.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new Gx(o,"return x;"):new Ux(o,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Le.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);c=Ea.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Le.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new Gx(r,"return x;"):new Ux(r,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(oe().getBool("DEBUG")&&!oe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===oe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&oe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...tx(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];u=Ea.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Le.sizeFromShape(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;sx(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,u),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Vi().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new Gx(s,"return x;"):new Ux(s,"return x;");const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Vi().makeTensorFromDataId(u.dataId,u.shape,u.dtype),p=this.texData.get(u.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Le.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Es(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!ax(n)){if(oe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=Le.sizeFromShape(t);if(oe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...tx(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=oe().getBool("WEBGL_PACK")&&!0===r,o=a?xx(t):t,i=a?new KI(o):new jI(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=Le.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Le.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=Le.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Le.now(),endMs:null}}endTimer(e){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Le.now(),e)}async getQueryTime(e){if(oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=gT){return oe().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Le.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Ea.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return fT(e.shape,t)}packedUnaryOp(e,t,n){const r=new Gx(e.shape,t),s=this.compileAndRun(r,[e],n);return Vi().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Tw(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(oe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new Ux(e.shape,"return abs(x);"),n=this.compileAndRun(t,[e]);return Vi().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Le.isString(n[0])){const s=n.map((e=>Le.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return Vi().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new dT(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new lT(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[yx(e.shape),...bx(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[yx(t),...bx(t)],a=new Uw(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;if(null!=t){const e=Le.sizeFromShape(s),n=t[0]*t[1]*4;Le.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=xx(s);let i;i=r?new qI(o):new HI(o);const l=[null!=t?t:tx(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===Zb.DENSE){const t=null!=a?a:tx(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===Le.sizeFromShape(o.shape))return i.values=Le.getTypedArrayFromDType(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Le.sizeFromShape(t.shape)<=oe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!kx(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=Hb(e.packedInputs,t.shape,a);let u="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=Le.computeStrides(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&Le.arraysEqual(t.shape,a),f=1===Le.sizeFromShape(t.shape),m=Ea.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&Le.arraysEqual(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?l:""}_${i.length}_${f}_${m}_${d}_${u}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${oe().getNumber("WEBGL_VERSION")}`,a}(e,u,c),h=this.getAndSaveBinary(p,(()=>function(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=_b(s,o,t),l=ix(e.gl,i),u=e.createProgram(l);let c=null;const p=e.getUniformLocation(u,"NAN",!1);1===oe().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const h=!1,d={},f={},m={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n];d[r]=e.getUniformLocation(u,r,h),d[`offset${r}`]=e.getUniformLocation(u,`offset${r}`,h),t.enableShapeUniforms&&(f[`${r}Shape`]=e.getUniformLocation(u,`${r}Shape`,h),m[`${r}TexShape`]=e.getUniformLocation(u,`${r}TexShape`,h))}let g,y,b;t.enableShapeUniforms&&(g=e.getUniformLocation(u,"outShape",h),b=e.getUniformLocation(u,"outShapeStrides",h),y=e.getUniformLocation(u,"outTexShape",h));const x=[];return t.customUniforms&&t.customUniforms.forEach(((t,n)=>{x[n]=e.getUniformLocation(u,t.name,h)})),{program:t,fragmentShader:l,source:i,webGLProgram:u,uniformLocations:d,customUniformLocations:x,inShapeInfos:a,outShapeInfo:o,infLoc:c,nanLoc:p,inShapesLocations:f,inTexShapesLocations:m,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:y}}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,r,s){t.program.enableShapeUniforms||(Cx(t.inShapeInfos,n),Cx([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===oe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations[`offset${s}`],i=t.inShapesLocations[`${s}Shape`],l=t.inTexShapesLocations[`${s}TexShape`];if(i){const{uniformShape:r}=Hb(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(Le.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Le.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,h,u,c,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=oe().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Le.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!oe().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!oe().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ui((()=>{if(!oe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=oe().getBool("DEBUG");oe().set("DEBUG",!1);const t=this.abs(ol(1e-8)).dataSync()[0];if(oe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Le.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=oe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Le.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Le.squeezeShape(e);e=t.newShape}let r=Le.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=yx(e);let n=2,s=2;return e.length&&([n,s]=bx(e)),r=t*(n/2)*(s/2),Le.sizeToSquarishShape(r).map((e=>2*e))}return Le.sizeToSquarishShape(r)}(n,i),t.texShape=c),null!=s){const e=xx(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=nx(c[0],c[1])),a=i?new YI(e,h):new XI(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?Jb.PIXELS:Jb.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,b=this.runWebGLProgram(a,[f],r,g,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(b.dataId),t.values=null,l&&(this.uploadWaitMs+=Le.now()-u)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Le.bytesPerElement(t)}}yT.nextDataId=0;mn.isBrowser()&&qi("webgl",(()=>new yT),2);let bT;function xT(){return null==bT&&(bT=dn.backend.epsilon()),bT}class wT extends Error{constructor(e){super(e),Object.setPrototypeOf(this,wT.prototype)}}class kT extends Error{constructor(e){super(e),Object.setPrototypeOf(this,kT.prototype)}}class vT extends Error{constructor(e){super(e),Object.setPrototypeOf(this,vT.prototype)}}class NT extends Error{constructor(e){super(e),Object.setPrototypeOf(this,NT.prototype)}}class ST extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ST.prototype)}}Error;function IT(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function TT(e,t){if(!e)throw new ST(t)}function ET(e,t){let n=0;for(const r of e)r===t&&n++;return n}function $T(e){return 1===e.length?e[0]:e}function CT(e){return Array.isArray(e)?e:[e]}function AT(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function DT(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let RT={};function FT(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function _T(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>_T(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?_T(t):e[n]=t.value)}}}function OT(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in RT)a=RT[s];else if(a=t[s],null==a)throw new vT(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new vT(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in n?[i,l]=n[o]:o in RT?[i,l]=RT.className:o in t&&([i,l]=t[o]),null==i)throw new vT(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(RT))e[t]=RT[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},RT);for(const e of Object.keys(n))RT[e]=n[e];_T(a.config);const r=l(i,a.config,n,s);return RT=Object.assign({},t),r}{const e=Object.assign({},RT);for(const e of Object.keys(n))RT[e]=n[e];const t=new i(a.config);return RT=Object.assign({},e),t}}}function MT(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function LT(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function zT(e){if(null==e)throw new vT(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function BT(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new vT(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function PT(e,t,n=0,r=1/0){return TT(n>=0),TT(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function VT(e,t){Array.isArray(e)?(Le.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>VT(e,`element ${n+1} of ${t}`)))):Le.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${WT(e)}.`))}function WT(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>WT(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function UT(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function GT(e,t){return Ui((()=>iu(xo(po(e,e),t,!0))))}class HT extends Na.Serializable{getConfig(){return{}}}class qT extends HT{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ui((()=>{const t=GT(e,this.axis),n=Xu(t,0,this.maxValue);return po(e,Gl(n,ul(xT(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}qT.className="MaxNorm",Na.registerClass(qT);class jT extends HT{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ui((()=>Gl(e,ul(xT(),GT(e,this.axis)))))}getConfig(){return{axis:this.axis}}}jT.className="UnitNorm",Na.registerClass(jT);class KT extends HT{apply(e){return fo(e)}}KT.className="NonNeg",Na.registerClass(KT);class XT extends HT{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ui((()=>{const t=GT(e,this.axis),n=ul(po(this.rate,Xu(t,this.minValue,this.maxValue)),po(1-this.rate,t));return po(e,Gl(n,ul(xT(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}XT.className="MinMaxNorm",Na.registerClass(XT);const YT={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function ZT(e){return FT(e)}function JT(e,t={}){return OT(e,Na.SerializationMap.getMap().classNameMap,t,"constraint")}function QT(e){if(null==e)return null;if("string"==typeof e){return JT({className:e in YT?YT[e]:e,config:{}})}return e instanceof HT?e:JT(e)}const eE=["channelsFirst","channelsLast"],tE=["nearest","bilinear"],nE=["valid","same","causal"],rE=["max","avg"],sE=["sum","mul","concat","ave"],aE=new Map;function oE(e){BT(eE,"DataFormat",e)}function iE(e){BT(nE,"PaddingMode",e)}function lE(e){BT(rE,"PoolMode",e)}const uE=[];function cE(e,t){uE.push(e);try{const e=t();return uE.pop(),e}catch(e){throw uE.pop(),e}}function pE(e){if(!fE(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===uE.length?"":uE.join("/")+"/")+e}function hE(e){if(!fE(e))throw new Error("Not a valid tensor name: '"+e+"'");aE.has(e)||aE.set(e,0);const t=aE.get(e);if(aE.set(e,aE.get(e)+1),t>0){const n=`${e}_${t}`;return aE.set(n,1),n}return e}const dE=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function fE(e){return!!e.match(dE)}function mE(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function gE(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function yE(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function bE(e,t){if(t<e)throw new vT(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function xE(e,t){return $s(e,t)}function wE(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),go(e,n)}function kE(e,t,n){return Ui((()=>{switch(e.rank){case 1:return tp(e,t,n);case 2:return np(e,[t,0],[n,e.shape[1]]);case 3:return rp(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return sp(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ji(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ji(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new vT(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function vE(e,t,n){return Ui((()=>{switch(e.rank){case 1:return tp(e,t,n);case 2:return np(e,[0,t],[e.shape[0],n]);case 3:return rp(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return sp(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new vT(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function NE(e,t,n,r){return Ui((()=>{switch(e.rank){case 1:return tp(e,t,n);case 2:switch(r){case 1:return kE(e,t,n);case 2:return vE(e,t,n);default:throw new vT(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return kE(e,t,n);case 2:return rp(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return vE(e,t,n);default:throw new vT(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return kE(e,t,n);case 2:return sp(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return sp(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return vE(e,t,n);default:throw new vT(`The axis is not within the rank of the tensor ${r}`)}default:throw new vT(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function SE(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Xi(e,t)}function IE(e,t){switch(e.rank){case 1:return Yu([e,t]);case 2:return Zu([e,t],0);case 3:return Ju([e,t],0);case 4:return Qu([e,t],0);default:throw new vT(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function TE(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new vT(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return $l(e,t)}function EE(e,t=0,n=1,r,s){return qc(e,t,n,r,s)}function $E(e,t,n,r){if(e.rank<2||t.rank<2)throw new NT(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new NT(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const s=!1,a=!1;return ll.matMul({a:e,b:t,transposeA:s,transposeB:a,bias:r?DE(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=go(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=go(gu(t,c),[l,-1]);const p=[...s,...u],h=!1,d=!1;return go(ll.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?DE(e.rank,r,"channelsLast"):null,activation:n}),p)}}function CE(e,t,n){return Ui((()=>(t=Array.isArray(t)?wl(t,"int32"):$s(t,"int32"),mc(e,t,n))))}function AE(e){return po(e,e)}function DE(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new vT(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?go(t,[1,r[0],1,1,1]):go(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?go(t,[1,1,1,1,r[0]]):go(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?go(t,[1,r[0],1,1]):go(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?go(t,[1,1,1,r[0]]):go(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?go(t,[1,r[0],1]):go(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?go(t,[1,1,r[0]]):go(t,[1].concat(r))}else if(e<3)return t;throw new vT(`Unsupported input rank by biasAdd: ${t.rank}`)}function RE(e,t,n){return Ui((()=>(null==n&&(n="channelsLast"),oE(n),ul(e,DE(e.rank,t,n)))))}function FE(e,t,n,r){return Ui((()=>dp(e,t,n,r)))}function _E(e,t,n=!1){return n?e():t()}const OE=["fanIn","fanOut","fanAvg"],ME=["normal","uniform","truncatedNormal"];class LE extends Na.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class zE extends LE{apply(e,t){return el(e,t)}}zE.className="Zeros",Na.registerClass(zE);class BE extends LE{apply(e,t){return vu(e,t)}}BE.className="Ones",Na.registerClass(BE);class PE extends LE{constructor(e){if(super(),"object"!=typeof e)throw new vT(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new vT(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Ui((()=>po(ol(this.value),vu(e,t))))}getConfig(){return{value:this.value}}}PE.className="Constant",Na.registerClass(PE);class VE extends LE{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return jc(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}VE.className="RandomUniform",Na.registerClass(VE);class WE extends LE{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NT(`randomNormal does not support dType ${t}.`);return EE(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}WE.className="RandomNormal",Na.registerClass(WE);class UE extends LE{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NT(`truncatedNormal does not support dType ${t}.`);return pp(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}UE.className="TruncatedNormal",Na.registerClass(UE);class GE extends LE{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Ui((()=>{if(2!==e.length||e[0]!==e[1])throw new vT("Identity matrix initializer can only be used for 2D square matrices.");return po(this.gain,fu(e[0]))}))}getConfig(){return{gain:this.gain}}}GE.className="Identity",Na.registerClass(GE);class HE extends LE{constructor(e){if(super(),e.scale<0)throw new vT(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,BT(OE,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){BT(ME,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(oE(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=mE(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=mE(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=mE(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NT(`${this.getClassName()} does not support dType ${t}.`);return pp(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return jc(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}HE.className="VarianceScaling",Na.registerClass(HE);class qE extends HE{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return HE.className}}qE.className="GlorotUniform",Na.registerClass(qE);class jE extends HE{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return HE.className}}jE.className="GlorotNormal",Na.registerClass(jE);class KE extends HE{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return HE.className}}KE.className="HeNormal",Na.registerClass(KE);class XE extends HE{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return HE.className}}XE.className="HeUniform",Na.registerClass(XE);class YE extends HE{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return HE.className}}YE.className="LeCunNormal",Na.registerClass(YE);class ZE extends HE{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return HE.className}}ZE.className="LeCunNormal",Na.registerClass(ZE);class JE extends LE{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new NT("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Ui((()=>{if(e.length<2)throw new NT("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=EE(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=mp.gramSchmidt(t);return e[0]>e[1]&&(n=gu(n)),po(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}JE.className="Orthogonal",Na.registerClass(JE);const QE={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function e$(e,t={}){return OT(e,Na.SerializationMap.getMap().classNameMap,t,"initializer")}function t$(e){return FT(e)}function n$(e){if("string"==typeof e){const t=e in QE?QE[e]:e;if("GlorotNormal"===t)return new jE;if("GlorotUniform"===t)return new qE;if("HeNormal"===t)return new KE;if("HeUniform"===t)return new XE;if("LeCunNormal"===t)return new YE;if("LeCunUniform"===t)return new ZE;{const e={};return e.className=t,e.config={},e$(e)}}return e instanceof LE?e:e$(e)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let r$=0;function s$(){return r$++}const a$={};function o$(e=""){return e in a$||(a$[e]=0),a$[e]+=1,e+a$[e].toString()}function i$(e){return Array.isArray(e)&&Array.isArray(e[0])}function l$(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function u$(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new vT(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function c$(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new vT(`Expected exactly 1 Shape; got ${e.length}`)}return e}function p$(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class h${constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=s$(),n=null==n?"Variable":n,this.originalName=pE(n),this.name=hE(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(e,t=!0,n,r){return dn.makeVariable(e,t,n,r)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function d$(e){return e.map((e=>e.read()))}function f$(e){e.forEach((e=>{e[0].write(e[1])}))}class m${constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class g${constructor(e,t,n,r,s,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=o,this.id=s$(),null!=a&&(this.originalName=pE(a),this.name=hE(this.originalName)),this.rank=t.length}}let y$=0;class b${constructor(e,t){this.callArgs=t,this.id=y$++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let x$=0;class w$ extends Na.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=x$++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=AT(e)+"_"+o$(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new kT(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new vT(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return $T(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return $T(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new wT(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new wT(`Layer ${this.name} is not connected, no input to return.`);return $T(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new wT(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new wT(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return $T(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=CT(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=CT(this.inputSpec);if(e.length!==t.length)throw new vT(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new vT(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new vT(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new vT(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new vT(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(o))throw new vT(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new vT(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=CT(e);let r=!0;for(const e of n)if(!(e instanceof g$)){r=!1;break}let s=!0;for(const e of n)if(e instanceof g$){s=!1;break}if(r===s)throw new vT("Arguments to apply() must be all SymbolicTensors or all Tensors");return cE(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of CT(e))t.push(n.shape);this.build($T(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=CT(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=$T(a),null!=this.activityRegularizer)throw new NT("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=CT(e);const t=[];for(const n of e)t.push(n.shape);return $T(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new g$(a,n,this,CT(e),t,this.name,r))):new g$(a,r,this,CT(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new NT("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new wT(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new wT(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new kT(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return p$(this.weights)}build(e){this.built=!0}getWeights(e=!1){return d$(e?this.trainableWeights:this.weights)}setWeights(e){Ui((()=>{const t=this.weights;if(t.length!==e.length)throw new vT(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=d$(t);for(let s=0;s<r.length;++s){const a=r[s],o=t[s],i=e[s];if(!Le.arraysEqual(a.shape,i.shape))throw new vT(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}f$(n)}))}addWeight(e,t,n,r,s,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new vT(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():n$("zeros"));const l=r.apply(t,n),u=new h$(l,n,e,a,o);return l.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=CT(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,o=null){const i=CT(e);t=CT(t),n=CT(n),r=CT(r),s=l$(s),a=l$(a);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new b$({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function k$(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=k$(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class v$ extends w${constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:o$("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new vT("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new vT("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new vT("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new g$(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new b$({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new vT(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function N$(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new vT("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new v$({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function S$(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Gi(r)}}function I$(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var T$;v$.className="InputLayer",Na.registerClass(v$),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(T$||(T$={}));class E${constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class $${constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class C$ extends E${constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Ui((()=>ul(this.totals[e],po(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Ui((()=>{const n=po(Gl(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Hi(t[e])})))}}class A$ extends E${async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const o=s[a];e.push(o.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class D$ extends E${constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Ep,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Le.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,s=null!=n?n():Le.now();return(...a)=>{const o=null!=n?n():Le.now();return o-s<t||(s=o,r=e(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await S$(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await S$(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await S$(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await S$(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await S$(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Le.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await S$(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await S$(e),await this.trainEnd(e))}}function R$(e,t){if(null==e&&(e={}),e instanceof E$)return[e];if(Array.isArray(e)&&e[0]instanceof E$)return e;return CT(e).map((e=>new D$(e,t)))}class F${constructor(){}static registerCallbackConstructor(e,t){Le.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),F$.checkForDuplicate(t),null==F$.constructors[e]&&(F$.constructors[e]=[]),F$.constructors[e].push(t)}static checkForDuplicate(e){for(const t in F$.constructors){F$.constructors[+t].forEach((t=>{if(t===e)throw new vT("Duplicate callback constructor.")}))}}static clear(){F$.constructors={}}static createCallbacks(e){const t=[];for(const n in F$.constructors){const r=+n;e>=r&&t.push(...F$.constructors[r])}return t.map((e=>new e))}}function _$(e,t,n,r,s,a,o,i,l){const u=new A$,c=[new C$,...F$.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const p=new $$(c);return p.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:p,history:u}}function O$(e,t={},n=!1){return OT(e,Na.SerializationMap.getMap().classNameMap,t,"layer",n)}function M$(e,t){return Ui((()=>{"float32"!==e.dtype&&(e=$s(e,"float32"));const n=xo(AE(e),t,!0),r=Nl(n.shape,xT()),s=iu($c(n,r));return Gl(e,s)}))}function L$(e,t){return Ui((()=>wu(AE(Hl(t,e)),-1)))}function z$(e,t){return Ui((()=>wu(ru(Hl(t,e)),-1)))}function B$(e,t){return Ui((()=>{const n=Hl(e,t),r=Xu(ru(e),xT(),Number.MAX_VALUE),s=ru(Gl(n,r));return po(100,wu(s,-1))}))}function P$(e,t){return Ui((()=>{const n=Xu(t,xT(),Number.MAX_VALUE),r=Iu(ul(1,n)),s=Xu(e,xT(),Number.MAX_VALUE),a=Iu(ul(1,s));return wu(AE(Hl(r,a)),-1)}))}function V$(e,t,n=!1){return Ui((()=>{if(n)t=ap(t);else{const e=xo(t,t.shape.length-1,!0);t=Gl(t,e)}return t=Xu(t,xT(),1-xT()),mu(xo(po($s(e,"float32"),Iu(t)),t.shape.length-1))}))}function W$(e,t,n=!1){return Ui((()=>{const r=$s(fc(function(e){const t=[mE(e.shape)];return go(e,t)}(e)),"int32"),s=(t=Xu(t,xT(),1-xT())).shape;return V$(go(Rc(r,s[s.length-1]),s),t,n)}))}function U$(e,t){return Ui((()=>{let n;return n=Xu(t,xT(),1-xT()),n=Iu(Gl(n,Hl(1,n))),wu(function(e,t){if(!Le.arraysEqual(e.shape,t.shape))throw new vT(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Ui((()=>{const n=fo(t),r=mu(ru(t));return ul(Hl(n,po(t,e)),$u(Eu(r)))}))}(e,n),-1)}))}function G$(e,t){return Ui((()=>{const n=Xu(e,xT(),1),r=Xu(t,xT(),1);return xo(po(e,Iu(Gl(n,r))),-1)}))}function H$(e,t){return Ui((()=>{const n=M$(e,-1),r=M$(t,-1),s=po(n,r);return mu(xo(s,-1))}))}F$.constructors={};const q$={meanSquaredError:L$,meanAbsoluteError:z$,meanAbsolutePercentageError:B$,meanSquaredLogarithmicError:P$,squaredHinge:function(e,t){return Ui((()=>{const n=$c(0,Hl(1,po(e,t)));return wu(AE(n),-1)}))},hinge:function(e,t){return Ui((()=>{const n=$c(0,Hl(1,po(e,t)));return wu(n,-1)}))},categoricalHinge:function(e,t){return Ui((()=>{const n=xo(po(e,t),-1),r=su(po(Hl(1,e),t),-1);return $c(0,ul(1,Hl(r,n)))}))},logcosh:function(e,t){return Ui((()=>{const n=Math.log(2),r=Hl(t,e),s=Hl(ul(r,kc(po(-2,r))),n);return wu(s,-1)}))},categoricalCrossentropy:V$,sparseCategoricalCrossentropy:W$,binaryCrossentropy:U$,kullbackLeiblerDivergence:G$,poisson:function(e,t){return Ui((()=>{const n=Iu(ul(xT(),t));return wu(Hl(t,po(e,n)),-1)}))},cosineProximity:H$};function j$(e){if("string"==typeof e){if(e in q$)return q$[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new vT(t)}return e}function K$(e,t){return Ui((()=>{const n=po(.5,Fc(t)),r=xE(Wl(t,n),e.dtype);return wu(cc(e,r),-1)}))}function X$(e,t){return Ui((()=>xE(cc(_u(e,-1),_u(t,-1)),"float32")))}function Y$(e,t){return Ui((()=>$s(xo(Ql(cc(e,1),cc(t,1))),"float32")))}function Z$(e,t){return Ui((()=>{const n=Y$(e,t),r=function(e,t){return Ui((()=>$s(xo(Ql(cc(e,0),cc(t,1))),"float32")))}(e,t),s=ul(n,r);return $s(Kl(Wl(s,0),Gl(n,s),0),"float32")}))}function J$(e,t){return U$(e,t)}function Q$(e,t){return e.rank===t.rank&&(e=pu(e,[e.rank-1])),(t=_u(t,-1)).dtype!==e.dtype&&(t=$s(t,e.dtype)),$s(cc(e,t),"float32")}const eC=V$,tC=W$,nC={binaryAccuracy:K$,categoricalAccuracy:X$,precision:Z$,categoricalCrossentropy:eC,sparseCategoricalCrossentropy:tC,mse:L$,MSE:L$,mae:z$,MAE:z$,mape:B$,MAPE:B$,cosine:H$};function rC(e){if("string"==typeof e&&e in nC)return nC[e];if("string"!=typeof e&&null!=e)return e;throw new vT(`Unknown metric ${e}`)}function sC(e){if(TT(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(q$))if(q$[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(nC))if(nC[n]===e){t=n;break}return void 0!==t?t:e.name}}function aC(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!oC(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function oC(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!oC(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!oC(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function iC(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let o;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),lC(a,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)s?uC(i[e],n,r):cC(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?p$(e.collectedTrainableWeights):p$(e.trainableWeights);return t}(e),u=p$(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}function lC(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function uC(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}lC([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function cC(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];a.push(`${n}[${r}][${s}]`)}const o=e.name,i=e.getClassName(),l=0===a.length?"":a[0];lC([`${o} (${i})`,s,e.countParams().toString(),l],t,r);for(let e=1;e<a.length;++e)lC(["","","",a[e]],t,r)}function pC(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function hC(e,t){if(null===e)return null;if("string"==typeof e)return DT(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];pC(t,s,r)?n.push(r):n.push(hC(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=DT(n);t[e]=hC(r,e)}}return t}}function dC(e,t){if(null==e)return null;if("string"==typeof e)return AT(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];pC(t,s,r)?n.push(r):n.push(dC(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=AT(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?dC(r,n):r}return t}}
/** @license See the LICENSE file. */class fC{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof fC)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new vT(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return $s(t,e.dtype)}catch(n){throw new vT(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof g$){if(null==this.id2Value[e.id])throw new vT(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new vT(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof g$){if(null==this.id2Value[e.id])throw new vT(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new vT(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Gi(this.id2Mask)}}const mC={},gC={};function yC(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().join(",");let p,h;if(null==mC[c]){const e=function(e,t){Le.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=xC(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:o}=xC(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:bC(r)}}(o,t);p=e.sorted,h=e.recipientCounts,mC[c]=p,gC[c]=h}p=mC[c],h={},s||Object.assign(h,gC[c]);const d=new fC(t);for(let e=0;e<p.length;++e){if(null!=r){const e=Wi().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=p[e],o=a.sourceLayer;if(o instanceof v$)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),s||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=CT(o.apply(u,n));let y=null;o.supportsMasking&&(y=o.computeMask(u,c));const b=wC(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}s||Gi(f)}return d.disposeMasks(),a?l:l[0]}function bC(e){const t={};for(const n in e)t[n]=e[n].size;return t}function xC(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function wC(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class kC extends w${constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=o$(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],LT(this.inputs).length!==this.inputs.length)throw new vT(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);LT(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;TT(0===n,"input layer has >1 nodes"),TT(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof v$))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},o=[],i=(e,t,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=e.sourceLayer,s=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new kT(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(kC.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const r=u.inputTensors[e],s=u.inboundLayers[e],a=u.nodeIndices[e],o=u.tensorIndices[e];i(r,t,n,s,a,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,o),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],o=e.nodeIndices[r],i=s.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,l),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(s[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(MT);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof kC&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(MT);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new kT(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new kT(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new b$({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new vT("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new vT(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new vT(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new vT(`${e.length} of ${r} weights are not set: ${e}`)}f$(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.13.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=dC(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Ui((()=>{e=CT(e);const n=new fC;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return yC(this.outputs,n,t)}))}computeMask(e,t){return Ui((()=>{let n;return e=CT(e),n=null==t?IT(null,e.length):CT(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=l$(e);if(t.length!==this.inputLayers.length)throw new vT(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(MT);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${s.name}_${a}_${o}`];r.push(i)}const s=l$(t.computeOutputShape($T(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];TT(t in n),s.push(n[t])}return $T(s)}runInternalGraph(e,t){null==t&&(t=IT(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],o=t[r];n[s.id]=[a,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(MT);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),i=CT(t.call(e,u)),l=CT(t.computeMask(e,n)),r=[e],o=[n]}else r=a.map((e=>e[0])),o=a.map((e=>e[1])),null==u.mask&&(u.mask=o),i=CT(t.call(r,u)),l=CT(t.computeMask(r,o));if(t.activityRegularizer)throw new NT("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=i[e],a=l[e];n[t.id]=[r,a]}}}}const s=[],a=[],o=[];for(const e of this.outputs){TT(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),s.push(t),a.push(r)}return[s,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof kC?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=kC.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new vT(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new vT("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new vT(`No such layer: ${e}`)}calculateLosses(){return Ui((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=kC.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=kC.nodeKey(e,n);let o={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],i=r.tensorIndices[n];let l=t[kC.nodeKey(s,a)];null==l&&(l=0),e.push([s.name,l,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=s,o.inboundNodes=a,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=kC.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=kC.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];s.push([n.name,o,i])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let r;for(const a of t){const i=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(i in s))return void o(e,t);const c=s[i];if(c.inboundNodes.length<=l)return void o(e,t);const p=c.inboundNodes[l];n.push(p.outputTensors[u])}n.length>0&&e.apply($T(n),r)}function l(e){const n=e.name,a=O$(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new vT(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!zT(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];TT(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];TT(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}return new e({inputs:p,outputs:h,name:u})}get stateful(){if(this._stateful)throw new vT("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Ui((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function vC(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function NC(e,t){return vC(e,t,"classWeight")}async function SC(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Ui((()=>{if(1===e.shape.length)return Cs(e);if(2===e.shape.length){if(e.shape[1]>1){return _u(e,1)}if(1===e.shape[1])return go(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Gi(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),wl(s,"float32")}return null}function IC(e,t){return po(e,t)}function TC(e,t){let n,r;const s=t;n=s.xs,r=s.ys,Le.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=EC("input",e.inputNames,n),o=EC("output",e.outputNames,r),i=a[0].shape[0];Le.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Le.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Le.assert(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)Le.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function EC(e,t,n){if(n instanceof Vt)return[n];if(Array.isArray(n))return Le.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new vT(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function $C(e,t,n){const r=null!=n.batchesPerEpoch;if(Le.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Le.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Le.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Le.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Le.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,o;if(s)if(CC(n.validationData))Le.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new NT("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=R$(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=_$(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,u);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=TC(e,t.value),a={};a.batch=p,a.size=r[0].shape[0],await h.onBatchBegin(p,a);const o=[];if(null!=n.classWeight){const t=NC(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await SC(s[e],null,t[e]))}const u=r.concat(s).concat(o),d=i(u);Gi(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,Hi(n)}await h.onBatchEnd(p,a),I$(a),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=CC(n.validationData)?CT(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):CT(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,u),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function CC(e){return"function"==typeof e.iterator}function AC(e){Le.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function DC(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>kE(e,t,n-t))):kE(e,t,n-t)}function RC(e,t){return Ui((()=>null==e?null:Array.isArray(e)?e.map((e=>RC(e,t))):CE(e,"int32"===t.dtype?t:$s(t,"int32"))))}function FC(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function _C(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,i,l,u,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;AC(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);s=m[0],a=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new NT("validationData including sample weights is not supported yet."):new vT(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);l=r.validationData[0],u=r.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];c=DC(s,e,t),o=s,s=DC(s,0,e),p=DC(a,e,t),i=a,a=DC(a,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=s.concat(a).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=R$(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,s,a,o,i,l,u,c,p,h,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new vT("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=bE(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=_$(i,o,a,h,g,d,s,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<a;++o){await b.onEpochBegin(o);const a={};if(null!=d)throw new NT("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new NT("batch shuffling is not implemneted yet");c&&Le.shuffle(y);const o=wl(y),i=FC(g,s);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),Ui((()=>{const h=i[c][0],d=i[c][1],f=kE(o,h,d-h);p.batch=c,p.size=d-h;const g=RC(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,Hi(n)}if(c===i.length-1&&m){const t=e.testLoop(l,u,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Hi(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,p),I$(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,MC(s,t),MC(a,n),MC(o,t),MC(i,n),MC(c,l),MC(p,u),null!=h&&Gi(h)}}function OC(e){const t=[];e instanceof Vt&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(wE(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function MC(e,t){if(null==e)return;const n=[];if(t instanceof Vt)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof Vt)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function LC(e){return Array.isArray(e)}function zC(e){return!function(e){return e instanceof Vt}(e)&&!LC(e)}function BC(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(LC(e)&&e.length>0)t=!0;else if(zC(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new vT(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(zC(e)){a=[];for(const n of t){if(null==e[n])throw new vT(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(LC(e)){if(e.length!==t.length)throw new vT(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new vT(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=OC(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new vT(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new vT(`${s} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${s} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function PC(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new vT(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new vT(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new vT(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const i=o.shape[a],l=n[e][a];if(null!=l&&l!==i)throw new vT(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class VC extends kC{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new vT("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");iC(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Ip.adagrad(.01),Adadelta:()=>Ip.adadelta(1,.95,xT()),Adam:()=>Ip.adam(.001,.9,.999,xT()),Adamax:()=>Ip.adamax(.002,.9,.999,xT(),0),RMSProp:()=>Ip.rmsprop(.001,.9,0,xT()),SGD:()=>Ip.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new vT(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof gp))throw new vT("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new vT(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>j$(e)))}else{const n=j$(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new vT(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(j$(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],cE("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};cE("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===U$?-1!==["accuracy","acc"].indexOf(o)?r=K$:-1!==["crossentropy","ce"].indexOf(o)&&(r=J$):this.lossFunctions[e]===W$?-1!==["accuracy","acc"].indexOf(o)?r=Q$:-1!==["crossentropy","ce"].indexOf(o)&&(r=tC):-1!==["accuracy","acc"].indexOf(o)?r=X$:-1!==["crossentropy","ce"].indexOf(o)&&(r=eC),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),a=r,n=""+s}else{const e=rC(o);a=e,n=""+sC(o)}let t;cE(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;AC(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const o=this.testFunction;return $T(this.testLoop(o,a,r,n.verbose,n.steps))}finally{MC(s[0],e),MC(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new NT("Verbose mode is not implemented yet.");Le.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!r||l<n.batches;){const t=await o.next();if(a=Ui((()=>{if(t.value){const{xs:n,ys:r}=TC(e,t.value),o=n.concat(r),u=Ui((()=>s(o)));if(Gi(o),0===l)for(let e=0;e<u.length;++e)a.push(ol(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Ui((()=>ul(a[e],po(c,t)))),l>0&&Gi(n)}Gi(u),i+=c,++l}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Gl(a[e],i),Gi(t)}return $T(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new vT(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new vT(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new vT("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new fC;if(e instanceof Vt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new vT(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new vT(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=yC(s,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=IT(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const o=a.indexOf(e[r]);if(-1!==o&&(t[r]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new vT(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Ui((()=>{const r=this.checkNumSamples(e);if(n)throw new NT("Verbose predictLoop() is not implemented yet.");const s=FC(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){Ui((()=>{const n=s[t][0],r=s[t][1],a=DC(e,n,r),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new fC(o);return yC(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)))}return $T(a.map((e=>Xi(e,0))))}))}predict(e,t={}){const n=OC(e);PC(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return AC(r),this.predictLoop(n,r)}finally{MC(n,e)}}predictOnBatch(e){PC(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new kT("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===W$?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=LT(e.map((e=>e.shape[0])));r.sort();const s=LT(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new vT(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new vT(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!Le.arraysEqual(r,s))throw new vT(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=BC(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=BC(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[L$,U$,V$];for(let s=0;s<e.length;++s){const a=e[s],o=t[s],i=n[s];if(null!=o){if(o===V$&&1===a.shape[a.shape.length-1])throw new vT(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new vT(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new vT(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=NC(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await SC(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,r=0,s){return Ui((()=>{const a=this.checkNumSamples(t,n,s,"steps"),o=[];if(r>0)throw new NT("Verbose mode is not implemented yet.");if(null!=s)throw new NT("steps mode in testLoop() is not implemented yet");{const r=FC(a,n),s=wl(bE(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],i=r[n][1],l=kE(s,a,i-a),u=RC(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(ol(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=ul(o[e],po(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=Gl(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(ET(e,r)>1){s+=`_${ET(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new fC(e),i=yC(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=s[e]&&(n=IC(n,s[e]));const a=wu(n);t.push(a),l=0===e?n:ul(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=wu(t(r[s],i[s]))}Hi(n),a.push(n)}return l=wu(l),this.calculateLosses().forEach((e=>{l=ul(l,e)})),l}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>Ui((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const o=new fC(a),i=yC(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=wu(r(s[e],i[e]));n=0===e?a:ul(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=wu(n(s[r],i[r]));t.push(a)}return t}))}async fit(e,t,n={}){return _C(this,e,t,n)}async fitDataset(e,t){return $C(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return Gi(a),MC(n[0],e),MC(n[1],t),$T(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Wi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Wi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=AT(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>AT(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=AT(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[AT(sC(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>AT(sC(e))));{const e={};for(const t in this.metrics)e[t]=AT(sC(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=O$(hC(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=DT(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>DT(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=DT(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>DT(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=DT(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=As.getSaveHandlers(e);if(0===t.length)throw new vT(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new vT(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new vT("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await As.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.13.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await As.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=As.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;aC(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){aC(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}VC.className="Model",Na.registerClass(VC);class WC extends VC{}WC.className="Functional",Na.registerClass(WC);class UC extends VC{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:o$("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new vT(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof UC||e instanceof VC;let n;if(t){if(n=e,1!==n.outputs.length)throw new vT("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new vT("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new vT("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=N$({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new vT(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new vT("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=k$(this.outputs[0])}this.inboundNodes=[],new b$({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:IT(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(c$(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new VC({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new kT("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new kT("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new kT("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new kT("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new vT("Legacy serialization format not supported yet.");s=t}else Le.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof UC))throw new NT(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of s){const t=O$(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new vT("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new vT("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}UC.className="Sequential",Na.registerClass(UC);class GC extends Na.Serializable{getConfig(){return{}}}class HC extends GC{apply(e,t=1){return function(e,t=1){if(1!==t)throw new NT(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return uo(e)}(e,t)}}HC.className="elu",Na.registerClass(HC);class qC extends GC{apply(e){return Yc(e)}}qC.className="selu",Na.registerClass(qC);class jC extends GC{apply(e){return fo(e)}}jC.className="relu",Na.registerClass(jC);class KC extends GC{apply(e){return Ui((()=>Su(6,fo(e))))}}KC.className="relu6",Na.registerClass(KC);class XC extends GC{apply(e){return e}}XC.className="linear",Na.registerClass(XC);class YC extends GC{apply(e){return yo(e)}}YC.className="sigmoid",Na.registerClass(YC);class ZC extends GC{apply(e){return function(e){return Ui((()=>{const t=ul(.5,po(.2,e));return Xu(t,0,1)}))}(e)}}ZC.className="hardSigmoid",Na.registerClass(ZC);class JC extends GC{apply(e){return kc(e)}}JC.className="softplus",Na.registerClass(JC);class QC extends GC{apply(e){return function(e){return Ui((()=>Gl(e,ul(ru(e),1))))}(e)}}QC.className="softsign",Na.registerClass(QC);class eA extends GC{apply(e){return up(e)}}eA.className="tanh",Na.registerClass(eA);class tA extends GC{apply(e,t=-1){return ap(e,t)}}tA.className="softmax",Na.registerClass(tA);class nA extends GC{apply(e,t=-1){return Nc(e,t)}}nA.className="logSoftmax",Na.registerClass(nA);class rA extends GC{apply(e,t=1){return Ui((()=>po(yo(po(e,t)),e)))}}rA.className="swish",Na.registerClass(rA);class sA extends GC{apply(e){return Ui((()=>po(e,up(kc(e)))))}}function aA(e){return e.getClassName()}function oA(e,t={}){return OT(e,Na.SerializationMap.getMap().classNameMap,t,"activation")}function iA(e){if(null==e){const e={className:"linear",config:{}};return oA(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},oA(t)}return e instanceof GC?e:oA(e)}function lA(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}sA.className="mish",Na.registerClass(sA);class uA extends Na.Serializable{}class cA extends uA{constructor(e){super(),lA(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Ui((()=>{let t=el([1]);return this.hasL1&&(t=ul(t,xo(po(this.l1,ru(e))))),this.hasL2&&(t=ul(t,xo(po(this.l2,AE(e))))),go(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}cA.className="L1L2",Na.registerClass(cA);const pA={l1l2:"L1L2"};function hA(e){return FT(e)}function dA(e,t={}){return OT(e,Na.SerializationMap.getMap().classNameMap,t,"regularizer")}function fA(e){if(null==e)return null;if("string"==typeof e){return dA({className:e in pA?pA[e]:e,config:{}})}return e instanceof uA?e:dA(e)}class mA extends w${constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=u$(e);let n=fo(e);return null!=this.maxValue&&(n=Xu(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}mA.className="ReLU",Na.registerClass(mA);class gA extends w${constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=u$(e);return co(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}gA.className="LeakyReLU",Na.registerClass(gA);class yA extends w${constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=n$(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=fA(e.alphaRegularizer),this.alphaConstraint=QT(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new vT(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=c$(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new m$({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=u$(e),ho(e,this.alpha.read())}getConfig(){const e={alphaInitializer:t$(this.alphaInitializer),alphaRegularizer:hA(this.alphaRegularizer),alphaConstraint:ZT(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}yA.className="PReLU",Na.registerClass(yA);class bA extends w${constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new NT(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=u$(e);return uo(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}bA.className="ELU",Na.registerClass(bA);class xA extends w${constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=u$(e);return po(n,$s(Wl(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}xA.className="ThresholdedReLU",Na.registerClass(xA);class wA extends w${constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new tA).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=u$(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function kA(e,t,n){if("number"==typeof e)return IT(e,t);if(e.length!==t)throw new vT(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new vT(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function vA(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function NA(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+yE([n-t,0]);else{if("same"!==r)throw new vT(`Unsupport padding mode: ${r}.`);e*=t}return e}function SA(e,t){return Ui((()=>(oE(t),"channelsFirst"===t?gu(e,[0,2,3,1]):e)))}function IA(e,t){return Ui((()=>(oE(t),"channelsFirst"===t?gu(e,[0,2,3,4,1]):e)))}function TA(e,t,n,r=1,s="valid",a,o=1){return Ui((()=>{if(null==a&&(a="channelsLast"),oE(a),3!==e.shape.length)throw new vT(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new vT(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new vT(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=gu(e,[0,2,1])),"causal"===s)throw new NT("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=ec(e,t,r,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=RE(i,n)),i}))}function EA(e,t,n,r=[1,1],s="valid",a,o,i=null){return Ui((()=>{if(null==a&&(a="channelsLast"),oE(a),3!==e.rank&&4!==e.rank)throw new vT(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new vT(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=SA(e,a);if("causal"===s)throw new NT("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ll.conv2d({x:l,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(l=gu(l,[0,3,1,2])),l}))}function $A(e,t,n,r=[1,1,1],s="valid",a,o){return Ui((()=>{if(null==a&&(a="channelsLast"),oE(a),4!==e.rank&&5!==e.rank)throw new vT(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new vT(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=IA(e,a);if("causal"===s)throw new NT("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=nc(i,t,r,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=RE(i,n)),"channelsFirst"===a&&(i=gu(i,[0,4,1,2,3])),i}))}wA.className="Softmax",Na.registerClass(wA);class CA extends w${constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",CA.verifyArgs(t),this.rank=e,VT(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new NT(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=kA(t.kernelSize,e,"kernelSize"),this.strides=kA(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,iE(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,oE(this.dataFormat),this.activation=iA(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=n$(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=QT(t.biasConstraint),this.biasRegularizer=fA(t.biasRegularizer),this.activityRegularizer=fA(t.activityRegularizer),this.dilationRate=kA(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new vT(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new vT(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new vT(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(TT("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!PT(e.kernelSize,"number",1,3))throw new vT(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:aA(this.activation),useBias:this.useBias,biasInitializer:t$(this.biasInitializer),biasRegularizer:hA(this.biasRegularizer),activityRegularizer:hA(this.activityRegularizer),biasConstraint:ZT(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class AA extends CA{constructor(e,t){super(e,t),this.kernel=null,AA.verifyArgs(t),this.filters=t.filters,VT(this.filters,"filters"),this.kernelInitializer=n$(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=QT(t.kernelConstraint),this.kernelRegularizer=fA(t.kernelRegularizer)}build(e){e=c$(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new vT(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Ui((()=>{let t;e=u$(e);const n=null==this.bias?null:this.bias.read(),r=UT(this.activation.getClassName());if(null!=r&&2===this.rank)t=EA(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=TA(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=EA(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new NT("convolutions greater than 3D are not implemented yet.");t=$A(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=c$(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=vA(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:t$(this.kernelInitializer),kernelRegularizer:hA(this.kernelRegularizer),kernelConstraint:ZT(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new vT(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class DA extends AA{constructor(e){super(2,e),DA.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!PT(e.kernelSize,"number",1,2))throw new vT(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}DA.className="Conv2D",Na.registerClass(DA);class RA extends AA{constructor(e){super(3,e),RA.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new vT(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}RA.className="Conv3D",Na.registerClass(RA);class FA extends DA{constructor(e){if(super(e),this.inputSpec=[new m$({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new vT(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=c$(e)).length)throw new vT("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new vT("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new m$({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Ui((()=>{let t=u$(e);if(4!==t.shape.length)throw new vT(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const o=n[s],i=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,NA(o,c,l,this.padding),NA(i,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=gu(t,[0,2,3,1]));let d=tc(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=gu(d,[0,3,1,2])),null!=this.bias&&(d=RE(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=c$(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=NA(t[r],i,a,this.padding),t[s]=NA(t[s],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}FA.className="Conv2DTranspose",Na.registerClass(FA);class _A extends RA{constructor(e){if(super(e),this.inputSpec=[new m$({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new vT(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=c$(e)).length)throw new vT("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new vT("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new m$({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Ui((()=>{let t=u$(e);if(5!==t.shape.length)throw new vT(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,o;"channelsFirst"===this.dataFormat?(o=2,s=3,a=4):(o=1,s=2,a=3);const i=n[o],l=n[s],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,NA(i,d,c,this.padding),NA(l,f,p,this.padding),NA(u,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=gu(t,[0,2,3,4,1]));let y=sc(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=gu(y,[0,4,1,2,3])),null!==this.bias&&(y=RE(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=c$(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=NA(t[r],u,o,this.padding),t[s]=NA(t[s],c,i,this.padding),t[a]=NA(t[a],p,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}_A.className="Conv3DTranspose",Na.registerClass(_A);class OA extends AA{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new vT("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new vT("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new vT(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=n$(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=fA(t.depthwiseRegularizer),this.depthwiseConstraint=QT(t.depthwiseConstraint),this.pointwiseInitializer=n$(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=fA(t.pointwiseRegularizer),this.pointwiseConstraint=QT(t.pointwiseConstraint)}build(e){if((e=c$(e)).length<this.rank+2)throw new vT(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new vT(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new m$({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Ui((()=>{let t;if(e=u$(e),1===this.rank)throw new NT("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=gu(e,[0,2,3,1])),t=Zc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=RE(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=gu(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=t$(this.depthwiseInitializer),e.pointwiseInitializer=t$(this.pointwiseInitializer),e.depthwiseRegularizer=hA(this.depthwiseRegularizer),e.pointwiseRegularizer=hA(this.pointwiseRegularizer),e.depthwiseConstraint=ZT(this.depthwiseConstraint),e.pointwiseConstraint=ZT(this.pointwiseConstraint),e}}OA.className="SeparableConv";class MA extends OA{constructor(e){super(2,e)}}MA.className="SeparableConv2D",Na.registerClass(MA);class LA extends AA{constructor(e){super(1,e),LA.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!PT(e.kernelSize,"number",1,1))throw new vT(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}LA.className="Conv1D",Na.registerClass(LA);class zA extends w${constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Ui((()=>{if(e=u$(e),"channelsLast"===this.dataFormat){const t=NE(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return NE(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=NE(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return NE(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}zA.className="Cropping2D",Na.registerClass(zA);class BA extends w${constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oE(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,BT(tE,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Ui((()=>{let t=u$(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=gu(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?fp.resizeNearestNeighbor(t,[e,r]):fp.resizeBilinear(t,[e,r]);return gu(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?fp.resizeNearestNeighbor(t,[e,r]):fp.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}BA.className="UpSampling2D",Na.registerClass(BA);class PA extends CA{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=n$(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=QT(e.depthwiseConstraint),this.depthwiseRegularizer=fA(e.depthwiseRegularizer)}build(e){if((e=c$(e)).length<4)throw new vT(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new vT(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ui((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Ui((()=>{null==s&&(s="channelsLast"),oE(s);let o=SA(e,s);if(4!==e.rank)throw new vT(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new vT(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=fl(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(o=gu(o,[0,3,1,2])),o}))}(e=u$(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=RE(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=c$(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=vA(t,this.kernelSize[0],this.padding,this.strides[0]),a=vA(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=t$(this.depthwiseInitializer),e.depthwiseRegularizer=hA(this.depthwiseRegularizer),e.depthwiseConstraint=ZT(this.depthwiseRegularizer),e}}PA.className="DepthwiseConv2D",Na.registerClass(PA);var VA={};function WA(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new vT("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function UA(e,t,n,r=!1,s,a,o=!1,i=!1){return Ui((()=>{const l=t.shape.length;if(l<3)throw new vT(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(bE(2,l));if(t=gu(t,u),null!=a)throw new NT("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=$s($s(s,"bool"),"float32")).rank===l-1&&(s=du(s,-1)),s=gu(s,u)),r&&(t=al(t,0),null!=s&&(s=al(s,0)));const c=[];let p,h=n;const d=t.shape[0],f=tu(t);let m,g;null!=s&&(m=tu(s));for(let t=0;t<d;++t){const n=f[t],r=Ui((()=>e(n,h)));if(null==s)p=r[0],h=r[1];else{const e=Ui((()=>{const e=m[t],n=Hl(Fc(e),e);return{output:ul(po(r[0],e),po(h[0],n)),newStates:h.map(((t,s)=>ul(po(r[1][s],e),po(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=eu(c,1)}return[p,g,h]}))}t(VA,"ConvLSTM2DCell",(()=>nD),(e=>nD=e)),t(VA,"ConvLSTM2D",(()=>rD),(e=>rD=e));class GA extends w${constructor(e){let t;if(super(e),null==e.cell)throw new vT("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new JA({cells:e.cell}):e.cell,null==t.stateSize)throw new vT("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new m$({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return bE(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){i$(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Ui((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new NT("Constants support is not implemented in RNN yet.");i$(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new m$({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Le.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new vT(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new m$({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Ui((()=>{if(!this.stateful)throw new wT("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new vT("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>el([n,e]))):this.states_=[el([n,this.cell.stateSize])];else if(null==e)Gi(this.states_),null!=this.keptStates&&(Gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>el([n,e]))):this.states_[0]=el([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new vT(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Gi(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!Le.arraysEqual(r.shape,a))throw new vT(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>Hi(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=WA(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new m$({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof g$){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Ui((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=u$(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new vT(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=UA(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?u:l;return this.returnState?[p].concat(c):p}))}getInitialState(e){return Ui((()=>{let t=el(e.shape);return t=xo(t,[1,2]),t=wE(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?TE(t,[1,e]):t)):this.cell.stateSize>1?[TE(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===GA.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=O$(t.cell,n);return new e(Object.assign(t,{cell:r}))}}GA.className="RNN",Na.registerClass(GA);class HA extends w${}class qA extends HA{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,VT(this.units,"units"),this.activation=iA(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=n$(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=n$(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=n$(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fA(e.kernelRegularizer),this.recurrentRegularizer=fA(e.recurrentRegularizer),this.biasRegularizer=fA(e.biasRegularizer),this.kernelConstraint=QT(e.kernelConstraint),this.recurrentConstraint=QT(e.recurrentConstraint),this.biasConstraint=QT(e.biasConstraint),this.dropout=gE([1,yE([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gE([1,yE([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=c$(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ui((()=>{if(2!==e.length)throw new vT(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=QA({ones:()=>Fc(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=QA({ones:()=>Fc(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;s=$E(null!=a?po(e,a):e,this.kernel.read()),null!=this.bias&&(s=RE(s,this.bias.read())),null!=o&&(n=po(n,o));let i=ul(s,$E(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:aA(this.activation),useBias:this.useBias,kernelInitializer:t$(this.kernelInitializer),recurrentInitializer:t$(this.recurrentInitializer),biasInitializer:t$(this.biasInitializer),kernelRegularizer:hA(this.kernelRegularizer),recurrentRegularizer:hA(this.recurrentRegularizer),biasRegularizer:hA(this.biasRegularizer),activityRegularizer:hA(this.activityRegularizer),kernelConstraint:ZT(this.kernelConstraint),recurrentConstraint:ZT(this.recurrentConstraint),biasConstraint:ZT(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}qA.className="SimpleRNNCell",Na.registerClass(qA);class jA extends GA{constructor(e){e.cell=new qA(e),super(e)}call(e,t){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}jA.className="SimpleRNN",Na.registerClass(jA);class KA extends HA{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new vT("GRUCell does not support reset_after parameter set to true.");this.units=e.units,VT(this.units,"units"),this.activation=iA(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=iA(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=n$(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=n$(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=n$(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fA(e.kernelRegularizer),this.recurrentRegularizer=fA(e.recurrentRegularizer),this.biasRegularizer=fA(e.biasRegularizer),this.kernelConstraint=QT(e.kernelConstraint),this.recurrentConstraint=QT(e.recurrentConstraint),this.biasConstraint=QT(e.biasConstraint),this.dropout=gE([1,yE([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gE([1,yE([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=c$(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Ui((()=>{if(2!==e.length)throw new vT(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=QA({ones:()=>Fc(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=QA({ones:()=>Fc(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=po(e,s[0]));let u=$E(e,this.kernel.read());this.useBias&&(u=RE(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=po(r,a[0]));const c=this.recurrentKernel.read(),[p,h]=Qi(c,[2*this.units,this.units],c.rank-1),d=$E(r,p),[f,m,g]=Qi(u,3,u.rank-1),[y,b]=Qi(d,2,d.rank-1);o=this.recurrentActivation.apply(ul(f,y)),i=this.recurrentActivation.apply(ul(m,b));const x=$E(po(i,r),h);l=this.activation.apply(ul(g,x));const w=ul(po(o,r),po(ul(1,mu(o)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:aA(this.activation),recurrentActivation:aA(this.recurrentActivation),useBias:this.useBias,kernelInitializer:t$(this.kernelInitializer),recurrentInitializer:t$(this.recurrentInitializer),biasInitializer:t$(this.biasInitializer),kernelRegularizer:hA(this.kernelRegularizer),recurrentRegularizer:hA(this.recurrentRegularizer),biasRegularizer:hA(this.biasRegularizer),activityRegularizer:hA(this.activityRegularizer),kernelConstraint:ZT(this.kernelConstraint),recurrentConstraint:ZT(this.recurrentConstraint),biasConstraint:ZT(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}KA.className="GRUCell",Na.registerClass(KA);class XA extends GA{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new KA(e),super(e)}call(e,t){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}XA.className="GRU",Na.registerClass(XA);class YA extends HA{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,VT(this.units,"units"),this.activation=iA(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=iA(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=n$(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=n$(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=n$(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=fA(e.kernelRegularizer),this.recurrentRegularizer=fA(e.recurrentRegularizer),this.biasRegularizer=fA(e.biasRegularizer),this.kernelConstraint=QT(e.kernelConstraint),this.recurrentConstraint=QT(e.recurrentConstraint),this.biasConstraint=QT(e.biasConstraint),this.dropout=gE([1,yE([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=gE([1,yE([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=c$(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends LE{apply(t,r){const s=e.apply([n]),a=(new BE).apply([n]),o=e.apply([2*n]);return IE(IE(s,a),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Ui((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new vT(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=QA({ones:()=>Fc(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=QA({ones:()=>Fc(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=po(e,a[0]));let p=$E(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=po(r,o[0])),p=ul(p,$E(r,this.recurrentKernel.read())),this.useBias&&(p=RE(p,this.bias.read()));const[h,d,f,m]=Qi(p,4,p.rank-1);i=this.recurrentActivation.apply(h),l=this.recurrentActivation.apply(d),u=ul(po(l,s),po(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=po(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:aA(this.activation),recurrentActivation:aA(this.recurrentActivation),useBias:this.useBias,kernelInitializer:t$(this.kernelInitializer),recurrentInitializer:t$(this.recurrentInitializer),biasInitializer:t$(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:hA(this.kernelRegularizer),recurrentRegularizer:hA(this.recurrentRegularizer),biasRegularizer:hA(this.biasRegularizer),activityRegularizer:hA(this.activityRegularizer),kernelConstraint:ZT(this.kernelConstraint),recurrentConstraint:ZT(this.recurrentConstraint),biasConstraint:ZT(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}YA.className="LSTMCell",Na.registerClass(YA);class ZA extends GA{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new YA(e),super(e)}call(e,t){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}ZA.className="LSTM",Na.registerClass(ZA);class JA extends HA{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Ui((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;i$(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{cE(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(O$(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return d$(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}f$(t)}}function QA(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):FE(t(),n),i=()=>_E(o,t,r);if(!s||s<=1)return Hi(i().clone());return Array(s).fill(void 0).map(i).map((e=>Hi(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */JA.className="StackedRNNCells",Na.registerClass(JA);var eD=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class tD extends GA{constructor(e){if(e.unroll)throw new NT("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new NT("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new m$({ndim:5})]}call(e,t){return Ui((()=>{if(null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new vT("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Ui((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=el([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Ui((()=>{if(!this.stateful)throw new wT("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new vT("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>el(s))):this.states_=[el(s)];else if(null==e)Gi(this.states_),null!=this.keptStates&&(Gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>el(s))):this.states_[0]=el(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new vT(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Gi(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!Le.arraysEqual(n.shape,r))throw new vT(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Hi(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=vA(l,r[0],s,a[0],o[0]),p=vA(u,r[1],s,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}tD.className="ConvRNN2D";class nD extends YA{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:o}=e;super(Object.assign({},e,{units:t})),this.filters=t,VT(this.filters,"filters"),this.kernelSize=kA(n,2,"kernelSize"),this.kernelSize.forEach((e=>VT(e,"kernelSize"))),this.strides=kA(r||1,2,"strides"),this.strides.forEach((e=>VT(e,"strides"))),this.padding=s||"valid",iE(this.padding),this.dataFormat=a||"channelsLast",oE(this.dataFormat),this.dilationRate=kA(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>VT(e,"dilationRate")))}build(e){var t;e=c$(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new vT(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends LE{apply(e,t){return SE([n.apply([r]),vu([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Ui((()=>{if(3!==e.length)throw new vT(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=QA({ones:()=>Fc(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?po(t[n],e):e;let l=i(r,o,0),u=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=QA({ones:()=>Fc(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(s,h,0),f=i(s,h,1),m=i(s,h,2),g=i(s,h,3);const[y,b,x,w]=Qi(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?Qi(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=Qi(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(ul(l,d)),A=this.recurrentActivation.apply(ul(u,f)),D=ul(po(A,a),po(C,this.activation.apply(ul(c,m)))),R=po(this.recurrentActivation.apply(ul(p,g)),this.activation.apply(D));return[R,R,D]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=eD(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){const s=cl(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?RE(s,n,this.dataFormat):s}recurrentConv(e,t){return cl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}nD.className="ConvLSTM2DCell",Na.registerClass(nD);class rD extends tD{constructor(e){const t=new nD(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}rD.className="ConvLSTM2D",Na.registerClass(rD);class sD extends w${constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return _E((()=>FE(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}sD.className="Dropout",Na.registerClass(sD);class aD extends sD{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}aD.className="SpatialDropout1D",Na.registerClass(aD);class oD extends w${constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,VT(this.units,"units"),this.activation=iA(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=n$(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=n$(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=QT(e.kernelConstraint),this.biasConstraint=QT(e.biasConstraint),this.kernelRegularizer=fA(e.kernelRegularizer),this.biasRegularizer=fA(e.biasRegularizer),this.activityRegularizer=fA(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=c$(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=c$(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e),r=UT(this.activation.getClassName());let s;return null!=r?s=$E(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=$E(n,this.kernel.read()),null!=this.bias&&(s=RE(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:aA(this.activation),useBias:this.useBias,kernelInitializer:t$(this.kernelInitializer),biasInitializer:t$(this.biasInitializer),kernelRegularizer:hA(this.kernelRegularizer),biasRegularizer:hA(this.biasRegularizer),activityRegularizer:hA(this.activityRegularizer),kernelConstraint:ZT(this.kernelConstraint),biasConstraint:ZT(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}oD.className="Dense",Na.registerClass(oD);class iD extends w${constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=c$(e);for(const t of e.slice(1))if(null==t)throw new vT(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],mE(e,1)]}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);let n=u$(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=gu(n,e)}return function(e){if(e.rank<=1)throw new vT(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],mE(e.shape,1)];return go(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}iD.className="Flatten",Na.registerClass(iD);class lD extends w${constructor(e){super(e),this.supportsMasking=!0,this.activation=iA(e.activation)}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e);return this.activation.apply(n)}))}getConfig(){const e={activation:aA(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}lD.className="Activation",Na.registerClass(lD);class uD extends w${constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Ui((()=>{return e=u$(e),t=e,n=this.n,Ui((()=>{if(2!==t.shape.length)throw new vT(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return TE(wE(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}uD.className="RepeatVector",Na.registerClass(uD);class cD extends w${constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new vT("Can only specifiy one unknown dimension.");a=e}else s*=t}const o=mE(e);if(null!==a){if(0===s||o%s!=0)throw new vT(n);r[a]=o/s}else if(o!==s)throw new vT(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return go(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}cD.className="Reshape",Na.registerClass(cD);class pD extends w${constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=bE(1,e.dims.length+1);if(!Le.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new m$({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=c$(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return gu(u$(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}pD.className="Permute",Na.registerClass(pD);class hD extends w${constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=u$(e);return Fu(ku(n,this.maskValue),-1)}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e),r=Fu(ku(n,this.maskValue),-1,!0);return po(n,$s(r,n.dtype))}))}}hD.className="Masking",Na.registerClass(hD);class dD extends w${constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(CT(e.inputLength))}this.inputDim=e.inputDim,VT(this.inputDim,"inputDim"),this.outputDim=e.outputDim,VT(this.outputDim,"outputDim"),this.embeddingsInitializer=n$(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=fA(e.embeddingsRegularizer),this.activityRegularizer=fA(e.activityRegularizer),this.embeddingsConstraint=QT(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Ui((()=>this.maskZero?(e=u$(e),ku(e,tl(e))):null))}computeOutputShape(e){if(e=c$(e),null==this.inputLength)return[...e,this.outputDim];const t=CT(this.inputLength);if(t.length!==e.length-1)throw new vT(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new vT(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);let n=u$(e);"int32"!==n.dtype&&(n=xE(n,"int32"));const r=CE(this.embeddings.read(),go(n,[n.size]));return go(r,c$(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:t$(this.embeddingsInitializer),embeddingsRegularizer:hA(this.embeddingsRegularizer),activityRegularizer:hA(this.activityRegularizer),embeddingsConstraint:ZT(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}dD.className="Embedding",Na.registerClass(dD);class fD extends w${constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new NT}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new vT("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[c$(e)]),e.length<2)throw new vT(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=LT(t),t.length>1)throw new vT(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===LT(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Ui((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=yE(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=wE(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let o=go(r,[s].concat(mE(e.slice(1))));o=gu(o,[1,0]),o=go(o,a),t.push(o),n=!0}else if(e>1){const s=bE(1,e).concat([0]);t.push(gu(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=go(gu(go(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(bE(0,s-1));r=gu(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=LT(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Ui((()=>{if(null==t)return null;if(!Array.isArray(t))throw new vT("`mask` should be an Array");if(!Array.isArray(e))throw new vT("`inputs` should be an Array");if(t.length!==e.length)throw new vT(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:du(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Ql(n,t[e]);return n}))}}class mD extends fD{constructor(e){super(e)}mergeFunction(e){return Ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ul(t,e[n]);return t}))}}mD.className="Add",Na.registerClass(mD);class gD extends fD{constructor(e){super(e)}mergeFunction(e){return Ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=po(t,e[n]);return t}))}}gD.className="Multiply",Na.registerClass(gD);class yD extends fD{constructor(e){super(e)}mergeFunction(e){return Ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ul(t,e[n]);return po(1/e.length,t)}))}}yD.className="Average",Na.registerClass(yD);class bD extends fD{constructor(e){super(e)}mergeFunction(e){return Ui((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=$c(t,e[n]);return t}))}}bD.className="Maximum",Na.registerClass(bD);class xD extends fD{constructor(e){super(e)}mergeFunction(e){return Ui((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Su(t,e[n]);return t}))}}xD.className="Minimum",Na.registerClass(xD);class wD extends fD{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new vT("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(Le.arraysEqual(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new vT("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Ui((()=>SE(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new vT("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new vT("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new vT("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new vT(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Ui((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push($s(Fc(e[n]),"bool")):t[n].rank<e[n].rank?r.push(du(t[n],-1)):r.push(t[n]);const s=Xi(r,this.axis);return Ru(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function kD(e,t){for(;e<0;)e+=t;return e}wD.className="Concatenate",Na.registerClass(wD);class vD extends fD{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Le.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new NT("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new vT(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new vT(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>kD(t,e[n].shape.length))):[kD(this.axes,n.shape.length),kD(this.axes,r.shape.length)],this.normalize&&(n=M$(n,t[0]),r=M$(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new NT("batchDot is not implemented for tensors of 4D or higher rank yet");if(Le.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Le.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new NT("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Ui((()=>{let n,o;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=go(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=go(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?xo(po(e,t),a[0]):xo(po(gu(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;o=bl(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=pu(o,t)}return 1===o.shape.length&&(o=du(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[kD(this.axes,e.length),kD(this.axes,t.length)],n}computeOutputShape(e){Le.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new NT("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}vD.className="Dot",Na.registerClass(vD);class ND extends w${constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e);return _E((()=>ul(EE(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}ND.className="GaussianNoise",Na.registerClass(ND);class SD extends w${constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ui((()=>{this.invokeCallHook(e,t);const n=u$(e);if(this.rate>0&&this.rate<1){return _E((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return po(n,EE(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}SD.className="GaussianDropout",Na.registerClass(SD);class ID extends w${constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||u$(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ui((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return _E((()=>{const t=u$(e),r=-1.7580993408473766;let s=Jl(jc(n),this.rate);s=xE(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-a*r*this.rate,i=ul(po(t,s),po(ul(s,-1),r));return ul(po(i,a),o)}),(()=>u$(e)),t.training||!1)}return e}))}}function TD(e,t,n,r,s,a=.001){let o;if(2===e.rank)o=Hu(e,t,n,r,s,a);else if(3===e.rank)o=qu(e,t,n,r,s,a);else{if(4!==e.rank)throw new NT(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=ju(e,t,n,r,s,a)}return o}function ED(e,t,n,r,s=.001){return Le.arraysEqual(r.slice().sort(),bE(0,e.rank-1))?function(e,t,n,r,s=.001){return Ui((()=>{const a=Dc(e,r),o=a.mean,i=a.variance;return[TD(e,o,i,n,t,s),o,i]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Ui((()=>{const a=Dc(e,r),o=a.mean,i=a.variance,l=[];for(const t of bE(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=go(o,l),c=go(i,l),p=null==t?null:go(t,l),h=null==n?null:go(n,l);return[TD(e,u,c,h,p,s),o,i]}))}(e,t,n,r,s)}ID.className="AlphaDropout",Na.registerClass(ID);class $D extends w${constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=n$(e.betaInitializer||"zeros"),this.gammaInitializer=n$(e.gammaInitializer||"ones"),this.movingMeanInitializer=n$(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=n$(e.movingVarianceInitializer||"ones"),this.betaConstraint=QT(e.betaConstraint),this.gammaConstraint=QT(e.gammaConstraint),this.betaRegularizer=fA(e.betaRegularizer),this.gammaRegularizer=fA(e.gammaRegularizer)}build(e){e=c$(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new vT(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new m$({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Ui((()=>{const n=null!=t.training&&t.training,r=u$(e),s=r.shape,a=s.length,o=bE(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const l=IT(1,a);l[i]=s[i];const u=o.slice();u.sort();const c=!Le.arraysEqual(u,bE(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=go(this.movingMean.read(),l),t=go(this.movingVariance.read(),l),n=this.center?go(this.beta.read(),l):null,s=this.scale?go(this.gamma.read(),l):null;return TD(r,e,t,n,s,this.epsilon)}return TD(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=ED(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{Ui((()=>{const r=1-n,s=e.read(),a=po(Hl(s,t),r);e.write(Hl(s,a))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:t$(this.betaInitializer),gammaInitializer:t$(this.gammaInitializer),movingMeanInitializer:t$(this.movingMeanInitializer),movingVarianceInitializer:t$(this.movingVarianceInitializer),betaRegularizer:hA(this.betaRegularizer),gammaRegularizer:hA(this.gammaRegularizer),betaConstraint:ZT(this.betaConstraint),gammaConstraint:ZT(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}$D.className="BatchNormalization",Na.registerClass($D);class CD extends w${constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=n$(e.betaInitializer||"zeros"),this.gammaInitializer=n$(e.gammaInitializer||"ones"),this.betaRegularizer=fA(e.betaRegularizer),this.gammaRegularizer=fA(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=c$(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==LT(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=u$(e),r=n.shape,s=r.length;return Ui((()=>{let{mean:e,variance:t}=Dc(n,this.axis,!0);const a=IT(1,s);for(const e of this.axis)a[e]=r[e];const o=e=>null!=e&&e.shape.length!==s?go(e,a):e;let i=o(this.gamma.read()),l=o(this.beta.read());const u=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),c.push(1)):(u.push(1),c.push(r[e]));return e=$l(e,u),t=$l(t,u),i=$l(i,c),l=$l(l,c),TD(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:t$(this.betaInitializer),gammaInitializer:t$(this.gammaInitializer),betaRegularizer:hA(this.betaRegularizer),gammaRegularizer:hA(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}CD.className="LayerNormalization",Na.registerClass(CD);class AD extends w${constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new vT(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new vT(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new vT(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new m$({ndim:4})]}computeOutputShape(e){let t,n;return e=c$(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Ui((()=>{return t=u$(e),n=this.padding,r=this.dataFormat,Ui((()=>{if(4!==t.rank)throw new vT(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new vT("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new vT(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],_c(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function DD(e,t,n,r,s,a){return Ui((()=>{let o;oE(s),lE(a),iE(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=SA(e,s);const i="same"===r?"same":"valid";return o="max"===a?Tc(e,t,n,i):Vu(e,t,n,i),"channelsFirst"===s&&(o=gu(o,[0,3,1,2])),o}))}function RD(e,t,n,r,s,a){return Ui((()=>{let o;oE(s),lE(a),iE(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=IA(e,s);const i="same"===r?"same":"valid";return o="max"===a?Ec(e,t,n,i):Wu(e,t,n,i),"channelsFirst"===s&&(o=gu(o,[0,4,1,2,3])),o}))}AD.className="ZeroPadding2D",Na.registerClass(AD);class FD extends w${constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new vT(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(VT(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new vT(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}VT(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,iE(this.padding),this.inputSpec=[new m$({ndim:3})]}computeOutputShape(e){const t=vA((e=c$(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Ui((()=>{this.invokeCallHook(e,t),e=wE(u$(e),2);const n=this.poolingFunction(u$(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return pu(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class _D extends FD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),DD(e,t,n,r,s,"max")}}_D.className="MaxPooling1D",Na.registerClass(_D);class OD extends FD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),DD(e,t,n,r,s,"avg")}}OD.className="AveragePooling1D",Na.registerClass(OD);class MD extends w${constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new vT(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];VT(this.poolSize,"poolSize"),VT(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oE(this.dataFormat),iE(this.padding),this.inputSpec=[new m$({ndim:4})]}computeOutputShape(e){e=c$(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=vA(t,this.poolSize[0],this.padding,this.strides[0]),n=vA(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Ui((()=>(this.invokeCallHook(e,t),this.poolingFunction(u$(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class LD extends MD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),DD(e,t,n,r,s,"max")}}LD.className="MaxPooling2D",Na.registerClass(LD);class zD extends MD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),DD(e,t,n,r,s,"avg")}}zD.className="AveragePooling2D",Na.registerClass(zD);class BD extends w${constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new vT(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];VT(this.poolSize,"poolSize"),VT(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oE(this.dataFormat),iE(this.padding),this.inputSpec=[new m$({ndim:5})]}computeOutputShape(e){e=c$(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=vA(t,this.poolSize[0],this.padding,this.strides[0]),n=vA(n,this.poolSize[1],this.padding,this.strides[1]),r=vA(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Ui((()=>(this.invokeCallHook(e,t),this.poolingFunction(u$(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class PD extends BD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),RD(e,t,n,r,s,"max")}}PD.className="MaxPooling3D",Na.registerClass(PD);class VD extends BD{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return oE(s),iE(r),RD(e,t,n,r,s,"avg")}}VD.className="AveragePooling3D",Na.registerClass(VD);class WD extends w${constructor(e){super(e),this.inputSpec=[new m$({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new NT}}class UD extends WD{constructor(e){super(e||{})}call(e,t){return Ui((()=>{const t=u$(e);return wu(t,1)}))}}UD.className="GlobalAveragePooling1D",Na.registerClass(UD);class GD extends WD{constructor(e){super(e||{})}call(e,t){return Ui((()=>{const t=u$(e);return su(t,1)}))}}GD.className="GlobalMaxPooling1D",Na.registerClass(GD);class HD extends w${constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,oE(this.dataFormat),this.inputSpec=[new m$({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new NT}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class qD extends HD{call(e,t){return Ui((()=>{const t=u$(e);return"channelsLast"===this.dataFormat?wu(t,[1,2]):wu(t,[2,3])}))}}qD.className="GlobalAveragePooling2D",Na.registerClass(qD);class jD extends HD{call(e,t){return Ui((()=>{const t=u$(e);return"channelsLast"===this.dataFormat?su(t,[1,2]):su(t,[2,3])}))}}jD.className="GlobalMaxPooling2D",Na.registerClass(jD);class KD extends w${constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=O$(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class XD extends KD{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=c$(e)).length<3)throw new vT(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=c$(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Ui((()=>UA(((e,n)=>[u$(this.layer.call(e,t)),[]]),e=u$(e),[],!1,null,null,!1,!0)[1]))}}XD.className="TimeDistributed",Na.registerClass(XD);class YD extends KD{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=O$(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=O$(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,BT(sE,"BidirectionalMergeMode",s),e.weights)throw new NT("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(r=s.slice(1),t=s[0]):t=s[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):$T(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=WA(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new vT("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new m$({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new NT("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof g$;for(const e of a)if(e instanceof g$!==i)throw new vT("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),r=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=s,i}return super.apply(e,t)}call(e,t){return Ui((()=>{const n=t.initialState;let r,s,a,o;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=al(s,1)),"concat"===this.mergeMode?o=SE([r,s]):"sum"===this.mergeMode?o=ul(r,s):"ave"===this.mergeMode?o=po(.5,ul(r,s)):"mul"===this.mergeMode?o=po(r,s):null==this.mergeMode&&(o=[r,s]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){cE(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),cE(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=O$(t.layer);if(delete t.layer,null!=t.numConstants)throw new NT("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}YD.className="Bidirectional",Na.registerClass(YD);var ZD,JD;oe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(ZD||(ZD={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(JD||(JD={}));var QD={};t(QD,"json",(()=>eR));const eR=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var tR={};t(tR,"json",(()=>nR));const nR=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var rR={};t(rR,"json",(()=>sR));const sR=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var aR={};t(aR,"json",(()=>oR));const oR=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var iR={};t(iR,"json",(()=>lR));const lR=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var uR={};t(uR,"json",(()=>cR));const cR=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var pR={};t(pR,"json",(()=>hR));const hR=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var dR={};t(dR,"json",(()=>fR));const fR=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var mR={};t(mR,"json",(()=>gR));const gR=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var yR={};t(yR,"json",(()=>bR));const bR=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var xR={};t(xR,"json",(()=>wR));const wR=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var kR={};t(kR,"json",(()=>vR));const vR=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var NR={};t(NR,"json",(()=>SR));const SR=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var IR={};t(IR,"json",(()=>TR));const TR=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var ER={};t(ER,"json",(()=>$R));const $R=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var CR={};t(CR,"json",(()=>AR));const AR=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var DR={};t(DR,"json",(()=>RR));const RR=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var FR={};t(FR,"json",(()=>_R));const _R=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var OR={};t(OR,"json",(()=>MR));const MR=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var LR={};class zR{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class BR{decComplexRef(e){}time(e){return PR("time")}read(e){return PR("read")}readSync(e){return PR("readSync")}numDataIds(){return PR("numDataIds")}disposeData(e){return PR("disposeData")}write(e,t,n){return PR("write")}move(e,t,n,r){return PR("move")}memory(){return PR("memory")}floatPrecision(){return PR("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return PR("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:o}){return PR("fusedBatchMatMul")}slice(e,t,n){return PR("slice")}stridedSlice(e,t,n,r){return PR("stridedSlice")}unstack(e,t){return PR("unstack")}reverse(e,t){return PR("reverse")}concat(e,t){return PR("concat")}neg(e){return PR("neg")}add(e,t){return PR("add")}addN(e){return PR("addN")}subtract(e,t){return PR("subtract")}multiply(e,t){return PR("multiply")}realDivide(e,t){return PR("realDivide")}floorDiv(e,t){return PR("floorDiv")}sum(e,t){return PR("sum")}prod(e,t){return PR("prod")}unsortedSegmentSum(e,t,n){return PR("unsortedSegmentSum")}argMin(e,t){return PR("argMin")}argMax(e,t){return PR("argMax")}equal(e,t){return PR("equal")}notEqual(e,t){return PR("notEqual")}less(e,t){return PR("less")}lessEqual(e,t){return PR("lessEqual")}greater(e,t){return PR("greater")}greaterEqual(e,t){return PR("greaterEqual")}logicalNot(e){return PR("logicalNot")}logicalAnd(e,t){return PR("logicalAnd")}logicalOr(e,t){return PR("logicalOr")}where(e){return PR("where")}select(e,t,n){return PR("select")}topk(e,t,n){return PR("topk")}min(e,t){return PR("min")}minimum(e,t){return PR("minimum")}mod(e,t){return PR("mod")}max(e,t){return PR("max")}maximum(e,t){return PR("maximum")}all(e,t){return PR("all")}any(e,t){return PR("any")}squaredDifference(e,t){return PR("squaredDifference")}ceil(e){return PR("ceil")}floor(e){return PR("floor")}round(e){return PR("round")}sign(e){return PR("sign")}isNaN(e){return PR("isNaN")}isInf(e){return PR("isInf")}isFinite(e){return PR("isFinite")}pow(e,t){return PR("pow")}exp(e){return PR("exp")}expm1(e){return PR("expm1")}softmax(e,t){return PR("softmax")}log(e){return PR("log")}log1p(e){return PR("log1p")}sqrt(e){return PR("sqrt")}rsqrt(e){return PR("rsqrt")}square(e){return PR("square")}reciprocal(e){return PR("reciprocal")}relu(e){return PR("relu")}relu6(e){return PR("relu6")}prelu(e,t){return PR("prelu")}elu(e){return PR("elu")}eluDer(e,t){return PR("eluDer")}selu(e){return PR("selu")}int(e){return PR("int")}clip(e,t,n){return PR("clip")}abs(e){return PR("abs")}complexAbs(e){return PR("complexAbs")}sigmoid(e){return PR("sigmoid")}softplus(e){return PR("softplus")}sin(e){return PR("sin")}cos(e){return PR("cos")}tan(e){return PR("tan")}asin(e){return PR("asin")}acos(e){return PR("acos")}atan(e){return PR("atan")}atan2(e,t){return PR("atan2")}sinh(e){return PR("sinh")}cosh(e){return PR("cosh")}tanh(e){return PR("tanh")}asinh(e){return PR("asinh")}acosh(e){return PR("acosh")}atanh(e){return PR("atanh")}erf(e){return PR("erf")}step(e,t){return PR("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return PR("fusedConv2d")}conv2d(e,t,n){return PR("conv2d")}conv2dDerInput(e,t,n){return PR("conv2dDerInput")}conv2dDerFilter(e,t,n){return PR("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return PR("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return PR("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return PR("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return PR("depthwiseConv2DDerFilter")}conv3d(e,t,n){return PR("conv3d")}conv3dDerInput(e,t,n){return PR("conv3dDerInput")}conv3dDerFilter(e,t,n){return PR("conv3dDerFilter")}maxPool(e,t){return PR("maxPool")}maxPoolBackprop(e,t,n,r){return PR("maxPoolBackprop")}avgPool(e,t){return PR("avgPool")}avgPoolBackprop(e,t,n){return PR("avgPoolBackprop")}avgPool3d(e,t){return PR("avgPool3d")}avgPool3dBackprop(e,t,n){return PR("avgPool3dBackprop")}maxPool3d(e,t){return PR("maxPool3d")}maxPool3dBackprop(e,t,n,r){return PR("maxPool3dBackprop")}reshape(e,t){return PR("reshape")}cast(e,t){return PR("cast")}tile(e,t){return PR("tile")}pad(e,t,n){return PR("pad")}transpose(e,t){return PR("transpose")}gather(e,t,n,r=0){return PR("gather")}gatherND(e,t){return PR("gatherND")}scatterND(e,t,n){return PR("scatterND")}batchToSpaceND(e,t,n){return PR("batchToSpaceND")}spaceToBatchND(e,t,n){return PR("spaceToBatchND")}resizeBilinear(e,t,n,r,s){return PR("resizeBilinear")}resizeBilinearBackprop(e,t,n){return PR("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r,s){return PR("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return PR("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,s,a){return PR("batchNorm")}localResponseNormalization4D(e,t,n,r,s){return PR("localResponseNormalization4D")}LRNGrad(e,t,n,r,s,a,o){return PR("LRNGrad")}multinomial(e,t,n,r){return PR("multinomial")}oneHot(e,t,n,r){return PR("oneHot")}cumsum(e,t,n,r){return PR("cumsum")}nonMaxSuppression(e,t,n,r,s){return PR("nonMaxSuppression")}fft(e){return PR("fft")}ifft(e){return PR("ifft")}complex(e,t){return PR("complex")}real(e){return PR("real")}imag(e){return PR("imag")}cropAndResize(e,t,n,r,s,a){return PR("cropAndResize")}depthToSpace(e,t,n){return PR("depthToSpace")}split(e,t,n){return PR("split")}sparseToDense(e,t,n,r){return PR("sparseToDense")}diag(e){return PR("diag")}fill(e,t,n){return PR("fill")}onesLike(e){return PR("onesLike")}zerosLike(e){return PR("zerosLike")}linspace(e,t,n){return PR("linspace")}dispose(){return PR("dispose")}}function PR(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var VR={};function WR(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function UR(e,t,n){return Math.max(e,Math.min(t,n))}function GR(e){return e%2==0?e:e+1}function HR(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function qR(e,t){const n=Math.random();return t*n+(1-n)*e}function jR(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function KR(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function XR(e,t,n=""){KR(eF(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function YR(e){KR(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ZR(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||mF(e)&&!n)for(let r=0;r<e.length;++r)ZR(e[r],t,n);else t.push(e);return t}function JR(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function QR(e){return 0===e.length}function eF(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function tF(e){return e%1==0}function nF(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function rF(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function sF(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return WR(t),t}function aF(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function oF(e,t=(e=>0),n){return new Promise(((r,s)=>{let a=0;const o=()=>{if(e())return void r();a++;const i=t(a);null!=n&&a>=n?s():setTimeout(o,i)};o()}))}function iF(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function lF(e,t){const n=t.length;return KR((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),KR(e.every((e=>tF(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function uF(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:lF(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function cF(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function pF(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function hF(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function dF(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function fF(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function mF(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function gF(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function yF(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function bF(e){return"string"==typeof e||e instanceof String}function xF(e){return"boolean"==typeof e}function wF(e){return"number"==typeof e}function kF(e){return Array.isArray(e)?kF(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":wF(e)?"float32":bF(e)?"string":xF(e)?"bool":"float32"}function vF(e){return!!(e&&e.constructor&&e.call&&e.apply)}function NF(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function SF(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function IF(e,t,n){const r=new Array;if(1===t.length){const s=t[0];for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],a=t.slice(1),o=a.reduce(((e,t)=>e*t));for(let t=0;t<s;t++)r[t]=IF(e+t*o,a,n)}return r}function TF(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return IF(0,e,t)}function EF(e,t){const n=$F(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function $F(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function CF(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return TF(e,new Float32Array(n));if("int32"===t)return TF(e,new Int32Array(n));if("bool"===t)return TF(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function AF(e){e.forEach((t=>{KR(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function DF(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function RF(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function FF(e){return e&&e.then&&"function"==typeof e.then}t(VR,"shuffle",(()=>WR)),t(VR,"clamp",(()=>UR)),t(VR,"nearestLargerEven",(()=>GR)),t(VR,"sum",(()=>HR)),t(VR,"randUniform",(()=>qR)),t(VR,"distSquared",(()=>jR)),t(VR,"assert",(()=>KR)),t(VR,"assertShapesMatch",(()=>XR)),t(VR,"arraysEqual",(()=>eF)),t(VR,"assertNonNull",(()=>YR)),t(VR,"flatten",(()=>ZR)),t(VR,"isTypedArray",(()=>mF)),t(VR,"sizeFromShape",(()=>JR)),t(VR,"isScalarShape",(()=>QR)),t(VR,"isInt",(()=>tF)),t(VR,"tanh",(()=>nF)),t(VR,"sizeToSquarishShape",(()=>rF)),t(VR,"createShuffledIndices",(()=>sF)),t(VR,"rightPad",(()=>aF)),t(VR,"repeatedTry",(()=>oF)),t(VR,"inferFromImplicitShape",(()=>iF)),t(VR,"parseAxisParam",(()=>lF)),t(VR,"squeezeShape",(()=>uF)),t(VR,"getTypedArrayFromDType",(()=>cF)),t(VR,"getArrayFromDType",(()=>pF)),t(VR,"checkConversionForErrors",(()=>hF)),t(VR,"isValidDtype",(()=>dF)),t(VR,"hasEncodingLoss",(()=>fF)),t(VR,"bytesPerElement",(()=>gF)),t(VR,"bytesFromStringArray",(()=>yF)),t(VR,"isString",(()=>bF)),t(VR,"isBoolean",(()=>xF)),t(VR,"isNumber",(()=>wF)),t(VR,"inferDtype",(()=>kF)),t(VR,"isFunction",(()=>vF)),t(VR,"nearestDivisor",(()=>NF)),t(VR,"computeStrides",(()=>SF)),t(VR,"toNestedArray",(()=>TF)),t(VR,"makeOnesTypedArray",(()=>EF)),t(VR,"makeZerosTypedArray",(()=>$F)),t(VR,"makeZerosNestedTypedArray",(()=>CF)),t(VR,"assertNonNegativeIntegerDimensions",(()=>AF)),t(VR,"locToIndex",(()=>DF)),t(VR,"indexToLoc",(()=>RF)),t(VR,"isPromise",(()=>FF));class _F{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(FF(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function OF(){return LF}let MF,LF=null;function zF(){if(null==MF){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==ce)t=ce;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}MF=t}return MF}function BF(e,t){const n=function(){const e=zF();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}var PF={};t(PF,"Abs",(()=>VF)),t(PF,"Acos",(()=>WF)),t(PF,"Acosh",(()=>UF)),t(PF,"Add",(()=>GF)),t(PF,"AddN",(()=>HF)),t(PF,"All",(()=>qF)),t(PF,"Any",(()=>jF)),t(PF,"ArgMax",(()=>KF)),t(PF,"ArgMin",(()=>XF)),t(PF,"Asin",(()=>YF)),t(PF,"Asinh",(()=>ZF)),t(PF,"Atan",(()=>JF)),t(PF,"Atanh",(()=>QF)),t(PF,"Atan2",(()=>e_)),t(PF,"AvgPool",(()=>t_)),t(PF,"AvgPoolGrad",(()=>n_)),t(PF,"AvgPool3D",(()=>r_)),t(PF,"AvgPool3DGrad",(()=>s_)),t(PF,"BatchMatMul",(()=>a_)),t(PF,"BatchToSpaceND",(()=>o_)),t(PF,"Bincount",(()=>i_)),t(PF,"BroadcastTo",(()=>l_)),t(PF,"Cast",(()=>u_)),t(PF,"Ceil",(()=>c_)),t(PF,"ClipByValue",(()=>p_)),t(PF,"Complex",(()=>h_)),t(PF,"ComplexAbs",(()=>d_)),t(PF,"Concat",(()=>f_)),t(PF,"Conv2D",(()=>m_)),t(PF,"Conv2DBackpropFilter",(()=>g_)),t(PF,"Conv2DBackpropInput",(()=>y_)),t(PF,"Conv3D",(()=>b_)),t(PF,"Conv3DBackpropFilterV2",(()=>x_)),t(PF,"Conv3DBackpropInputV2",(()=>w_)),t(PF,"Cos",(()=>k_)),t(PF,"Cosh",(()=>v_)),t(PF,"Cumsum",(()=>N_)),t(PF,"CropAndResize",(()=>S_)),t(PF,"DenseBincount",(()=>I_)),t(PF,"DepthToSpace",(()=>T_)),t(PF,"DepthwiseConv2dNative",(()=>E_)),t(PF,"DepthwiseConv2dNativeBackpropFilter",(()=>$_)),t(PF,"DepthwiseConv2dNativeBackpropInput",(()=>C_)),t(PF,"Diag",(()=>A_)),t(PF,"Dilation2D",(()=>D_)),t(PF,"Dilation2DBackpropInput",(()=>R_)),t(PF,"Dilation2DBackpropFilter",(()=>F_)),t(PF,"RealDiv",(()=>__)),t(PF,"Elu",(()=>O_)),t(PF,"EluGrad",(()=>M_)),t(PF,"Erf",(()=>L_)),t(PF,"Equal",(()=>z_)),t(PF,"Exp",(()=>B_)),t(PF,"ExpandDims",(()=>P_)),t(PF,"Expm1",(()=>V_)),t(PF,"FFT",(()=>W_)),t(PF,"Fill",(()=>U_)),t(PF,"FlipLeftRight",(()=>G_)),t(PF,"Floor",(()=>H_)),t(PF,"FloorDiv",(()=>q_)),t(PF,"FusedBatchNorm",(()=>j_)),t(PF,"GatherV2",(()=>K_)),t(PF,"GatherNd",(()=>X_)),t(PF,"Greater",(()=>Y_)),t(PF,"GreaterEqual",(()=>Z_)),t(PF,"Identity",(()=>J_)),t(PF,"IFFT",(()=>Q_)),t(PF,"Imag",(()=>eO)),t(PF,"IsFinite",(()=>tO)),t(PF,"IsInf",(()=>nO)),t(PF,"IsNan",(()=>rO)),t(PF,"LeakyRelu",(()=>sO)),t(PF,"Less",(()=>aO)),t(PF,"LessEqual",(()=>oO)),t(PF,"LinSpace",(()=>iO)),t(PF,"Log",(()=>lO)),t(PF,"Log1p",(()=>uO)),t(PF,"LogicalAnd",(()=>cO)),t(PF,"LogicalNot",(()=>pO)),t(PF,"LogicalOr",(()=>hO)),t(PF,"LogSoftmax",(()=>dO)),t(PF,"LRN",(()=>fO)),t(PF,"LRNGrad",(()=>mO)),t(PF,"Max",(()=>gO)),t(PF,"Maximum",(()=>yO)),t(PF,"MaxPool",(()=>bO)),t(PF,"MaxPoolGrad",(()=>xO)),t(PF,"MaxPool3D",(()=>wO)),t(PF,"MaxPool3DGrad",(()=>kO)),t(PF,"MaxPoolWithArgmax",(()=>vO)),t(PF,"Mean",(()=>NO)),t(PF,"Min",(()=>SO)),t(PF,"Minimum",(()=>IO)),t(PF,"MirrorPad",(()=>TO)),t(PF,"Mod",(()=>EO)),t(PF,"Multinomial",(()=>$O)),t(PF,"Multiply",(()=>CO)),t(PF,"Neg",(()=>AO)),t(PF,"NotEqual",(()=>DO)),t(PF,"NonMaxSuppressionV3",(()=>RO)),t(PF,"NonMaxSuppressionV4",(()=>FO)),t(PF,"NonMaxSuppressionV5",(()=>_O)),t(PF,"OnesLike",(()=>OO)),t(PF,"OneHot",(()=>MO)),t(PF,"Pack",(()=>LO)),t(PF,"PadV2",(()=>zO)),t(PF,"Pool",(()=>BO)),t(PF,"Pow",(()=>PO)),t(PF,"Prelu",(()=>VO)),t(PF,"Prod",(()=>WO)),t(PF,"Range",(()=>UO)),t(PF,"Real",(()=>GO)),t(PF,"Reciprocal",(()=>HO)),t(PF,"Relu",(()=>qO)),t(PF,"Reshape",(()=>jO)),t(PF,"ResizeNearestNeighbor",(()=>KO)),t(PF,"ResizeNearestNeighborGrad",(()=>XO)),t(PF,"ResizeBilinear",(()=>YO)),t(PF,"ResizeBilinearGrad",(()=>ZO)),t(PF,"Relu6",(()=>JO)),t(PF,"Reverse",(()=>QO)),t(PF,"Round",(()=>eM)),t(PF,"Rsqrt",(()=>tM)),t(PF,"ScatterNd",(()=>nM)),t(PF,"Select",(()=>rM)),t(PF,"Selu",(()=>sM)),t(PF,"Slice",(()=>aM)),t(PF,"Sin",(()=>oM)),t(PF,"Sinh",(()=>iM)),t(PF,"Sign",(()=>lM)),t(PF,"Sigmoid",(()=>uM)),t(PF,"Softplus",(()=>cM)),t(PF,"Sqrt",(()=>pM)),t(PF,"Sum",(()=>hM)),t(PF,"SpaceToBatchND",(()=>dM)),t(PF,"SplitV",(()=>fM)),t(PF,"Softmax",(()=>mM)),t(PF,"SquaredDifference",(()=>gM)),t(PF,"Square",(()=>yM)),t(PF,"Sub",(()=>bM)),t(PF,"SparseToDense",(()=>xM)),t(PF,"StridedSlice",(()=>wM)),t(PF,"Tan",(()=>kM)),t(PF,"Tanh",(()=>vM)),t(PF,"Tile",(()=>NM)),t(PF,"TopK",(()=>SM)),t(PF,"Transpose",(()=>IM)),t(PF,"Unique",(()=>TM)),t(PF,"Unpack",(()=>EM)),t(PF,"UnsortedSegmentSum",(()=>$M)),t(PF,"ZerosLike",(()=>CM)),t(PF,"Step",(()=>AM)),t(PF,"FromPixels",(()=>DM)),t(PF,"RotateWithOffset",(()=>RM)),t(PF,"_FusedMatMul",(()=>FM)),t(PF,"FusedConv2D",(()=>_M)),t(PF,"FusedDepthwiseConv2D",(()=>OM));const VF="Abs",WF="Acos",UF="Acosh",GF="Add",HF="AddN",qF="All",jF="Any",KF="ArgMax",XF="ArgMin",YF="Asin",ZF="Asinh",JF="Atan",QF="Atanh",e_="Atan2",t_="AvgPool",n_="AvgPoolGrad",r_="AvgPool3D",s_="AvgPool3DGrad",a_="BatchMatMul",o_="BatchToSpaceND",i_="Bincount",l_="BroadcastTo",u_="Cast",c_="Ceil",p_="ClipByValue",h_="Complex",d_="ComplexAbs",f_="Concat",m_="Conv2D",g_="Conv2DBackpropFilter",y_="Conv2DBackpropInput",b_="Conv3D",x_="Conv3DBackpropFilterV2",w_="Conv3DBackpropInputV2",k_="Cos",v_="Cosh",N_="Cumsum",S_="CropAndResize",I_="DenseBincount",T_="DepthToSpace",E_="DepthwiseConv2dNative",$_="DepthwiseConv2dNativeBackpropFilter",C_="DepthwiseConv2dNativeBackpropInput",A_="Diag",D_="Dilation2D",R_="Dilation2DBackpropInput",F_="Dilation2DBackpropFilter",__="RealDiv",O_="Elu",M_="EluGrad",L_="Erf",z_="Equal",B_="Exp",P_="ExpandDims",V_="Expm1",W_="FFT",U_="Fill",G_="FlipLeftRight",H_="Floor",q_="FloorDiv",j_="FusedBatchNorm",K_="GatherV2",X_="GatherNd",Y_="Greater",Z_="GreaterEqual",J_="Identity",Q_="IFFT",eO="Imag",tO="IsFinite",nO="IsInf",rO="IsNan",sO="LeakyRelu",aO="Less",oO="LessEqual",iO="LinSpace",lO="Log",uO="Log1p",cO="LogicalAnd",pO="LogicalNot",hO="LogicalOr",dO="LogSoftmax",fO="LRN",mO="LRNGrad",gO="Max",yO="Maximum",bO="MaxPool",xO="MaxPoolGrad",wO="MaxPool3D",kO="MaxPool3DGrad",vO="MaxPoolWithArgmax",NO="Mean",SO="Min",IO="Minimum",TO="MirrorPad",EO="Mod",$O="Multinomial",CO="Multiply",AO="Neg",DO="NotEqual",RO="NonMaxSuppressionV3",FO="NonMaxSuppressionV4",_O="NonMaxSuppressionV5",OO="OnesLike",MO="OneHot",LO="Pack",zO="PadV2",BO="Pool",PO="Pow",VO="Prelu",WO="Prod",UO="Range",GO="Real",HO="Reciprocal",qO="Relu",jO="Reshape",KO="ResizeNearestNeighbor",XO="ResizeNearestNeighborGrad",YO="ResizeBilinear",ZO="ResizeBilinearGrad",JO="Relu6",QO="Reverse",eM="Round",tM="Rsqrt",nM="ScatterNd",rM="Select",sM="Selu",aM="Slice",oM="Sin",iM="Sinh",lM="Sign",uM="Sigmoid",cM="Softplus",pM="Sqrt",hM="Sum",dM="SpaceToBatchND",fM="SplitV",mM="Softmax",gM="SquaredDifference",yM="Square",bM="Sub",xM="SparseToDense",wM="StridedSlice",kM="Tan",vM="Tanh",NM="Tile",SM="TopK",IM="Transpose",TM="Unique",EM="Unpack",$M="UnsortedSegmentSum",CM="ZerosLike",AM="Step",DM="FromPixels",RM="RotateWithOffset",FM="_FusedMatMul",_M="FusedConv2D",OM="FusedDepthwiseConv2D";var MM={};t(MM,"getKernel",(()=>BM)),t(MM,"getGradient",(()=>PM)),t(MM,"getKernelsForBackend",(()=>VM)),t(MM,"registerKernel",(()=>WM)),t(MM,"registerGradient",(()=>UM)),t(MM,"unregisterKernel",(()=>GM)),t(MM,"unregisterGradient",(()=>HM)),t(MM,"copyRegisteredKernels",(()=>qM));const LM=BF("kernelRegistry",(()=>new Map)),zM=BF("gradRegistry",(()=>new Map));function BM(e,t){const n=jM(e,t);return LM.get(n)}function PM(e){return zM.get(e)}function VM(e){const t=LM.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function WM(e){const{kernelName:t,backendName:n}=e,r=jM(t,n);LM.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),LM.set(r,e)}function UM(e){const{kernelName:t}=e;zM.has(t)&&OF().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),zM.set(t,e)}function GM(e,t){const n=jM(e,t);if(!LM.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);LM.delete(n)}function HM(e){if(!zM.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);zM.delete(e)}function qM(e,t){VM(e).forEach((e=>{WM(Object.assign({},e,{backendName:t}))}))}function jM(e,t){return`${t}_${e}`}var KM={};function XM(e,t){return"string"===t?QM(e):YM([e],t)}function YM(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ZR(e)),OF().getBool("DEBUG")&&hF(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function ZM(){return OF().platform.now()}function JM(e,t){return OF().platform.fetch(e,t)}function QM(e,t="utf-8"){return t=t||"utf-8",OF().platform.encode(e,t)}function eL(e,t="utf-8"){return t=t||"utf-8",OF().platform.decode(e,t)}t(KM,"createScalarValue",(()=>XM)),t(KM,"encodeString",(()=>QM)),t(KM,"toTypedArray",(()=>YM)),t(KM,"now",(()=>ZM)),t(KM,"fetch",(()=>JM)),t(KM,"decodeString",(()=>eL)),n(KM,VR);class tL{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new rL)}profileKernel(e,t,n){let r;const s=this.backendTimer.time((()=>{r=n()}));if(OF().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{nL(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function nL(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class rL{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?aF(`${r}ms`,9):r.error,i=aF(e,25),l=t.rank,u=t.size,c=aF(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function sL(e,t,n,r){const s=SF(t),a=function(e,t,n,r){const s=JR(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?lL(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],aL(l[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=iL(e,t,n,s,a),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function aL(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:bF(e)?`'${e}'`:"bool"===n?oL(e):parseFloat(e.toFixed(7)).toString(),aF(r,t)}function oL(e){return 0===e?"false":"true"}function iL(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[aL(lL(e)[0],0,n)]}return"bool"===n?[oL(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=lL(r),a=lL(a)),["["+r.map(((e,t)=>aL(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>aL(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?lL(e):Array.from(e)).map(((e,t)=>aL(e,s[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,a=r+p;h.push(...iL(e.slice(r,a),u,n,c,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,a=r+p;h.push(...iL(e.slice(r,a),u,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...iL(e.slice(r,a),u,n,c,s,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function lL(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class uL{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=JR(e),null!=n){const e=n.length;KR(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||pF(t,this.size),this.strides=SF(e)}set(e,...t){0===t.length&&(t=[0]),KR(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return cL().makeTensor(this.values,this.shape,this.dtype)}}let cL=null,pL=null,hL=null;class dL{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=JR(e),this.strides=SF(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return pL.buffer(this.shape,this.dtype,e)}bufferSync(){return pL.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return TF(this.shape,e)}arraySync(){return TF(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=cL().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>eL(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=cL().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>eL(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await cL().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(cL().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return pL.print(this,e)}clone(){return this.throwIfDisposed(),pL.clone(this)}toString(e=!1){return sL(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),pL.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),cL().makeVariable(this,e,t,n)}}Object.defineProperty(dL,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class fL extends dL{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!eF(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);cL().disposeTensor(this),this.dataId=e.dataId,cL().incRef(this,null)}dispose(){cL().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(fL,Symbol.hasInstance,{value:e=>e instanceof dL&&null!=e.assign&&e.assign instanceof Function});var mL,gL,yL,bL,xL,wL={};t(wL,"makeTypesMatch",(()=>SL)),t(wL,"assertTypesMatch",(()=>IL)),t(wL,"isTensorInList",(()=>TL)),t(wL,"getTensorsInContainer",(()=>EL)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(mL||(mL={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(gL||(gL={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(yL||(yL={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(bL||(bL={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(xL||(xL={}));const kL={float32:bL,int32:gL,bool:yL,complex64:xL};function vL(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return kL[e][t]}function NL(e){return vL(e,"int32")}function SL(e,t){if(e.dtype===t.dtype)return[e,t];const n=vL(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function IL(e,t){KR(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function TL(e,t){return t.some((t=>t.id===e.id))}function EL(e){const t=[];return $L(e,t,new Set),t}function $L(e,t,n){if(null==e)return;if(e instanceof dL)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),$L(r,t,n))}}class CL{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class AL{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new CL}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new tL(this.backendInstance),!0}setupRegisteredKernels(){VM(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){VM(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof BR||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return AL.nextTensorId++}nextVariableId(){return AL.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},r={dtype:t};return RL.runKernelFunc((n=>n.cast(e,t)),n,null,u_,r)}})),[],{}),t}runKernel(e,t,n,r,s){return this.runKernelFunc(null,t,null,e,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,s,a,o){let i,l=[];const u=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,p=this.state.numTensors;let h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const d=BM(r,this.backendName);let f,m;if(null!=d)h=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const i=n.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(u){let e=this.getTensorsForGradient(r,t,i);if(null==e){null==o&&(o=[]);const t=i.filter(((e,t)=>o[t]));e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return i};else{if(null==e)throw new Error(`Error running ${r}: Neither modular kernel nor forward func passed`);const t=e=>{u&&(l=e.map((e=>this.keep(this.clone(e)))))};h=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>e(this.backend,t)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,t,(()=>h())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),i=m.outputs):i=h()})),u&&this.addTapeNode(r,t,i,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:i.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?i:i[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=PM(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(KR(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&bF(e[0])&&(s=e.map((e=>QM(e))));const a=r.write(s,t,n),o=new dL(t,n,a,this.nextTensorId());if(this.incRef(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=yF(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s=new dL(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new fL(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*gF(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof fL||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=PM(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=$F(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=EL(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(KR(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));KR(s instanceof dL,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=EF(JR(e),"float32");return RL.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!eF(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),FL);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return KR(vF(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;KR(t.every((e=>e instanceof dL)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc(((r,s)=>(n=e(...t,s),KR(n.value instanceof dL,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),KR(vF(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];KR(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),KR(a.every((e=>e instanceof dL)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=ZM(),n=await this.backend.time(e);return n.wallMs=ZM()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new CL;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function DL(){const e=zF();if(null==e._tfengine){const t=new _F(e);e._tfengine=new AL(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,LF=t,function(e){cL=e}((()=>e._tfengine)),e._tfengine}AL.nextTensorId=0,AL.nextVariableId=0;const RL=DL();function FL(e,t){const n={a:e,b:t};return RL.runKernel(GF,n)}var _L={};function OL(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function ML(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(_L,"isMobile",(()=>OL)),t(_L,"isBrowser",(()=>ML));const LL=OF();function zL(e,t){let n=e;if(mF(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||mF(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&OF().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&BL(e,r,[]),r}function BL(e,t,n){if(n=n||[],!Array.isArray(e)&&!mF(e))return void KR(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));KR(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),KR(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)BL(e[t],r,n.concat(t))}function PL(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function VL(e,t,n,r="numeric"){if(e instanceof dL)return PL(r,e.dtype,t,n),e;let s=kF(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),PL(r,s,t,n),null==e||!mF(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=zL(e,s);mF(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?YM(e,s):ZR(e,[],!0);return RL.makeTensor(o,a,s)}function WL(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>VL(e,`${t}[${s}]`,n,r)))}LL.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),LL.registerFlag("IS_BROWSER",(()=>ML())),LL.registerFlag("IS_NODE",(()=>void 0!==ce&&void 0!==ce.versions&&void 0!==ce.versions.node)),LL.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),LL.registerFlag("PROD",(()=>!1)),LL.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>LL.getBool("DEBUG"))),LL.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),LL.registerFlag("IS_TEST",(()=>!1)),LL.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));function UL(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{RL.startScope(n);try{const t=r(...e);return FF(t)&&console.error("Cannot return a Promise inside of tidy."),RL.endScope(t),t}catch(e){throw RL.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const GL=UL({complex_:function(e,t){const n=VL(e,"real","complex"),r=VL(t,"imag","complex");XR(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return RL.runKernel(h_,s)}});function HL(e,t,n,r){if(null==r&&(r=kF(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!mF(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){AF(t);const e=JR(t),r=JR(n);KR(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==JR(t.slice(e));KR(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return mF(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?YM(e,r):ZR(e,[],!0),RL.makeTensor(e,t,r)}function qL(e,t,n){return HL(e,t,zL(e,n),n)}const jL={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var KL=Dn;async function XL(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:ZL(await Promise.all(r)),specs:n}}function YL(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,l=JR(i);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=jL[n.dtype],c=e.slice(s,s+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=rz()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}s+=l*i}else if("string"===o){const t=JR(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=jL[o],a=e.slice(s,s+l*r);if("float32"===o)u=new Float32Array(a);else if("int32"===o)u=new Int32Array(a);else if("bool"===o)u=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=qL(e,i,"float32"),o=qL(r,i,"float32");n[t]=GL(s,o),s.dispose(),o.dispose()}}s+=l*r}"complex64"!==o&&(n[t]=qL(u,i,o))}return n}function ZL(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const JL=void 0!==KL&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function QL(e){return JL?KL.byteLength(e):new Blob([e]).size}function ez(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function tz(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function nz(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:QL(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:QL(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function rz(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class sz{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==sz.instance&&(sz.instance=new sz),sz.instance}static registerSaveRouter(e){sz.getInstance().saveRouters.push(e)}static registerLoadRouter(e){sz.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return sz.getHandlers(e,"save")}static getLoadHandlers(e,t){return sz.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?sz.getInstance().loadRouters:sz.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const az=e=>sz.registerSaveRouter(e),oz=e=>sz.registerLoadRouter(e),iz=e=>sz.getSaveHandlers(e),lz=(e,t)=>sz.getLoadHandlers(e,t);function uz(){if(!OF().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function cz(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class pz{constructor(e){if(this.indexedDB=uz(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>cz(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=nz(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=s.transaction("models_store","readwrite");const i=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}pz.URL_SCHEME="indexeddb://";const hz=e=>{return OF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(pz.URL_SCHEME)?(t=e.slice(pz.URL_SCHEME.length),new pz(t)):null;var t};sz.registerSaveRouter(hz),sz.registerLoadRouter(hz);class dz{constructor(){this.indexedDB=uz()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>cz(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(pz.URL_SCHEME)?t.slice(pz.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>cz(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const fz="tensorflowjs_models",mz="info",gz="model_topology",yz="weight_specs",bz="weight_data",xz="model_metadata";function wz(e){return{info:[fz,e,mz].join("/"),topology:[fz,e,gz].join("/"),weightSpecs:[fz,e,yz].join("/"),weightData:[fz,e,bz].join("/"),modelMetadata:[fz,e,xz].join("/")}}function kz(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class vz{constructor(e){if(!OF().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=wz(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=nz(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(JL)return KL.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(JL){const t=KL.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}vz.URL_SCHEME="localstorage://";const Nz=e=>{return OF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(vz.URL_SCHEME)?(t=e.slice(vz.URL_SCHEME.length),new vz(t)):null;var t};sz.registerSaveRouter(Nz),sz.registerLoadRouter(Nz);class Sz{constructor(){KR(OF().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),KR("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=fz+"/",n="/"+mz;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[kz(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=wz(e=(t=e).startsWith(vz.URL_SCHEME)?t.slice(vz.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}class Iz{constructor(){this.managers={}}static getInstance(){return null==Iz.instance&&(Iz.instance=new Iz),Iz.instance}static registerManager(e,t){KR(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),KR(e.length>0,(()=>"scheme must not be an empty string."));const n=Iz.getInstance();KR(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Tz(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Iz.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function Ez(e,t,n=!1){KR(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=sz.getLoadHandlers(e);KR(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),KR(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=sz.getSaveHandlers(t);KR(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),KR(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=Tz(e).scheme,l=Tz(e).path,u=i===Tz(e).scheme,c=await s.load();n&&u&&await Iz.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await Iz.getManager(i).removeModel(l),p.modelArtifactsInfo}async function $z(){const e=Iz.getSchemes(),t={};for(const n of e){const e=await Iz.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function Cz(e){const t=Tz(e);return Iz.getManager(t.scheme).removeModel(t.path)}async function Az(e,t){return Ez(e,t,!1)}async function Dz(e,t){return Ez(e,t,!0)}class Rz{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(OF().get("IS_BROWSER")){OF().setPlatform("browser",new Rz);try{Iz.registerManager(vz.URL_SCHEME,new Sz)}catch(e){}try{Iz.registerManager(pz.URL_SCHEME,new dz)}catch(e){}}const Fz=()=>a("kjyEk");let _z;function Oz(e,t="float32",n){return t=t||"float32",AF(e),new uL(e,t,n)}OF().get("IS_NODE")&&OF().setPlatform("node",new class{constructor(){this.util=a("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=OF().global.fetch?OF().global.fetch(e,t):(null==_z&&(_z=Fz()),_z(e,t))}now(){const e=ce.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Mz=UL({cast_:function(e,t){const n=VL(e,"x","cast");if(!dF(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return RL.runKernel(u_,r,s)}});const Lz=UL({clone_:function(e){const t={x:VL(e,"x","clone","string_or_numeric")};return RL.runKernel(J_,t)}});function zz(e,t=!1){console.log(e.toString(t))}DL();!function(e){pL=e}({buffer:Oz,cast:Mz,clone:Lz,print:zz});const Bz=UL({mul_:function(e,t){let n=VL(e,"a","mul"),r=VL(t,"b","mul");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(CO,s)}});const Pz=UL({step_:function(e,t=0){const n={x:VL(e,"x","step")},r={alpha:t};return RL.runKernel(AM,n,r)}}),Vz={kernelName:VF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,Pz(Mz(n,"float32"),-1))}}};const Wz=UL({floorDiv_:function(e,t){let n=VL(e,"a","floorDiv"),r=VL(t,"b","floorDiv");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(q_,s)}});const Uz=UL({div_:function(e,t){let n=VL(e,"a","div"),r=VL(t,"b","div");if([n,r]=SL(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Wz(n,r);const s={a:n,b:r};return RL.runKernel(__,s,{})}});const Gz=UL({neg_:function(e){const t={x:VL(e,"x","neg")};return RL.runKernel(AO,t)}});function Hz(e,t){if((mF(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&mF(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return HL(e,[],[],t)}const qz=UL({sqrt_:function(e){const t={x:VL(e,"x","sqrt")};return RL.runKernel(pM,t)}});const jz=UL({square_:function(e){const t=VL(e,"x","square");return RL.runKernel("Square",{x:t},{})}});const Kz=UL({sub_:function(e,t){let n=VL(e,"a","sub"),r=VL(t,"b","sub");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(bM,s)}}),Xz={kernelName:WF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=jz(Mz(n,"float32")),r=qz(Kz(Hz(1),t));return Gz(Uz(e,r))}}}},Yz={kernelName:UF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=qz(Kz(jz(Mz(n,"float32")),1));return Uz(e,t)}}}};var Zz={};function Jz(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function Qz(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function eB(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(Zz,"getBroadcastDims",(()=>Jz)),t(Zz,"getReductionAxes",(()=>Qz)),t(Zz,"assertAndGetBroadcastShape",(()=>eB));const tB=UL({reshape_:function(e,t){const n={x:VL(e,"x","reshape","string_or_numeric")},r={shape:t};return RL.runKernel(jO,n,r)}});const nB=UL({sum_:function(e,t=null,n=!1){let r=VL(e,"x","sum");"bool"===r.dtype&&(r=Mz(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return RL.runKernel(hM,s,a)}}),rB={kernelName:GF,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{let t=e;const r=Qz(n.shape,s);return r.length>0&&(t=nB(t,r)),tB(t,n.shape)},b:()=>{let t=e;const n=Qz(r.shape,s);return n.length>0&&(t=nB(t,n)),tB(t,r.shape)}}}},sB={kernelName:HF,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}};const aB=UL({zerosLike_:function(e){const t={x:VL(e,"x","zerosLike")};return RL.runKernel(CM,t)}}),oB={kernelName:KF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>aB(n)}}},iB={kernelName:XF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>aB(n)}}},lB={kernelName:YF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,qz(Kz(Hz(1),jz(Mz(n,"float32")))))}}};const uB=UL({add_:function(e,t){let n=VL(e,"a","add"),r=VL(t,"b","add");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(GF,s)}}),cB={kernelName:ZF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=qz(uB(Hz(1),jz(Mz(n,"float32"))));return Uz(e,t)}}}},pB={kernelName:e_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{const t=uB(jz(n),jz(r));let a=Bz(e,Uz(r,t));const o=Qz(n.shape,s);return o.length>0&&(a=nB(a,o)),tB(a,n.shape)},b:()=>{const t=uB(jz(n),jz(r));let a=Gz(Bz(e,Uz(n,t)));const o=Qz(r.shape,s);return o.length>0&&(a=nB(a,o)),tB(a,r.shape)}}}},hB={kernelName:JF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,uB(jz(Mz(n,"float32")),1))}}},dB={kernelName:QF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,Kz(Hz(1),jz(Mz(n,"float32"))))}}};var fB={};function mB(e,t,n,r,s="NHWC",a){return bB(e,[...t,e[3]],n,a,r,null,null,EB(s))}function gB(e,t,n,r,s,a,o="channelsLast"){const[i,l]=kB(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return bB(e,u,n,r,s,a,!1,o)}function yB(e,t,n,r,s,a,o="NDHWC"){const[i,l,u]=vB(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return xB(e,c,n,r,s,!1,p,a)}function bB(e,t,n,r,s,a,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=kB(n),[y,b]=kB(r),x=NB(h,y),w=NB(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,s,a,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=wB(e,t,n));const a=e[0],o=e[1],i=SB((a-t+2*r)/n+1,s),l=SB((o-t+2*r)/n+1,s);return[i,l]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=SB((t-a+h+d)/r+1,i),p=SB((n-o+f+m)/s+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(s,u,c,m,g,x,w,a,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function xB(e,t,n,r,s,a=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=vB(n),[w,k,v]=vB(r),N=NB(d,w),S=NB(f,k),I=NB(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,s,a,o,i,l,u,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=wB(e,t,r));const o=e[0],i=e[1],l=e[2],u=SB((o-t+2*s)/r+1,a),c=SB((i-t+2*s)/r+1,a),p=SB((l-t+2*s)/r+1,a);return[u,c,p,n]}([t,n,r,1],i,1,s,e,c);h=a[0],d=a[1],f=a[2]}else if("same"===e){h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,u,c,p,y,b,x,N,S,I,i),A=a?g*h:g;let D;return"channelsFirst"===o?D=[l,A,E,$,C]:"channelsLast"===o&&(D=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:D,filterShape:t}}function wB(e,t,n,r=1){const s=NB(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function kB(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function vB(e){return"number"==typeof e?[e,e,e]:e}function NB(e,t){return t<=1?e:e+(e-1)*(t-1)}function SB(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function IB(e){const[t,n,r]=kB(e);return 1===t&&1===n&&1===r}function TB(e,t){return IB(e)||IB(t)}function EB(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}t(fB,"computeDilation2DInfo",(()=>mB)),t(fB,"convertConv2DDataFormat",(()=>EB)),t(fB,"computeConv2DInfo",(()=>bB)),t(fB,"computePool2DInfo",(()=>gB)),t(fB,"computePool3DInfo",(()=>yB)),t(fB,"computeConv3DInfo",(()=>xB)),t(fB,"computeDefaultPad",(()=>wB)),t(fB,"tupleValuesAreOne",(()=>IB)),t(fB,"eitherStridesOrDilationsAreOne",(()=>TB));const $B=UL({avgPool3dGrad_:function(e,t,n,r,s=[1,1,1],a,o){const i=VL(e,"dy","avgPool3dGrad"),l=VL(t,"input","avgPool3dGrad");let u=i,c=l,p=!1;4===l.rank&&(p=!0,u=tB(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=tB(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),KR(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),KR(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),KR(TB(r,s),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=o&&KR(tF(a),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const h={dy:u,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:o},f=RL.runKernel(s_,h,d);return p?tB(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),CB={kernelName:r_,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,dilations:o,pad:i,dimRoundingMode:l}=n,u=null==o?[1,1,1]:o;return{x:()=>$B(e,r,s,a,u,i,l)}}};const AB=UL({avgPoolGrad_:function(e,t,n,r,s){const a=VL(e,"dy","avgPoolGrad"),o=VL(t,"input","avgPoolGrad");KR(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=tB(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=tB(a,[1,a.shape[0],a.shape[1],a.shape[2]])),KR(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),KR(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},p={filterSize:n,strides:r,pad:s},h=RL.runKernel(n_,c,p);return u?tB(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),DB={kernelName:t_,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>AB(e,r,s,a,o)}}};const RB=UL({matMul_:function(e,t,n=!1,r=!1){let s=VL(e,"a","matMul"),a=VL(t,"b","matMul");[s,a]=SL(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return RL.runKernel(a_,o,i)}}),FB={kernelName:a_,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>RB(e,s,!1,!1),b:()=>RB(e,r,!0,!1)}:a&&!o?{a:()=>RB(s,e,!1,!0),b:()=>RB(r,e,!1,!1)}:{a:()=>RB(s,e,!0,!0),b:()=>RB(e,r,!0,!0)}:{a:()=>RB(e,s,!1,!0),b:()=>RB(r,e,!0,!1)}}};const _B=UL({spaceToBatchND_:function(e,t,n){const r=VL(e,"x","spaceToBatchND");KR(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),KR(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),KR(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return RL.runKernel(dM,s,a)}}),OB={kernelName:o_,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>_B(e,r,s)}}},MB={kernelName:l_,gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>nB(e,i,!0)}}},LB={kernelName:u_,gradFunc:e=>({x:()=>e.clone()})},zB={kernelName:c_,gradFunc:e=>({x:()=>aB(e)})};const BB=UL({greaterEqual_:function(e,t){let n=VL(e,"a","greaterEqual"),r=VL(t,"b","greaterEqual");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(Z_,s)}});const PB=UL({lessEqual_:function(e,t){let n=VL(e,"a","lessEqual"),r=VL(t,"b","lessEqual");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(oO,s)}});const VB=UL({logicalAnd_:function(e,t){const n=VL(e,"a","logicalAnd","bool"),r=VL(t,"b","logicalAnd","bool");eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(cO,s)}});const WB=UL({broadcastTo_:function(e,t){let n=VL(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=tB(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Lz(n);const o={x:n},i={reps:a};return RL.runKernel(NM,o,i)}});const UB=UL({where_:function(e,t,n){const r=VL(t,"a","where"),s=VL(n,"b","where"),a=VL(e,"condition","where","bool"),o=eB(r.shape,s.shape),i=WB(r,o),l=WB(s,o);1===a.rank&&KR(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&XR(a.shape,l.shape,"Error in where: ");const u={condition:a,t:i,e:l};return RL.runKernel(rM,u)}}),GB={kernelName:p_,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>UB(VB(BB(r,s),PB(r,a)),e,aB(e))}}},HB={kernelName:d_,inputsToSave:["x"],gradFunc:Vz.gradFunc};const qB=UL({split_:function(e,t,n=0){const r={x:VL(e,"x","split")},s={numOrSizeSplits:t,axis:n};return RL.runKernel(fM,r,s)}}),jB={kernelName:f_,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=lF(s,t[0].shape)[0],o=r.map((e=>e[a]));return qB(e,o,a).map((e=>()=>e))}};const KB=UL({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=tB(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=tB(t,[1,t.shape[0],t.shape[1],t.shape[2]])),KR(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),KR(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),KR(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];KR(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),KR(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=o&&KR(tF(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const p={x:i,dy:l},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return RL.runKernel(g_,p,h)}});const XB=UL({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){KR(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=tB(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),KR(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),KR(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),KR(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?l.shape[3]:l.shape[1];KR(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),KR(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=o&&KR(tF(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const h={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=RL.runKernel(y_,h,d);return u?tB(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),YB={kernelName:m_,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return KR(IB(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>XB(r.shape,e,s,o,i,l),filter:()=>KB(r,e,s.shape,o,i,l)}}};const ZB=UL({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=VL(e,"x","conv2d"),l=VL(t,"filter","conv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=tB(i,[1,i.shape[0],i.shape[1],i.shape[2]])),KR(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),KR(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=o&&KR(tF(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const p="NHWC"===s?u.shape[3]:u.shape[1];KR(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),KR(TB(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=RL.runKernel(m_,h,d);return c?tB(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),JB={kernelName:y_,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>ZB(e,s,a,o,i,1,l),filter:()=>KB(e,r,s.shape,a,o,i,l)}}};const QB=UL({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=tB(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=tB(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),KR(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),KR(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),KR(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),KR(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),KR(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:r,pad:s,filterShape:n};return RL.runKernel(x_,i,l)}});const eP=UL({conv3DBackpropInput_:function(e,t,n,r,s){KR(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=tB(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];KR(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),KR(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),KR(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),KR(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),KR(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=RL.runKernel(w_,c,p);return i?tB(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),tP={kernelName:b_,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;KR(IB(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>eP(o.shape,e,i,s,a),filter:()=>QB(o,e,i.shape,s,a)}}};const nP=UL({sin_:function(e){const t={x:VL(e,"x","sin")};return RL.runKernel(oM,t)}}),rP={kernelName:k_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(Gz(nP(Mz(n,"float32"))),e)}}};const sP=UL({sinh_:function(e){const t={x:VL(e,"x","sinh")};return RL.runKernel(iM,t)}}),aP={kernelName:v_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(sP(Mz(n,"float32")),e)}}};var oP={};function iP(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function lP(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function uP(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function cP(e,t){return lP(e,t.map((e=>1)),t)}function pP(e,t,n){KR(iP(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function hP(e,t){if(iP(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function dP(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function fP(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(oP,"axesAreInnerMostDims",(()=>iP)),t(oP,"combineLocations",(()=>lP)),t(oP,"computeOutAndReduceShapes",(()=>uP)),t(oP,"expandShapeToKeepDim",(()=>cP)),t(oP,"assertAxesAreInnerMostDims",(()=>pP)),t(oP,"getAxesPermutation",(()=>hP)),t(oP,"getUndoAxesPermutation",(()=>dP)),t(oP,"getInnerMostAxes",(()=>fP));const mP=UL({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:VL(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return RL.runKernel(N_,s,a)}});var gP={};t(gP,"transpose",(()=>yP));const yP=UL({transpose_:function(e,t){const n=VL(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),KR(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{KR(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return RL.runKernel(IM,r,s)}}),bP={kernelName:N_,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=hP([s],r.rank);let n=mP(e,s,a,!o);return null!=t&&(n=yP(n,t)),n}}}};const xP=UL({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=tB(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=tB(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return RL.runKernel($_,u,c)}});const wP=UL({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=tB(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=RL.runKernel(C_,u,c);return l?tB(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),kP={kernelName:E_,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;KR(IB(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return KR(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),KR(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),KR(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),KR(TB(s,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`)),null!=o&&KR(tF(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`)),{x:()=>wP(l.shape,e,u,s,a,r,o),filter:()=>xP(l,e,u.shape,s,a,r,o)}}},vP={kernelName:D_,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>RL.runKernel(R_,a,n),filter:()=>RL.runKernel(F_,o,n)}}},NP={kernelName:O_,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>RL.runKernel(M_,r)}}};const SP=UL({exp_:function(e){const t={x:VL(e,"x","exp")};return RL.runKernel(B_,t)}}),IP={kernelName:L_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Bz(SP(Gz(jz(n))),2/Math.sqrt(Math.PI));return{x:()=>Bz(e,r)}}},TP={kernelName:B_,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,n)}}},EP={kernelName:P_,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>tB(e,n.shape)}}},$P={kernelName:V_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,SP(n))}}},CP={kernelName:H_,gradFunc:e=>({x:()=>aB(e)})},AP={kernelName:q_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{const t=Uz(e,Mz(r,"float32")),a=Qz(n.shape,s);return a.length>0?tB(nB(t,a),n.shape):t},b:()=>{let t=Bz(e,Mz(n,"float32"));const a=Qz(r.shape,s);a.length>0&&(t=tB(nB(t,a),r.shape));const o=jz(r);return Gz(Uz(t,Mz(o,"float32")))}}}};const DP=UL({rsqrt_:function(e){const t={x:VL(e,"x","rsqrt")};return RL.runKernel(tM,t)}});const RP=UL({tile_:function(e,t){const n=VL(e,"x","tile","string_or_numeric");KR(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return RL.runKernel(NM,r,s)}}),FP={kernelName:j_,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,l=null==i?Hz(1):i,u=Qz(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=Kz(s,a),h=Bz(e,l),d=DP(uB(o,Hz(r))),f=Bz(Bz(Bz(d,d),d),Hz(-.5));return{x:()=>1===a.rank?tB(Bz(Bz(e,RP(tB(d,[1,1,1,a.shape[0]]),c)),l),s.shape):tB(Bz(Bz(e,d),l),s.shape),mean:()=>{let e=Bz(Bz(d,Hz(-1)),h);return 1===a.rank&&(e=nB(e,u)),tB(e,a.shape)},variance:()=>{let e=Bz(Bz(f,p),h);return 1===a.rank&&(e=nB(e,u)),tB(e,a.shape)},scale:()=>{const t=Bz(p,d);let n=Bz(e,t);return 1===a.rank&&(n=nB(n,u)),tB(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=nB(t,u)),tB(t,a.shape)}}}};const _P=UL({unsortedSegmentSum_:function(e,t,n){const r=VL(e,"x","unsortedSegmentSum"),s=VL(t,"segmentIds","unsortedSegmentSum","int32");KR(tF(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return RL.runKernel($M,a,o)}}),OP={kernelName:K_,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=lF(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),l=i.length,u=t.slice(a,t.length).slice(1),c=u.length,p=MP(0,l),h=MP(l+1,l+1+c),d=LP([i,[n],u]),f=tB(e,d),m=tB(s,[n]),g=LP([[l],p,h]),y=yP(f,g);let b=_P(y,m,r.shape[o]);const x=dP(g);return b=yP(b,x),b},indices:()=>s}}};function MP(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function LP(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const zP={kernelName:Z_,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>aB(n),b:()=>aB(r)}}},BP={kernelName:J_,gradFunc:e=>({x:()=>Mz(e,"float32")})},PP={kernelName:tO,gradFunc:e=>({x:()=>aB(e)})},VP={kernelName:nO,gradFunc:e=>({x:()=>aB(e)})},WP={kernelName:rO,gradFunc:e=>({x:()=>aB(e)})};const UP=UL({greater_:function(e,t){let n=VL(e,"a","greater"),r=VL(t,"b","greater");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(Y_,s)}}),GP={kernelName:sO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=UP(r,0);return{x:()=>UB(a,e,Bz(e,s))}}},HP={kernelName:uO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,uB(n,1))}}},qP={kernelName:lO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,Mz(n,"float32"))}}},jP={kernelName:dO,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=SP(r);return Kz(e,Bz(nB(e,s,!0),t))}}}};const KP=UL({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:o};return RL.runKernel(mO,i,l)}}),XP={kernelName:fO,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>KP(r,s,e,a,o,i,l)}}};const YP=UL({equal_:function(e,t){let n=VL(e,"a","equal"),r=VL(t,"b","equal");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(z_,s)}});function ZP(e,t,n,r){return t.rank<n.rank&&(t=tB(t,cP(t.shape,r))),e.rank<n.rank&&(e=tB(e,cP(e.shape,r))),{x:()=>Bz(e,Mz(YP(n,t),e.dtype))}}const JP={kernelName:gO,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],o=ZP(e,t[1],a,lF(s,a.shape));return{x:()=>o.x()}}};const QP=UL({less_:function(e,t){let n=VL(e,"a","less"),r=VL(t,"b","less");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(aO,s)}}),eV={kernelName:yO,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Bz(e,Mz(BB(n,r),"float32")),b:()=>Bz(e,Mz(QP(n,r),"float32"))}}};const tV=UL({maxPool3dGrad_:function(e,t,n,r,s,a=[1,1,1],o,i){const l=VL(e,"dy","maxPool3dGrad"),u=VL(t,"input","maxPool3dGrad"),c=VL(n,"output","maxPool3dGrad");let p=l,h=u,d=c,f=!1;4===u.rank&&(f=!0,p=tB(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=tB(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=tB(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),KR(5===p.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${p.rank}.`)),KR(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),KR(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),KR(TB(s,a),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=i&&KR(tF(o),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${o}.`));const m={dy:p,input:h,output:d},g={filterSize:r,strides:s,dilations:a,pad:o,dimRoundingMode:i},y=RL.runKernel(kO,m,g);return f?tB(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),nV={kernelName:wO,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,dilations:i,pad:l,dimRoundingMode:u}=n,c=null==i?[1,1,1]:i;return{x:()=>tV(e,r,s,a,o,c,l,u)}}};const rV=UL({maxPoolGrad_:function(e,t,n,r,s,a,o){const i=VL(e,"dy","maxPoolGrad"),l=VL(t,"input","maxPoolGrad"),u=VL(n,"output","maxPoolGrad");KR(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),KR(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),KR(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=o&&KR(tF(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const c={dy:i,input:l,output:u},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return RL.runKernel(xO,c,p)}}),sV={kernelName:bO,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>rV(e,r,s,a,o,i)}}};function aV(e,t="float32"){if("complex64"===t){const t=aV(e,"float32"),n=aV(e,"float32");return GL(t,n)}const n=$F(JR(e),t);return RL.makeTensor(n,e,t)}function oV(e,t="float32"){if("complex64"===t){const t=oV(e,"float32"),n=aV(e,"float32");return GL(t,n)}const n=EF(JR(e),t);return RL.makeTensor(n,e,t)}const iV={kernelName:NO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=lF(s,r.shape),o=JR(uP(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=tB(e,t);return Uz(Bz(n,oV(r.shape,"float32")),o)}}}},lV={kernelName:SO,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=ZP(e,o,a,lF(s,a.shape));return{x:()=>i.x()}}},uV={kernelName:IO,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Bz(e,Mz(PB(n,r),"float32")),b:()=>Bz(e,Mz(UP(n,r),"float32"))}}};const cV=UL({slice_:function(e,t,n){const r=VL(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return RL.runKernel(aM,s,a)}}),pV={kernelName:TO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>cV(e,a,r.shape)}}};const hV=UL({floor_:function(e){const t={x:VL(e,"x","floor")};return RL.runKernel(H_,t)}}),dV={kernelName:EO,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{const t=Qz(n.shape,s);return t.length>0?tB(nB(e,t),n.shape):e},b:()=>{const t=Bz(e,Gz(hV(Uz(n,r)))),a=Qz(r.shape,s);return a.length>0?tB(nB(t,a),r.shape):t}}}},fV={kernelName:CO,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{const t=Bz(e,Mz(r,"float32")),a=Qz(n.shape,s);return a.length>0?tB(nB(t,a),n.shape):t},b:()=>{const t=Bz(e,Mz(n,"float32")),a=Qz(r.shape,s);return a.length>0?tB(nB(t,a),r.shape):t}}}},mV={kernelName:AO,gradFunc:e=>({x:()=>Gz(e)})},gV={kernelName:MO,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>aV(n.shape,"float32")}}},yV={kernelName:OO,gradFunc:e=>({x:()=>aB(e)})};const bV=UL({unstack_:function(e,t=0){const n=VL(e,"x","unstack","string_or_numeric");KR(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return RL.runKernel(EM,r,s)}}),xV={kernelName:LO,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return bV(e,r).map((e=>()=>e))}},wV={kernelName:zO,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>cV(e,a,r.shape)}}};const kV=UL({log_:function(e){const t={x:VL(e,"x","log")};return RL.runKernel(lO,t)}});const vV=UL({pow_:function(e,t){let n=VL(e,"base","pow"),r=VL(t,"exp","pow");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(PO,s)}}),NV={kernelName:PO,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=eB(a.shape,o.shape);return{a:()=>{const t=Mz(o,"float32");let n=Bz(e,Bz(t,vV(a,Kz(t,Hz(1)))));const r=Qz(a.shape,i);return r.length>0&&(n=nB(n,r)),tB(n,a.shape)},b:()=>{const t=UP(a,0),n=UB(t,kV(a),aB(a));let r=Bz(e,Bz(s,n));const l=Qz(o.shape,i);return l.length>0&&(r=nB(r,l)),tB(r,o.shape)}}}},SV={kernelName:VO,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=UP(n,0);return{x:()=>UB(s,e,Bz(e,r)),alpha:()=>{let t=UB(s,aB(e),Bz(e,n));const a=Qz(r.shape,e.shape);return a.length>0&&(t=nB(t,a)),tB(t,r.shape)}}}},IV={kernelName:__,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{const t=Uz(e,Mz(r,"float32")),a=Qz(n.shape,s);return a.length>0?tB(nB(t,a),n.shape):t},b:()=>{let t=Bz(e,Mz(n,"float32"));const a=Qz(r.shape,s);a.length>0&&(t=tB(nB(t,a),r.shape));const o=jz(r);return Gz(Uz(t,Mz(o,"float32")))}}}},TV={kernelName:HO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,Gz(jz(n)))}}},EV={kernelName:JO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Bz(PB(n,6),Pz(n));return{x:()=>Bz(e,Mz(r,"float32"))}}},$V={kernelName:qO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,Mz(Pz(n),"float32"))}}},CV={kernelName:jO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tB(e,n.shape)}}},AV={kernelName:YO,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>RL.runKernel(ZO,s,n)}}},DV={kernelName:KO,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>RL.runKernel(XO,s,n)}}};const RV=UL({reverse_:function(e,t){const n={x:VL(e,"x","reverse")},r={dims:t};return RL.runKernel(QO,n,r)}}),FV={kernelName:QO,gradFunc:(e,t,n)=>{const{dims:r}=n,s=lF(r,e.shape);return{x:()=>RV(e,s)}}},_V={kernelName:eM,gradFunc:e=>({x:()=>aB(e)})},OV={kernelName:tM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Gz(Uz(e,Bz(vV(n,1.5),2)))}}};const MV=UL({logicalNot_:function(e){const t={x:VL(e,"x","logicalNot","bool")};return RL.runKernel(pO,t)}}),LV={kernelName:rM,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Mz(aB(n),"float32"),t:()=>Bz(e,Mz(n,e.dtype)),e:()=>Bz(e,Mz(MV(n),e.dtype))}}};var zV={};t(zV,"SELU_SCALEALPHA",(()=>BV)),t(zV,"SELU_SCALE",(()=>PV));const BV=1.7580993408473768,PV=1.0507009873554805,VV={kernelName:sM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=UP(n,Hz(0)),r=Hz(BV),s=Hz(PV),a=Bz(e,s),o=Bz(Bz(e,r),SP(Mz(n,"float32")));return UB(t,a,o)}}}},WV={kernelName:uM,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,Bz(n,Kz(Hz(1),n)))}}},UV={kernelName:lM,gradFunc:e=>({x:()=>aB(e)})};const GV=UL({cos_:function(e){const t={x:VL(e,"x","cos")};return RL.runKernel(k_,t)}}),HV={kernelName:oM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(GV(Mz(n,"float32")),e)}}};const qV=UL({cosh_:function(e){const t={x:VL(e,"x","cosh")};return RL.runKernel(v_,t)}}),jV={kernelName:iM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(qV(Mz(n,"float32")),e)}}};const KV=UL({pad_:function(e,t,n=0){const r=VL(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return RL.runKernel(zO,a,s)}});var XV={};function YV(e,t,n){const r=e.shape.length;KR(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),KR(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)KR(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function ZV(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function JV(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function QV(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function eW(e,t,n){return n<=e?n:n-(t-1)}function tW(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function nW(e,t,n,r,s,a,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=rW(o,l,u,r,e),p=sW(i,l,u,s,e),h=QV(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=oW(o,r,a,e,t,l),p[t]=iW(i,s,a,e,t,l),h[t]=aW(a,t,l);return{begin:c,end:p,strides:h}}function rW(e,t,n,r,s){const a=[...s],o=tW(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=eW(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function sW(e,t,n,r,s){const a=[...s],o=tW(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=eW(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=UR(0,a[e],s[e])}return a}function aW(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function oW(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=UR(0,o,l-1),o}function iW(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=i>0?UR(0,o,l):UR(-1,o,l-1),o}function lW(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function uW(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function cW(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{KR(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(KR(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function pW(e,t,n,r,s,a,o,i,l){let u=t.slice(),c=n.slice(),p=r;null==r&&(p=new Array(u.length));const h=ZV(o);if(h.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=ZV(i),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=nW(m,h,d,u,c,p,s,a,o);u=g,c=y,p=b;const x=ZV(l);x.forEach((e=>{c[e]=u[e]+1,p[e]=1}));const w=JV(u,c,p),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:p.every((e=>1===e)),$begin:u,$end:c,$strides:p,size:w,newShape:m,outShape:k}}t(XV,"assertParamsValid",(()=>YV)),t(XV,"maskToAxes",(()=>ZV)),t(XV,"computeOutShape",(()=>JV)),t(XV,"stridesWithElidedDims",(()=>QV)),t(XV,"getNormalizedAxes",(()=>nW)),t(XV,"startIndicesWithElidedDims",(()=>rW)),t(XV,"stopIndicesWithElidedDims",(()=>sW)),t(XV,"startForAxis",(()=>oW)),t(XV,"stopForAxis",(()=>iW)),t(XV,"stridesForAxis",(()=>aW)),t(XV,"isSliceContinous",(()=>lW)),t(XV,"computeFlatOffset",(()=>uW)),t(XV,"parseSliceParams",(()=>cW)),t(XV,"sliceInfo",(()=>pW));const hW={kernelName:aM,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,l]=cW(r,s,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>KV(e,u)}}},dW={kernelName:mM,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Bz(e,r);return{logits:()=>Kz(a,Bz(nB(a,[s],true),r))}}};const fW=UL({sigmoid_:function(e){const t={x:VL(e,"x","sigmoid")};return RL.runKernel(uM,t)}}),mW={kernelName:cM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,fW(n))}}};const gW=UL({batchToSpaceND_:function(e,t,n){const r=VL(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));KR(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),KR(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),KR(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return RL.runKernel(o_,a,o)}}),yW={kernelName:dM,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>gW(e,r,s)}}};const bW=UL({concat_:function(e,t=0){KR(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=WL(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Lz(n[0]);const r=n,s={axis:t};return RL.runKernel(f_,r,s)}}),xW={kernelName:fM,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>bW(e,r)}}},wW={kernelName:pM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,Bz(qz(Mz(n,"float32")),2))}}},kW={kernelName:yM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(e,Bz(Mz(n,"float32"),2))}}},vW={kernelName:gM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Hz(2);return{a:()=>Bz(e,Bz(s,Kz(n,r))),b:()=>Bz(e,Bz(s,Kz(r,n)))}}},NW={kernelName:AM,gradFunc:e=>({x:()=>aB(e)})},SW={kernelName:bM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=eB(n.shape,r.shape);return{a:()=>{let t=e;const r=Qz(n.shape,s);return r.length>0&&(t=nB(t,r)),tB(t,n.shape)},b:()=>{let t=e;const n=Qz(r.shape,s);return n.length>0&&(t=nB(t,n)),tB(Gz(t),r.shape)}}}},IW={kernelName:hM,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;lF(a,r.shape).forEach((e=>{s[e]=1}));const o=tB(e,s),i=Bz(o,oV(r.shape,"float32"));return{x:()=>i}}},TW={kernelName:kM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uz(e,jz(GV(n)))}}},EW={kernelName:vM,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bz(Kz(Hz(1),jz(n)),e)}}},$W={kernelName:NM,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=aB(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=uB(t,cV(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=uB(t,cV(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=uB(t,cV(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=uB(t,cV(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},CW={kernelName:IM,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=dP(s);return{x:()=>yP(e,a)}}};const AW=UL({stack_:function(e,t=0){const n=WL(e,"tensors","stack","string_or_numeric");KR(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&KR(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return RL.runKernel(LO,r,s)}}),DW={kernelName:EM,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>AW(e,s)}}};const RW=UL({expandDims_:function(e,t=0){const n=VL(e,"x","expandDims","string_or_numeric");KR(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return RL.runKernel(P_,r,s)}});const FW=UL({gather_:function(e,t,n=0,r=0){const s={x:VL(e,"x","gather"),indices:VL(t,"indices","gather","int32")},a={axis:n,batchDims:r};return RL.runKernel(K_,s,a)}});const _W=UL({maximum_:function(e,t){let n=VL(e,"a","maximum"),r=VL(t,"b","maximum");[n,r]=SL(n,r),"bool"===n.dtype&&(n=Mz(n,"int32"),r=Mz(r,"int32")),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(yO,s)}});const OW=[Vz,Xz,Yz,rB,sB,oB,iB,lB,cB,pB,hB,dB,CB,DB,FB,OB,MB,LB,zB,GB,HB,jB,JB,YB,tP,rP,aP,bP,kP,vP,IV,NP,IP,TP,EP,$P,AP,CP,FP,OP,zP,BP,PP,VP,WP,GP,HP,qP,jP,XP,JP,JP,eV,nV,sV,iV,lV,uV,pV,dV,fV,mV,gV,yV,xV,wV,wV,NV,SV,TV,EV,$V,CV,AV,DV,FV,_V,OV,LV,VV,WV,UV,HV,jV,hW,dW,mW,yW,yW,xW,xW,wW,vW,kW,NW,SW,IW,TW,EW,$W,CW,DW,{kernelName:$M,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=_W(t,aB(t)),r=FW(e,n);let s=BB(t,Hz(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=RW(s,e+1);s=VB(s,oV(r.shape,"bool"));const o=aB(r);return UB(s,r,o)}(e,n)}}},{kernelName:CM,gradFunc:e=>({x:()=>aB(e)})}];for(const e of OW)UM(e);var MW={};t(MW,"spectral",(()=>Sj)),t(MW,"signal",(()=>Ij)),t(MW,"image",(()=>Tj)),t(MW,"linalg",(()=>Ej)),t(MW,"losses",(()=>$j)),t(MW,"abs",(()=>HU)),t(MW,"acos",(()=>BG)),t(MW,"acosh",(()=>PG)),t(MW,"add",(()=>uB)),t(MW,"addN",(()=>VG)),t(MW,"all",(()=>WG)),t(MW,"any",(()=>UG)),t(MW,"argMax",(()=>GG)),t(MW,"argMin",(()=>HG)),t(MW,"asin",(()=>qG)),t(MW,"asinh",(()=>jG)),t(MW,"atan",(()=>KG)),t(MW,"atan2",(()=>XG)),t(MW,"atanh",(()=>YG)),t(MW,"avgPool",(()=>ZG)),t(MW,"avgPool3d",(()=>JG)),t(MW,"basicLSTMCell",(()=>eH)),t(MW,"batchToSpaceND",(()=>gW)),t(MW,"batchNorm",(()=>tH)),t(MW,"batchNorm2d",(()=>nH)),t(MW,"batchNorm3d",(()=>rH)),t(MW,"batchNorm4d",(()=>sH)),t(MW,"bincount",(()=>aH)),t(MW,"broadcastTo",(()=>WB)),t(MW,"buffer",(()=>Oz)),t(MW,"cast",(()=>Mz)),t(MW,"ceil",(()=>oH)),t(MW,"clipByValue",(()=>iH)),t(MW,"clone",(()=>Lz)),t(MW,"complex",(()=>GL)),t(MW,"concat",(()=>bW)),t(MW,"concat1d",(()=>lH)),t(MW,"concat2d",(()=>uH)),t(MW,"concat3d",(()=>cH)),t(MW,"concat4d",(()=>pH)),t(MW,"conv1d",(()=>hH)),t(MW,"conv2d",(()=>ZB)),t(MW,"conv2dTranspose",(()=>dH)),t(MW,"conv3d",(()=>fH)),t(MW,"conv3dTranspose",(()=>mH)),t(MW,"cos",(()=>GV)),t(MW,"cosh",(()=>qV)),t(MW,"cumsum",(()=>mP)),t(MW,"denseBincount",(()=>gH)),t(MW,"depthToSpace",(()=>yH)),t(MW,"depthwiseConv2d",(()=>lU)),t(MW,"diag",(()=>bH)),t(MW,"dilation2d",(()=>xH)),t(MW,"div",(()=>Uz)),t(MW,"divNoNan",(()=>wH)),t(MW,"dot",(()=>kH)),t(MW,"elu",(()=>JW)),t(MW,"equal",(()=>YP)),t(MW,"erf",(()=>vH)),t(MW,"exp",(()=>SP)),t(MW,"expandDims",(()=>RW)),t(MW,"expm1",(()=>NH)),t(MW,"eye",(()=>wG)),t(MW,"fill",(()=>yU)),t(MW,"floor",(()=>hV)),t(MW,"floorDiv",(()=>Wz)),t(MW,"gather",(()=>FW)),t(MW,"greater",(()=>UP)),t(MW,"greaterEqual",(()=>BB)),t(MW,"imag",(()=>LW)),t(MW,"isFinite",(()=>SH)),t(MW,"isInf",(()=>IH)),t(MW,"isNaN",(()=>TH)),t(MW,"leakyRelu",(()=>QW)),t(MW,"less",(()=>QP)),t(MW,"lessEqual",(()=>PB)),t(MW,"linspace",(()=>EH)),t(MW,"localResponseNormalization",(()=>$H)),t(MW,"log",(()=>kV)),t(MW,"log1p",(()=>OG)),t(MW,"logSigmoid",(()=>AH)),t(MW,"logSoftmax",(()=>DH)),t(MW,"logSumExp",(()=>LG)),t(MW,"logicalAnd",(()=>VB)),t(MW,"logicalNot",(()=>MV)),t(MW,"logicalOr",(()=>RH)),t(MW,"logicalXor",(()=>FH)),t(MW,"matMul",(()=>RB)),t(MW,"max",(()=>qU)),t(MW,"maxPool",(()=>_H)),t(MW,"maxPool3d",(()=>OH)),t(MW,"maxPoolWithArgmax",(()=>MH)),t(MW,"maximum",(()=>_W)),t(MW,"mean",(()=>SG)),t(MW,"min",(()=>jU)),t(MW,"minimum",(()=>AG)),t(MW,"mirrorPad",(()=>LH)),t(MW,"mod",(()=>zH)),t(MW,"moments",(()=>BH)),t(MW,"mul",(()=>Bz)),t(MW,"multiRNNCell",(()=>PH)),t(MW,"multinomial",(()=>VH)),t(MW,"neg",(()=>Gz)),t(MW,"notEqual",(()=>IG)),t(MW,"oneHot",(()=>WH)),t(MW,"ones",(()=>oV)),t(MW,"onesLike",(()=>UH)),t(MW,"outerProduct",(()=>GH)),t(MW,"pad",(()=>KV)),t(MW,"pad1d",(()=>HH)),t(MW,"pad2d",(()=>qH)),t(MW,"pad3d",(()=>jH)),t(MW,"pad4d",(()=>KH)),t(MW,"pool",(()=>XH)),t(MW,"pow",(()=>vV)),t(MW,"prelu",(()=>eU)),t(MW,"print",(()=>zz)),t(MW,"prod",(()=>YH)),t(MW,"rand",(()=>ZH)),t(MW,"randomGamma",(()=>dq)),t(MW,"randomNormal",(()=>fq)),t(MW,"randomUniform",(()=>mq)),t(MW,"range",(()=>WU)),t(MW,"real",(()=>zW)),t(MW,"reciprocal",(()=>gq)),t(MW,"relu",(()=>tU)),t(MW,"relu6",(()=>nU)),t(MW,"reshape",(()=>tB)),t(MW,"reverse",(()=>RV)),t(MW,"reverse1d",(()=>yq)),t(MW,"reverse2d",(()=>bq)),t(MW,"reverse3d",(()=>xq)),t(MW,"reverse4d",(()=>wq)),t(MW,"round",(()=>kq)),t(MW,"rsqrt",(()=>DP)),t(MW,"scalar",(()=>Hz)),t(MW,"selu",(()=>vq)),t(MW,"separableConv2d",(()=>Nq)),t(MW,"setdiff1dAsync",(()=>Sq)),t(MW,"sigmoid",(()=>fW)),t(MW,"sign",(()=>Iq)),t(MW,"sin",(()=>nP)),t(MW,"sinh",(()=>sP)),t(MW,"slice",(()=>cV)),t(MW,"slice1d",(()=>Tq)),t(MW,"slice2d",(()=>Eq)),t(MW,"slice3d",(()=>$q)),t(MW,"slice4d",(()=>Cq)),t(MW,"softmax",(()=>Aq)),t(MW,"softplus",(()=>CH)),t(MW,"spaceToBatchND",(()=>_B)),t(MW,"fft",(()=>BW)),t(MW,"ifft",(()=>VW)),t(MW,"irfft",(()=>WW)),t(MW,"rfft",(()=>PW)),t(MW,"split",(()=>qB)),t(MW,"sqrt",(()=>qz)),t(MW,"square",(()=>jz)),t(MW,"squaredDifference",(()=>FG)),t(MW,"squeeze",(()=>YU)),t(MW,"stack",(()=>AW)),t(MW,"step",(()=>Pz)),t(MW,"stridedSlice",(()=>Dq)),t(MW,"sub",(()=>Kz)),t(MW,"sum",(()=>nB)),t(MW,"tan",(()=>Rq)),t(MW,"tanh",(()=>QG)),t(MW,"tensor",(()=>qL)),t(MW,"tensor1d",(()=>hU)),t(MW,"tensor2d",(()=>bU)),t(MW,"tensor3d",(()=>Fq)),t(MW,"tensor4d",(()=>_q)),t(MW,"tensor5d",(()=>Oq)),t(MW,"tensor6d",(()=>Mq)),t(MW,"tile",(()=>RP)),t(MW,"topk",(()=>Lq)),t(MW,"truncatedNormal",(()=>zq)),t(MW,"unique",(()=>Bq)),t(MW,"unsortedSegmentSum",(()=>_P)),t(MW,"unstack",(()=>bV)),t(MW,"variable",(()=>Pq)),t(MW,"where",(()=>UB)),t(MW,"whereAsync",(()=>Wq)),t(MW,"zeros",(()=>aV)),t(MW,"zerosLike",(()=>aB)),t(MW,"op",(()=>UL)),t(MW,"OP_SCOPE_SUFFIX",(()=>"__op")),t(MW,"fused",(()=>UW));const LW=UL({imag_:function(e){const t={input:VL(e,"input","imag")};return RL.runKernel(eO,t)}});const zW=UL({real_:function(e){const t={input:VL(e,"input","real")};return RL.runKernel(GO,t)}});const BW=UL({fft_:function(e){KR("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return RL.runKernel(W_,t)}});const PW=UL({rfft_:function(e,t){KR("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=cV(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=bW([e,aV(r)],e.shape.length-1),n=t}else s=e;const a=aB(s),o=tB(GL(s,a),[r,n]),i=BW(o),l=Math.floor(n/2)+1,u=zW(i),c=LW(i),p=qB(u,[l,n-l],u.shape.length-1),h=qB(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,tB(GL(p[0],h[0]),d)}});const VW=UL({ifft_:function(e){KR("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return RL.runKernel(Q_,t)}});const WW=UL({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=tB(e,[n,t]);r=VW(s)}else{const s=[n,2*(t-1)],a=tB(zW(e),[n,t]),o=tB(LW(e),[n,t]),i=RV(cV(a,[0,1],[n,t-2]),1),l=Bz(RV(cV(o,[0,1],[n,t-2]),1),Hz(-1)),u=bW([a,i],1),c=bW([o,l],1),p=tB(GL(u,c),[s[0],s[1]]);r=VW(p)}if(r=zW(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=tB(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var UW={};function GW(e){return KR(vF(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=VL(t,"x","tf.grad","string_or_numeric"),s=null!=n?VL(n,"dy","tf.grad"):null;return RL.tidy((()=>{const{value:t,grads:n}=RL.gradients((()=>e(r)),[r],s);return null!=s&&XR(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),YW(n),n[0]}))}}function HW(e){return KR(vF(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{KR(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=WL(t,"args","tf.grads","string_or_numeric"),s=null!=n?VL(n,"dy","tf.grads"):null;return RL.tidy((()=>{const{value:t,grads:n}=RL.gradients((()=>e(...r)),r,s);return null!=s&&XR(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),YW(n),n}))}}function qW(e){return KR(vF(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{KR(t instanceof dL,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),KR(null==n||n instanceof dL,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:s}=RL.gradients((()=>e(t)),[t],n);return YW(r),{grad:r[0],value:s}}}function jW(e){return KR(vF(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{KR(Array.isArray(t)&&t.every((e=>e instanceof dL)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),KR(null==n||n instanceof dL,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=RL.gradients((()=>e(...t)),t,n);return null!=n&&XR(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),YW(r.grads),r}}function KW(e,t){KR(vF(e),(()=>"The f passed in variableGrads(f) must be a function")),KR(null==t||Array.isArray(t)&&t.every((e=>e instanceof fL)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in RL.registeredVariables)t.push(RL.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;KR((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:o}=RL.gradients(e,t,null,!0);KR(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),KR(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:a,grads:i}}function XW(e){return RL.customGrad(e)}function YW(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}t(UW,"conv2d",(()=>iU)),t(UW,"depthwiseConv2d",(()=>uU)),t(UW,"matMul",(()=>cU));var ZW={};t(ZW,"getFusedDyActivation",(()=>rU)),t(ZW,"getFusedBiasGradient",(()=>sU)),t(ZW,"applyActivation",(()=>aU)),t(ZW,"shouldFuse",(()=>oU));const JW=UL({elu_:function(e){const t={x:VL(e,"x","elu")};return RL.runKernel(O_,t)}});const QW=UL({leakyRelu_:function(e,t=.2){const n={x:VL(e,"x","leakyRelu")},r={alpha:t};return RL.runKernel(sO,n,r)}});const eU=UL({prelu_:function(e,t){const n={x:VL(e,"x","prelu"),alpha:VL(t,"alpha","prelu")};return RL.runKernel(VO,n)}});const tU=UL({relu_:function(e){const t={x:VL(e,"x","relu")};return RL.runKernel(qO,t)}});const nU=UL({relu6_:function(e){const t={x:VL(e,"x","relu6")};return RL.runKernel(JO,t)}});function rU(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Bz(e,Pz(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function sU(e,t){let n=t;const r=Qz(e.shape,t.shape);return r.length>0&&(n=nB(n,r)),tB(n,e.shape)}function aU(e,t,n,r){if("linear"===t)return e;if("relu"===t)return tU(e);if("elu"===t)return JW(e);if("relu6"===t)return nU(e);if("prelu"===t)return eU(e,n);if("leakyrelu"===t)return QW(e,r);throw new Error(`Unknown fused activation ${t}.`)}const oU=(e,t)=>!(e>0)||"linear"===t;const iU=UL({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===oU(RL.state.gradientDepth,l)){let p=ZB(e,t,n,r,s,a,o);return null!=i&&(p=uB(p,i)),aU(p,l,u,c)}const p=VL(e,"x","conv2d"),h=VL(t,"filter","conv2d");let d=p,f=!1;3===p.rank&&(f=!0,d=tB(p,[1,p.shape[0],p.shape[1],p.shape[2]])),KR(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),KR(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),null!=o&&KR(tF(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),KR(d.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),KR(TB(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),KR("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const m=bB(d.shape,h.shape,n,a,r,o);let g,y;null!=i&&(g=VL(i,"bias","fused conv2d"),[g]=SL(g,p),eB(m.outShape,g.shape)),null!=u&&(y=VL(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[s,o,i,u]=t,c=rU(e,i,l);KR(IB(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[XB(o.shape,c,s,n,r),KB(o,c,s.shape,n,r)];if(null!=u){const e=sU(u,c);p.push(e)}return p},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return XW(((e,t,n)=>{let r=RL.runKernel(_M,x,w);return n([t,e,r]),f&&(r=tB(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return XW(((e,t,n,r)=>{let s=RL.runKernel(_M,x,w);return r([t,e,s,n]),f&&(s=tB(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,h,g)}});const lU=UL({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=VL(e,"x","depthwiseConv2d"),l=VL(t,"filter","depthwiseConv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=tB(i,[1,i.shape[0],i.shape[1],i.shape[2]])),KR(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),KR(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),KR(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=o&&KR(tF(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const p={x:u,filter:l},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},d=RL.runKernel(E_,p,h);return c?tB(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const uU=UL({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===oU(RL.state.gradientDepth,l)){let p=lU(e,t,n,r,s,a,o);return null!=i&&(p=uB(p,i)),aU(p,l,u,c)}const p=VL(e,"x","depthwiseConv2d"),h=VL(t,"filter","depthwiseConv2d");let d=p,f=!1;3===p.rank&&(f=!0,d=tB(p,[1,p.shape[0],p.shape[1],p.shape[2]])),KR(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),KR(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),KR(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),KR(TB(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=o&&KR(tF(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${r}.`));const m=bB(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=VL(i,"bias","fused conv2d"),[g]=SL(g,p),eB(m.outShape,g.shape)),null!=u&&(y=VL(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{KR(IB(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,u,c]=t,p=rU(e,u,l),h=wP(i.shape,p,s,n,r,a,o),d=xP(i,p,s.shape,n,r,a,o);if(null!=c){return[h,d,sU(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return XW(((e,t,n)=>{let r=RL.runKernel(OM,x,w);return n([t,e,r]),f&&(r=tB(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return XW(((e,t,n,r)=>{let s=RL.runKernel(OM,x,w);return r([t,e,s,n]),f&&(s=tB(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,h,g)}});const cU=UL({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i}){if(!1===oU(RL.state.gradientDepth,a)){let l=RB(e,t,n,r);return null!=s&&(l=uB(l,s)),aU(l,a,o,i)}let l=VL(e,"a","fused matMul"),u=VL(t,"b","fused matMul");[l,u]=SL(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=JR(f),y=JR(m);KR(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),KR(eF(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),KR(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=l.shape.slice(0,-2).concat([h,d]),x=tB(l,n?[g,c,h]:[g,h,c]),w=tB(u,r?[y,d,p]:[y,p,d]);let k,v;null!=s&&(k=VL(s,"bias","fused matMul"),[k]=SL(k,l),eB(b,k.shape)),null!=o&&(v=VL(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,l,u]=t,c=rU(tB(e,l.shape),l,a);let p,h;if(n||r?!n&&r?(p=RB(c,i,!1,!1),h=RB(c,o,!0,!1)):n&&!r?(p=RB(i,c,!1,!0),h=RB(o,c,!1,!1)):(p=RB(i,c,!0,!0),h=RB(c,o,!0,!0)):(p=RB(c,i,!1,!0),h=RB(o,c,!0,!1)),null!=s){return[p,h,sU(u,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){return XW(((e,t,n)=>{const r=RL.runKernel(FM,S,I);return n([e,t,r]),{value:tB(r,b),gradFunc:N}}))(x,w)}return XW(((e,t,n,r)=>{const s=RL.runKernel(FM,S,I);return r([e,t,s,n]),{value:tB(s,b),gradFunc:N}}))(x,w,k)}});var pU={};function hU(e,t){YR(e);const n=zL(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return HL(e,null,n,t)}function dU(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function fU(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return hU(s,"float32")}t(pU,"enclosingPowerOfTwo",(()=>dU)),t(pU,"cosineWindow",(()=>fU));const mU=UL({hammingWindow_:function(e){return fU(e,.54,.46)}});const gU=UL({hannWindow_:function(e){return fU(e,.5,.5)}});function yU(e,t,n){const r={shape:e,value:t,dtype:n};return RL.runKernel(U_,{},r)}function bU(e,t,n){if(YR(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=zL(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return HL(e,t,r,n)}const xU=UL({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(cV(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=bW([cV(e,a,t-r),yU([r],s)]);o.push(i),a+=n}return 0===o.length?bU([],[0,t]):tB(bW(o),[o.length,t])}});const wU=UL({stft_:function(e,t,n,r,s=gU){null==r&&(r=dU(t));const a=xU(e,t,n),o=Bz(a,s(t)),i=[];for(let e=0;e<a.shape[0];e++)i.push(PW(cV(o,[e,0],[1,t]),r));return bW(i)}});const kU=UL({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=VL(e,"image","cropAndResize"),i=VL(t,"boxes","cropAndResize","float32"),l=VL(n,"boxInd","cropAndResize","int32"),u=i.shape[0];KR(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),KR(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),KR(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),KR(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),KR(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),KR("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return RL.runKernel(S_,c,p)}});const vU=UL({flipLeftRight_:function(e){const t=VL(e,"image","flipLeftRight","float32");KR(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return RL.runKernel(G_,n,{})}});const NU=UL({rotateWithOffset_:function(e,t,n=0,r=.5){const s=VL(e,"image","rotateWithOffset","float32");KR(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return RL.runKernel(RM,a,o)}});function SU(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),KR(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),KR(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),KR(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),KR(1===t.rank,(()=>"scores must be a 1D tensor")),KR(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),KR(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const IU=UL({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=VL(e,"boxes","nonMaxSuppression"),o=VL(t,"scores","nonMaxSuppression"),i=SU(a,o,n,r,s),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return RL.runKernel(RO,{boxes:a,scores:o},l)}});function TU(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||EU)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function EU(e,t){return e>t?1:e<t?-1:0}function $U(e,t,n,r,s){return DU(e,t,n,r,s,0)}function CU(e,t,n,r,s,a){return DU(e,t,n,r,s,0,!1,a,!0)}function AU(e,t,n,r,s,a){return DU(e,t,n,r,s,a,!0)}function DU(e,t,n,r,s,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>s&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(_U);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=RU(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*FU(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&TU(u,t,_U))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function RU(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function FU(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function _U(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const OU=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=VL(e,"boxes","nonMaxSuppressionAsync"),o=VL(t,"scores","nonMaxSuppressionAsync"),i=SU(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=$U(u,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),hU(p,"int32")};const MU=UL({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=VL(e,"boxes","nonMaxSuppression"),i=VL(t,"scores","nonMaxSuppression"),l=SU(o,i,n,r,s,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},p=RL.runKernel(_O,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const LU=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=VL(e,"boxes","nonMaxSuppressionAsync"),i=VL(t,"scores","nonMaxSuppressionAsync"),l=SU(o,i,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=AU(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:hU(h,"int32"),selectedScores:hU(d)}};const zU=UL({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=VL(e,"boxes","nonMaxSuppression"),i=VL(t,"scores","nonMaxSuppression"),l=SU(o,i,n,r,s,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},p=RL.runKernel(FO,u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const BU=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=VL(e,"boxes","nonMaxSuppressionAsync"),i=VL(t,"scores","nonMaxSuppressionAsync"),l=SU(o,i,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=CU(h,d,u,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:hU(f,"int32"),validOutputs:Hz(m,"int32")}};const PU=UL({resizeBilinear_:function(e,t,n=!1,r=!1){const s=VL(e,"images","resizeBilinear");KR(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),KR(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),KR(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=tB(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=RL.runKernel(YO,i,l);return o?tB(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const VU=UL({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=VL(e,"images","resizeNearestNeighbor");KR(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),KR(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),KR("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),KR(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=tB(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},u=RL.runKernel(KO,i,l);return o?tB(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});function WU(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return RL.runKernel(UO,{},s)}const UU=UL({bandPart_:function(e,t,n){KR(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),KR(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=VL(e,"a","bandPart");KR(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=tB(WU(0,a,1,"int32"),[-1,1]),l=WU(0,o,1,"int32"),u=Kz(i,l),c=VB(PB(u,Hz(+t,"int32")),BB(u,Hz(-n,"int32"))),p=aV([a,o],r.dtype);return tB(AW(bV(tB(r,[-1,a,o])).map((e=>UB(c,e,p)))),s)}});var GU={};t(GU,"norm",(()=>XU));const HU=UL({abs_:function(e){const t=VL(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return RL.runKernel(d_,e)}{const e={x:t};return RL.runKernel(VF,e)}}});const qU=UL({max_:function(e,t=null,n=!1){const r={x:VL(e,"x","max")},s={reductionIndices:t,keepDims:n};return RL.runKernel(gO,r,s)}});const jU=UL({min_:function(e,t=null,n=!1){const r={x:VL(e,"x","min")},s={axis:t,keepDims:n};return RL.runKernel(SO,r,s)}});function KU(e,t,n=null){if(0===e.rank)return HU(e);if(1!==e.rank&&null===n)return KU(tB(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return nB(HU(e),n);if(t===1/0)return qU(HU(e),n);if(t===-1/0)return jU(HU(e),n);if("euclidean"===t||2===t)return qz(nB(vV(HU(e),Hz(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return qU(nB(HU(e),n[0]),n[1]-1);if(t===1/0)return qU(nB(HU(e),n[1]),n[0]);if(t===-1/0)return jU(nB(HU(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return qz(nB(jz(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const XU=UL({norm_:function(e,t="euclidean",n=null,r=!1){const s=KU(e=VL(e,"x","norm"),t,n);let a=s.shape;if(r){const t=lF(n,e.shape);a=cP(s.shape,t)}return tB(s,a)}});const YU=UL({squeeze_:function(e,t){const n=VL(e,"x","squeeze");return tB(n,uF(n.shape,t).newShape)}});const ZU=UL({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,KR(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)KR(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=qB(e,e.shape[0],0).map((e=>YU(e,[0])));KR(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(RL.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Bz(nB(Bz(n[r],e)),n[r]);e=Kz(e,t)}return Uz(e,XU(e,"euclidean"))})));return t?AW(n,0):n}});var JU={};function QU(){OF().set("PROD",!0)}function eG(){OF().set("DEBUG",!0)}function tG(){OF().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function nG(e){OF().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function rG(){RL.disposeVariables()}function sG(){return RL}function aG(){return RL.memory()}function oG(e){return RL.profile(e)}function iG(e,t){return RL.tidy(e,t)}function lG(e){EL(e).forEach((e=>e.dispose()))}function uG(e){return RL.keep(e)}function cG(e){return RL.time(e)}function pG(e){return RL.setBackend(e)}function hG(){return RL.ready()}function dG(){return RL.backendName}function fG(e){RL.removeBackend(e)}function mG(e){return RL.findBackend(e)}function gG(e){return RL.findBackendFactory(e)}function yG(e,t,n=1){return RL.registerBackend(e,t,n)}function bG(){return RL.backend}function xG(e,t){OF().setPlatform(e,t)}t(JU,"enableProdMode",(()=>QU)),t(JU,"enableDebugMode",(()=>eG)),t(JU,"disableDeprecationWarnings",(()=>tG)),t(JU,"deprecationWarn",(()=>nG)),t(JU,"disposeVariables",(()=>rG)),t(JU,"engine",(()=>sG)),t(JU,"memory",(()=>aG)),t(JU,"profile",(()=>oG)),t(JU,"tidy",(()=>iG)),t(JU,"dispose",(()=>lG)),t(JU,"keep",(()=>uG)),t(JU,"time",(()=>cG)),t(JU,"setBackend",(()=>pG)),t(JU,"ready",(()=>hG)),t(JU,"getBackend",(()=>dG)),t(JU,"removeBackend",(()=>fG)),t(JU,"findBackend",(()=>mG)),t(JU,"findBackendFactory",(()=>gG)),t(JU,"registerBackend",(()=>yG)),t(JU,"backend",(()=>bG)),t(JU,"setPlatform",(()=>xG)),function(e){hL=e}(nG);const wG=UL({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Oz([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=tB(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return RP(RW(o,0),[n[0],1,1]);if(2===n.length)return RP(RW(RW(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return RP(RW(RW(RW(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function kG(e,t=!1){return RL.tidy((()=>{KR(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=wG(n),a=Lz(e);const o=bU([[1]],[1,1]);let i=Lz(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=i,u=s;[i,a,s]=RL.tidy((()=>{const t=cV(a,[e,e],[n-e,1]),l=XU(t),u=cV(a,[e,e],[1,1]),c=UB(UP(u,0),bU([[-1]]),bU([[1]])),p=Kz(u,Bz(c,l)),h=Uz(t,p);i=1===h.shape[0]?Lz(o):bW([o,cV(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Gz(Uz(RB(c,p),l)),f=cV(a,[e,0],[n-e,r]),m=Bz(d,i),g=yP(i);if(0===e)a=Kz(f,RB(m,RB(g,f)));else{const t=Kz(f,RB(m,RB(g,f)));a=bW([cV(a,[0,0],[e,r]),t],0)}const y=yP(m),b=cV(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Kz(b,RB(RB(b,i),y));else{const t=Kz(b,RB(RB(b,i),y));s=bW([cV(s,[0,0],[n,e]),t],1)}return[i,a,s]})),lG([t,l,u])}return!t&&n>r&&(s=cV(s,[0,0],[n,r]),a=cV(a,[0,0],[r,r])),[s,a]}))}const vG=UL({qr_:function(e,t=!1){if(KR(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return kG(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=bV(tB(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=kG(e,t);s.push(n),a.push(r)}));return[tB(AW(s,0),e.shape),tB(AW(a,0),e.shape)]}}});var NG;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(NG||(NG={}));const SG=UL({mean_:function(e,t=null,n=!1){const r={x:VL(e,"x","mean")},s={axis:t,keepDims:n};return RL.runKernel(NO,r,s)}});const IG=UL({notEqual_:function(e,t){let n=VL(e,"a","notEqual"),r=VL(t,"b","notEqual");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(DO,s)}});const TG=UL({computeWeightedLoss_:function(e,t,n=NG.SUM_BY_NONZERO_WEIGHTS){const r=VL(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=VL(t,"weights","computeWeightedLoss"));const a=null==s?r:Bz(r,s);if(n===NG.NONE)return a;if(n===NG.SUM)return nB(a);if(n===NG.MEAN){if(null==s)return SG(a);{const e=r.size/s.size,t=Uz(nB(a),nB(s));return e>1?Uz(t,Hz(e)):t}}if(n===NG.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Uz(nB(a),Hz(r.size));{const e=Bz(s,oV(r.shape)),t=Mz(nB(IG(e,Hz(0))),"float32");return Uz(nB(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const EG=UL({absoluteDifference_:function(e,t,n,r=NG.SUM_BY_NONZERO_WEIGHTS){const s=VL(e,"labels","absoluteDifference"),a=VL(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=VL(n,"weights","absoluteDifference")),XR(s.shape,a.shape,"Error in absoluteDifference: ");const i=HU(Kz(s,a));return TG(i,o,r)}});const $G=UL({cosineDistance_:function(e,t,n,r,s=NG.SUM_BY_NONZERO_WEIGHTS){const a=VL(e,"labels","cosineDistance"),o=VL(t,"predictions","cosineDistance");let i=null;null!=r&&(i=VL(r,"weights","cosineDistance")),XR(a.shape,o.shape,"Error in cosineDistance: ");const l=Hz(1),u=Kz(l,nB(Bz(a,o),n,!0));return TG(u,i,s)}});const CG=UL({hingeLoss_:function(e,t,n,r=NG.SUM_BY_NONZERO_WEIGHTS){let s=VL(e,"labels","hingeLoss");const a=VL(t,"predictions","hingeLoss");let o=null;null!=n&&(o=VL(n,"weights","hingeLoss")),XR(s.shape,a.shape,"Error in hingeLoss: ");const i=Hz(1);s=Kz(Bz(Hz(2),s),i);const l=tU(Kz(i,Bz(s,a)));return TG(l,o,r)}});const AG=UL({minimum_:function(e,t){let n=VL(e,"a","minimum"),r=VL(t,"b","minimum");[n,r]=SL(n,r),"bool"===n.dtype&&(n=Mz(n,"int32"),r=Mz(r,"int32")),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(IO,s)}});const DG=UL({huberLoss_:function(e,t,n,r=1,s=NG.SUM_BY_NONZERO_WEIGHTS){const a=VL(e,"labels","huberLoss"),o=VL(t,"predictions","huberLoss");let i=null;null!=n&&(i=VL(n,"weights","huberLoss")),XR(a.shape,o.shape,"Error in huberLoss: ");const l=Hz(r),u=HU(Kz(o,a)),c=AG(u,l),p=Kz(u,c),h=uB(Bz(Hz(.5),jz(c)),Bz(l,p));return TG(h,i,s)}});const RG=UL({logLoss_:function(e,t,n,r=1e-7,s=NG.SUM_BY_NONZERO_WEIGHTS){const a=VL(e,"labels","logLoss"),o=VL(t,"predictions","logLoss");let i=null;null!=n&&(i=VL(n,"weights","logLoss")),XR(a.shape,o.shape,"Error in logLoss: ");const l=Hz(1),u=Hz(r),c=Gz(Bz(a,kV(uB(o,u)))),p=Bz(Kz(l,a),kV(uB(Kz(l,o),u))),h=Kz(c,p);return TG(h,i,s)}});const FG=UL({squaredDifference_:function(e,t){let n=VL(e,"a","squaredDifference"),r=VL(t,"b","squaredDifference");[n,r]=SL(n,r),eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(gM,s,{})}});const _G=UL({meanSquaredError_:function(e,t,n,r=NG.SUM_BY_NONZERO_WEIGHTS){const s=VL(e,"labels","meanSquaredError"),a=VL(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=VL(n,"weights","meanSquaredError")),XR(s.shape,a.shape,"Error in meanSquaredError: ");const i=FG(s,a);return TG(i,o,r)}});const OG=UL({log1p_:function(e){const t={x:VL(e,"x","log1p")};return RL.runKernel(uO,t)}});const MG=UL({sigmoidCrossEntropy_:function(e,t,n,r=0,s=NG.SUM_BY_NONZERO_WEIGHTS){let a=VL(e,"multiClassLabels","sigmoidCrossEntropy");const o=VL(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=VL(n,"weights","sigmoidCrossEntropy")),XR(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Hz(r),t=Hz(1),n=Hz(.5);a=uB(Bz(a,Kz(t,e)),Bz(n,e))}const l=function(e,t){const n=VL(e,"labels","sigmoidCrossEntropyWithLogits"),r=VL(t,"logits","sigmoidCrossEntropyWithLogits");XR(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=tU(r),a=Bz(r,n),o=OG(SP(Gz(HU(r))));return uB(Kz(s,a),o)}(a,o);return TG(l,i,s)}});const LG=UL({logSumExp_:function(e,t=null,n=!1){const r=VL(e,"x","logSumExp"),s=lF(t,r.shape),a=qU(r,s,!0),o=Kz(r,a),i=SP(o),l=nB(i,s),u=kV(l),c=uB(tB(a,u.shape),u);if(n){const e=cP(c.shape,s);return tB(c,e)}return c}});const zG=UL({softmaxCrossEntropy_:function(e,t,n,r=0,s=NG.SUM_BY_NONZERO_WEIGHTS){let a=VL(e,"onehotLabels","softmaxCrossEntropy");const o=VL(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=VL(n,"weights","softmaxCrossEntropy")),XR(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Hz(r),t=Hz(1),n=Hz(a.shape[1]);a=uB(Bz(a,Kz(t,e)),Uz(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return XW(((e,t,r)=>{const s=LG(t,[n],!0),a=Kz(Mz(t,"float32"),s);r([e,a]);const o=Gz(Bz(a,e));return{value:nB(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=cP(e.shape,[n]);return[Bz(tB(e,a),Kz(Mz(r,"float32"),SP(s))),Bz(tB(e,a),Kz(SP(s),Mz(r,"float32")))]}}}))(e,t)}(a,o);return TG(l,i,s)}});const BG=UL({acos_:function(e){const t={x:VL(e,"x","acos")};return RL.runKernel(WF,t)}});const PG=UL({acosh_:function(e){const t={x:VL(e,"x","acosh")};return RL.runKernel(UF,t)}});const VG=UL({addN_:function(e){KR(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),KR(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>VL(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!eF(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return RL.runKernel(HF,r)}});const WG=UL({all_:function(e,t=null,n=!1){const r={x:VL(e,"x","all","bool")},s={axis:t,keepDims:n};return RL.runKernel(qF,r,s)}});const UG=UL({any_:function(e,t=null,n=!1){const r={x:VL(e,"x","any","bool")},s={axis:t,keepDims:n};return RL.runKernel(jF,r,s)}});const GG=UL({argMax_:function(e,t=0){const n={x:VL(e,"x","argMax")},r={axis:t};return RL.runKernel(KF,n,r)}});const HG=UL({argMin_:function(e,t=0){const n={x:VL(e,"x","argMin")},r={axis:t};return RL.runKernel(XF,n,r)}});const qG=UL({asin_:function(e){const t={x:VL(e,"x","asin")};return RL.runKernel(YF,t)}});const jG=UL({asinh_:function(e){const t={x:VL(e,"x","asinh")};return RL.runKernel(ZF,t)}});const KG=UL({atan_:function(e){const t={x:VL(e,"x","atan")};return RL.runKernel(JF,t)}});const XG=UL({atan2_:function(e,t){let n=VL(e,"a","atan2"),r=VL(t,"b","atan2");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(e_,s)}});const YG=UL({atanh_:function(e){const t={x:VL(e,"x","atanh")};return RL.runKernel(QF,t)}});const ZG=UL({avgPool_:function(e,t,n,r,s){const a=VL(e,"x","avgPool","float32");KR(TB(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=tB(a,[1,a.shape[0],a.shape[1],a.shape[2]])),KR(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),null!=s&&KR(tF(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=RL.runKernel(t_,l,u);return c=Mz(c,a.dtype),i?tB(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const JG=UL({avgPool3d_:function(e,t,n,r,s,a="NDHWC",o){null==o?o=[1,1,1]:nG("dilations is deprecated, this field will be gone in v3.0.0.");const i=VL(e,"x","avgPool3d","float32");let l=i,u=!1;4===i.rank&&(u=!0,l=tB(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),KR(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),KR("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),KR(TB(n,o),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`)),null!=s&&KR(tF(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:o};let h=RL.runKernel(r_,c,p);return h=Mz(h,l.dtype),u?tB(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const QG=UL({tanh_:function(e){const t={x:VL(e,"x","tanh")};return RL.runKernel(vM,t)}});const eH=UL({basicLSTMCell_:function(e,t,n,r,s,a){const o=VL(e,"forgetBias","basicLSTMCell"),i=VL(t,"lstmKernel","basicLSTMCell"),l=VL(n,"lstmBias","basicLSTMCell"),u=VL(r,"data","basicLSTMCell"),c=VL(s,"c","basicLSTMCell"),p=VL(a,"h","basicLSTMCell"),h=bW([u,p],1),d=RB(h,i),f=uB(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=cV(f,[0,0],y),x=cV(f,[0,g],y),w=cV(f,[0,2*g],y),k=cV(f,[0,3*g],y),v=uB(Bz(fW(b),QG(x)),Bz(c,fW(uB(o,w))));return[v,Bz(QG(v),fW(k))]}});const tH=UL({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=VL(e,"x","batchNorm"),i=VL(t,"mean","batchNorm"),l=VL(n,"variance","batchNorm");let u,c;null!=s&&(u=VL(s,"scale","batchNorm")),null!=r&&(c=VL(r,"offset","batchNorm")),KR(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),KR(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),KR(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(e){let t;return t=0===e.rank||1===e.rank?tB(e,[1,1,1,e.size]):2===e.rank?tB(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?tB(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),h={x:p,scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:a},f=RL.runKernel(j_,h,d);return tB(f,o.shape)}});const nH=UL({batchNorm2d_:function(e,t,n,r,s,a){const o=VL(e,"x","batchNorm"),i=VL(t,"mean","batchNorm"),l=VL(n,"variance","batchNorm");let u,c;return null!=s&&(u=VL(s,"scale","batchNorm")),null!=r&&(c=VL(r,"offset","batchNorm")),KR(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),KR(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),KR(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&KR(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&KR(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),tH(o,i,l,c,u,a)}});const rH=UL({batchNorm3d_:function(e,t,n,r,s,a){const o=VL(e,"x","batchNorm"),i=VL(t,"mean","batchNorm"),l=VL(n,"variance","batchNorm");let u,c;return null!=s&&(u=VL(s,"scale","batchNorm")),null!=r&&(c=VL(r,"offset","batchNorm")),KR(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),KR(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),KR(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&KR(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&KR(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),tH(o,i,l,c,u,a)}});const sH=UL({batchNorm4d_:function(e,t,n,r,s,a){const o=VL(e,"x","batchNorm"),i=VL(t,"mean","batchNorm"),l=VL(n,"variance","batchNorm");let u,c;return null!=s&&(u=VL(s,"scale","batchNorm")),null!=r&&(c=VL(r,"offset","batchNorm")),KR(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),KR(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),KR(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&KR(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&KR(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),tH(o,i,l,c,u,a)}});const aH=UL({bincount_:function(e,t,n){const r=VL(e,"x","bincount"),s=VL(t,"weights","bincount");KR("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),KR(n>=0,(()=>`size must be non-negative, but got ${n}.`)),KR(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return RL.runKernel(i_,a,o)}});const oH=UL({ceil_:function(e){const t={x:VL(e,"x","ceil")};return RL.runKernel(c_,t)}});const iH=UL({clipByValue_:function(e,t,n){const r=VL(e,"x","clipByValue");KR(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:t,clipValueMax:n};return RL.runKernel(p_,s,a)}});const lH=UL({concat1d_:function(e){return bW(e,0)}});const uH=UL({concat2d_:function(e,t){return bW(e,t)}});const cH=UL({concat3d_:function(e,t){return bW(e,t)}});const pH=UL({concat4d_:function(e,t){return bW(e,t)}});const hH=UL({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=VL(e,"x","conv1d"),l=VL(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=tB(i,[1,i.shape[0],i.shape[1]])),KR(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),KR(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=o&&KR(tF(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),KR(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),KR(TB(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),KR("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=tB(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=tB(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=ZB(h,p,[1,n],r,"NHWC",[1,a],o);return tB(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const dH=UL({conv2dTranspose_:function(e,t,n,r,s,a){const o=VL(e,"x","conv2dTranspose"),i=VL(t,"filter","conv2dTranspose");return XB(n,o,i,r,s,"NHWC",a)}});const fH=UL({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=VL(e,"x","conv3d"),i=VL(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=tB(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),KR(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),KR(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),KR(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),KR(TB(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),KR("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=RL.runKernel(b_,c,p);return u?tB(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const mH=UL({conv3dTranspose_:function(e,t,n,r,s){const a=VL(e,"x","conv3dTranspose"),o=VL(t,"filter","conv3dTranspose");return eP(n,a,o,r,s)}});const gH=UL({denseBincount_:function(e,t,n,r=!1){const s=VL(e,"x","denseBincount"),a=VL(t,"weights","denseBincount");KR("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),KR(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),KR(n>=0,(()=>`size must be non-negative, but got ${n}.`)),KR(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return RL.runKernel(I_,o,i)}});const yH=UL({depthToSpace_:function(e,t,n="NHWC"){const r=VL(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];KR(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),KR(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),KR(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return RL.runKernel(T_,i,l)}});const bH=UL({diag_:function(e){const t={x:VL(e,"x","diag")};return RL.runKernel(A_,t)}});const xH=UL({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=VL(e,"x","dilation2d"),i=VL(t,"filter","dilation2d");KR(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),KR(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),KR("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=tB(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:s},h=RL.runKernel(D_,c,p);return u?tB(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const wH=UL({divNoNan_:function(e,t){let n=VL(e,"a","div"),r=VL(t,"b","div");[n,r]=SL(n,r);const s=Uz(n,r),a=aB(s),o=YP(r,a);return UB(o,a,s)}});const kH=UL({dot_:function(e,t){const n=VL(e,"t1","dot"),r=VL(t,"t2","dot");KR(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(KR(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=tB(n,[1,-1]),t=tB(r,[-1,1]),s=RB(e,t);return tB(s,[])}if(1===n.rank&&2===r.rank){const e=tB(n,[1,-1]),t=tB(r,[r.shape[0],r.shape[1]]),s=RB(e,t);return tB(s,[s.size])}if(2===n.rank&&1===r.rank){const e=tB(r,[-1,1]),t=RB(n,e);return tB(t,[t.size])}{const e=tB(r,[r.shape[0],r.shape[1]]);return RB(n,e)}}});const vH=UL({erf_:function(e){let t=VL(e,"x","erf");KR("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Mz(t,"float32"));const n={x:t};return RL.runKernel(L_,n)}});const NH=UL({expm1_:function(e){const t={x:VL(e,"x","expm1")};return RL.runKernel(V_,t)}});const SH=UL({isFinite_:function(e){const t={x:VL(e,"x","isFinite")};return RL.runKernel(tO,t)}});const IH=UL({isInf_:function(e){const t={x:VL(e,"x","isInf")};return RL.runKernel(nO,t)}});const TH=UL({isNaN_:function(e){const t={x:VL(e,"x","isNaN")};return RL.runKernel(rO,t)}});function EH(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return RL.runKernel(iO,{},r)}const $H=UL({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=VL(e,"x","localResponseNormalization");KR(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),KR(tF(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=tB(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:s},c=RL.runKernel(fO,l,u);return i?tB(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const CH=UL({softplus_:function(e){const t={x:VL(e,"x","softplus")};return RL.runKernel(cM,t)}});const AH=UL({logSigmoid_:function(e){const t=VL(e,"x","logSigmoid");return XW((e=>({value:Gz(CH(Gz(e))),gradFunc:t=>Bz(t,fW(Gz(e)))})))(t)}});const DH=UL({logSoftmax_:function(e,t=-1){const n=VL(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return XW(((e,n)=>{const r=qU(e,t,!0),s=Kz(e,r),a=Kz(Mz(s,"float32"),kV(nB(SP(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=SP(r);return Kz(e,Bz(nB(e,t,!0),s))}}}))(n)}});const RH=UL({logicalOr_:function(e,t){const n=VL(e,"a","logicalOr","bool"),r=VL(t,"b","logicalOr","bool");eB(n.shape,r.shape);const s={a:n,b:r};return RL.runKernel(hO,s)}});const FH=UL({logicalXor_:function(e,t){const n=VL(e,"a","logicalXor","bool"),r=VL(t,"b","logicalXor","bool");return eB(n.shape,r.shape),VB(RH(e,t),MV(VB(e,t)))}});const _H=UL({maxPool_:function(e,t,n,r,s){const a=VL(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=tB(a,[1,a.shape[0],a.shape[1],a.shape[2]])),KR(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),KR(TB(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&KR(tF(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=RL.runKernel(bO,l,u);return i?tB(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const OH=UL({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC",o){null==o?o=[1,1,1]:nG("dilations is deprecated, this field will be gone in v3.0.0.");const i=VL(e,"x","maxPool3d");let l=i,u=!1;4===i.rank&&(u=!0,l=tB(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),KR(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),KR("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),KR(TB(n,o),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`)),null!=s&&KR(tF(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:l},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:o},h=RL.runKernel(wO,c,p);return u?tB(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const MH=UL({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:VL(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=RL.runKernel(vO,a,o);return{result:i[0],indexes:i[1]}}});const LH=UL({mirrorPad_:function(e,t,n){KR("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=VL(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");KR(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)KR(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KR(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return RL.runKernel(TO,o,a)}});const zH=UL({mod_:function(e,t){let n=VL(e,"a","mod"),r=VL(t,"b","mod");[n,r]=SL(n,r);const s={a:n,b:r};return RL.runKernel(EO,s)}});const BH=UL({moments_:function(e,t=null,n=!1){const r=lF(t,(e=VL(e,"x","moments")).shape),s=SG(e,r,n);let a=s.shape;n||(a=cP(s.shape,r));const o=jz(Kz(Mz(e,"float32"),tB(s,a)));return{mean:s,variance:SG(o,r,n)}}});const PH=UL({multiRNNCell_:function(e,t,n,r){const s=VL(t,"data","multiRNNCell"),a=WL(n,"c","multiRNNCell"),o=WL(r,"h","multiRNNCell");let i=s;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const VH=UL({multinomial_:function(e,t,n,r=!1){const s=VL(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?tB(s,[1,-1]):s},l={numSamples:t,seed:n,normalized:r},u=RL.runKernel($O,i,l);return 1===o?tB(u,[u.size]):u}});const WH=UL({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:VL(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:r};return RL.runKernel(MO,s,a)}});const UH=UL({onesLike_:function(e){const t={x:VL(e,"x","onesLike")};return RL.runKernel(OO,t)}});const GH=UL({outerProduct_:function(e,t){const n=VL(e,"v1","outerProduct"),r=VL(t,"v2","outerProduct");KR(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=tB(n,[-1,1]),a=tB(r,[1,-1]);return RB(s,a)}});const HH=UL({pad1d_:function(e,t,n=0){return KR(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),KV(e,[t],n)}});const qH=UL({pad2d_:function(e,t,n=0){return KR(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KV(e,t,n)}});const jH=UL({pad3d_:function(e,t,n=0){return KR(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KV(e,t,n)}});const KH=UL({pad4d_:function(e,t,n=0){return KR(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),KV(e,t,n)}});const XH=UL({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const o=VL(e,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=tB(o,[1,o.shape[0],o.shape[1],o.shape[2]])),KR(TB(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const u=gB(i.shape,t,a,s,r),c=[u.dilationHeight,u.dilationWidth];let p;p="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const h=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([u.inHeight,u.inWidth],c,p),m=h?r:"valid",g=h?i:_B(i,c,d),y=("avg"===n?()=>ZG(g,t,a,m):()=>_H(g,t,a,m))(),b=h?y:gW(y,c,f);return l?tB(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const YH=UL({prod_:function(e,t=null,n=!1){let r=VL(e,"x","prod");"bool"===r.dtype&&(r=Mz(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return RL.runKernel(WO,s,a)}});const ZH=UL({rand_:function(e,t,n){const r=JR(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return RL.makeTensor(s,e,n)}});var JH={};t(JH,"TEST_EPSILON_FLOAT16",(()=>QH)),t(JH,"expectArraysClose",(()=>eq)),t(JH,"testEpsilon",(()=>tq)),t(JH,"expectPromiseToFail",(()=>rq)),t(JH,"expectArraysEqual",(()=>sq)),t(JH,"expectNumbersClose",(()=>aq)),t(JH,"expectValuesInRange",(()=>iq)),t(JH,"expectArrayBuffersEqual",(()=>lq)),t(JH,"encodeStrings",(()=>uq));const QH=.1;function eq(e,t,n){return null==n&&(n=tq()),nq(e,t,((e,t)=>oq(e,t,n)))}function tq(){return 32===RL.backend.floatPrecision()?.001:QH}function nq(e,t,n){let r=!0;if((mF(e)||mF(t))&&(r=!1),mF(e)&&mF(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=zL(e),r=zL(t);if(!eF(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=mF(e)?e:ZR(e),a=mF(t)?t:ZR(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=s[e],r=a[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function rq(e,t){e().then((()=>t.fail()),(()=>t()))}function sq(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return bF(e)||bF(e[0])||bF(t)||bF(t[0])?nq(e,n,((e,t)=>e==t)):nq(e,t,((e,t)=>oq(e,t,0)))}function aq(e,t,n){if(null==n&&(n=tq()),!oq(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function oq(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function iq(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function lq(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function uq(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?uq(n):e[t]=QM(n)}return e}class cq{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Mc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class pq{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Mc.alea(s.toString()),this.randn=new cq(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class hq{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Mc.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const dq=UL({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new pq(t,n,r,s),o=Oz(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const fq=UL({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new cq(t,n,r,!1,s),o=Oz(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const mq=UL({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Oz(e,r),o=new hq(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});const gq=UL({reciprocal_:function(e){const t={x:VL(e,"x","reciprocal")};return RL.runKernel(HO,t)}});const yq=UL({reverse1d_:function(e){const t=VL(e,"x","reverse");return KR(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),RV(t,0)}});const bq=UL({reverse2d_:function(e,t){const n=VL(e,"x","reverse");return KR(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),RV(n,t)}});const xq=UL({reverse3d_:function(e,t){const n=VL(e,"x","reverse");return KR(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),RV(n,t)}});const wq=UL({reverse4d_:function(e,t){const n=VL(e,"x","reverse");return KR(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),RV(n,t)}});const kq=UL({round_:function(e){const t={x:VL(e,"x","round")};return RL.runKernel(eM,t)}});const vq=UL({selu_:function(e){const t={x:VL(e,"x","selu")};return RL.runKernel(sM,t)}});const Nq=UL({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=VL(e,"x","separableConv2d"),l=VL(t,"depthwiseFilter","separableConv2d"),u=VL(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=tB(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");KR(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),KR(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),KR(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),KR(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),KR(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];KR(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=lU(c,l,r,s,o,a),m=ZB(f,u,1,"valid",o);return p?tB(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Sq=async function(e,t){const n=VL(e,"x","setdiff1d"),r=VL(t,"y","setdiff1d");KR(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),KR(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),KR(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const l=new uL([i],n.dtype),u=new uL([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(l.values[t]=s[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const Iq=UL({sign_:function(e){const t={x:VL(e,"x","sign")};return RL.runKernel(lM,t)}});const Tq=UL({slice1d_:function(e,t,n){const r=VL(e,"x","slice1d");return KR(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),cV(r,[t],[n])}});const Eq=UL({slice2d_:function(e,t,n){const r=VL(e,"x","slice2d");return KR(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),cV(r,t,n)}});const $q=UL({slice3d_:function(e,t,n){const r=VL(e,"x","slice3d");return KR(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),cV(r,t,n)}});const Cq=UL({slice4d_:function(e,t,n){const r=VL(e,"x","slice4d");return KR(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),cV(r,t,n)}});const Aq=UL({softmax_:function(e,t=-1){const n=VL(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return RL.runKernel(mM,r,s)}});const Dq=UL({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,l=0){const u={x:VL(e,"x","stridedSlice")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return RL.runKernel(wM,u,c)}});const Rq=UL({tan_:function(e){const t={x:VL(e,"x","tan")};return RL.runKernel(kM,t)}});function Fq(e,t,n){if(YR(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=zL(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return HL(e,t,r,n)}function _q(e,t,n){if(YR(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=zL(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return HL(e,t,r,n)}function Oq(e,t,n){if(YR(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=zL(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return HL(e,t,r,n)}function Mq(e,t,n){if(YR(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=zL(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return HL(e,t=t||r,r,n)}const Lq=UL({topk_:function(e,t=1,n=!0){const r=VL(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,l]=RL.runKernel(SM,a,o);return{values:i,indices:l}}});const zq=UL({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new cq(t,n,r,!0,s),o=Oz(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Bq=UL({unique_:function(e,t=0){const n=VL(e,"x","unique","string_or_numeric");KR(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=RL.runKernel(TM,r,s);return{values:a,indices:o}}});function Pq(e,t=!0,n,r){return RL.makeVariable(e,t,n,r)}function Vq(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Oz(e,"int32"),s=Oz([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const Wq=async function(e){const t=VL(e,"condition","whereAsync","bool"),n=await t.data(),r=Vq(t.shape,n);return e!==t&&t.dispose(),r};var Uq={};t(Uq,"booleanMaskAsync",(()=>Gq));const Gq=async function(e,t,n){const r=VL(e,"tensor","boolMask"),s=VL(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;KR(o>0,(()=>"mask cannot be scalar")),XR(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+o;e++)l*=i[e];const u=i.slice(0,a).concat([l],i.slice(a+o)),c=tB(r,u),p=tB(s,[-1]),h=await Wq(p),d=YU(h,[1]),f=FW(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var Hq={};t(Hq,"equalStrict",(()=>qq)),t(Hq,"greaterEqualStrict",(()=>jq)),t(Hq,"greaterStrict",(()=>Kq)),t(Hq,"lessEqualStrict",(()=>Xq)),t(Hq,"lessStrict",(()=>Yq)),t(Hq,"notEqualStrict",(()=>Zq));const qq=UL({equalStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","equalStrict"),r=VL(t,"b","equalStrict");return XR(n.shape,r.shape,"Error in equalStrict: "),YP(n,r)}}),jq=UL({greaterEqualStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","greaterEqualStrict"),r=VL(t,"b","greaterEqualStrict");return XR(n.shape,r.shape,"Error in greaterEqualStrict: "),BB(n,r)}}),Kq=UL({greaterStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","greaterStrict"),r=VL(t,"b","greaterStrict");return XR(n.shape,r.shape,"Error in greaterStrict: "),UP(n,r)}}),Xq=UL({lessEqualStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","lessEqualStrict"),r=VL(t,"b","lessEqualStrict");return XR(n.shape,r.shape,"Error in lessEqualStrict: "),PB(n,r)}}),Yq=UL({lessStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","lessStrict"),r=VL(t,"b","lessStrict");return XR(n.shape,r.shape,"Error in lessStrict: "),QP(n,r)}}),Zq=UL({notEqualStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","notEqualStrict"),r=VL(t,"b","notEqualStrict");return XR(n.shape,r.shape,"Error in notEqualStrict: "),IG(n,r)}});var Jq={};t(Jq,"addStrict",(()=>Qq)),t(Jq,"divStrict",(()=>ej)),t(Jq,"maximumStrict",(()=>tj)),t(Jq,"minimumStrict",(()=>nj)),t(Jq,"modStrict",(()=>rj)),t(Jq,"mulStrict",(()=>sj)),t(Jq,"powStrict",(()=>aj)),t(Jq,"squaredDifferenceStrict",(()=>oj)),t(Jq,"subStrict",(()=>ij));const Qq=UL({addStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","addStrict"),r=VL(t,"b","addStrict");return XR(n.shape,r.shape,"Error in addStrict: "),uB(n,r)}}),ej=UL({divStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","div"),r=VL(t,"b","div");return XR(n.shape,r.shape,"Error in divideStrict: "),Uz(n,r)}}),tj=UL({maximumStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","maximumStrict"),r=VL(t,"b","maximumStrict");return XR(n.shape,r.shape,"Error in maximumStrict: "),_W(n,r)}}),nj=UL({minimumStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","minimumStrict"),r=VL(t,"b","minimumStrict");return XR(n.shape,r.shape,"Error in minimumStrict: "),AG(n,r)}}),rj=UL({modStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","modStrict"),r=VL(t,"b","modStrict");return XR(n.shape,r.shape,"Error in modStrict: "),zH(n,r)}}),sj=UL({mulStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","mul"),r=VL(t,"b","mul");return XR(n.shape,r.shape,"Error in multiplyStrict: "),Bz(n,r)}}),aj=UL({powStrict_:function(e,t){return nG("strict variants of ops have been deprecated and will be removed in future"),XR(e.shape,t.shape,"Error in powStrict: "),vV(e,t)}}),oj=UL({squaredDifferenceStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","squaredDifferenceStrict"),r=VL(t,"b","squaredDifferenceStrict");return XR(n.shape,r.shape,"Error in squaredDifferenceStrict: "),FG(n,r)}}),ij=UL({subStrict_:function(e,t){nG("strict variants of ops have been deprecated and will be removed in future");const n=VL(e,"a","subStrict"),r=VL(t,"b","subStrict");return XR(n.shape,r.shape,"Error in subStrict: "),Kz(n,r)}});var lj={};t(lj,"movingAverage",(()=>uj));const uj=UL({movingAverage_:function(e,t,n,r,s=!0){const a=VL(e,"v","movingAverage"),o=VL(t,"x","movingAverage"),i=VL(n,"decay","movingAverage");IL(a,o),KR(eF(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=Hz(1),u=Kz(l,i);let c=Bz(Kz(o,a),u);if(s){KR(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=VL(r,"step","movingAverage");c=Uz(c,Kz(l,vV(i,e)))}return uB(a,c)}});var cj={};t(cj,"scatterND",(()=>mj));var pj={};function hj(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function dj(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}hj(n,t,e)}function fj(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:JR(t.shape)/i,sliceSize:o,strides:[...SF(n.slice(0,s)),1],outputSize:JR(n)}}t(pj,"validateUpdateShape",(()=>hj)),t(pj,"validateInput",(()=>dj)),t(pj,"calculateShapes",(()=>fj));const mj=UL({scatterND_:function(e,t,n){const r=VL(e,"indices","scatterND","int32"),s=VL(t,"updates","scatterND");dj(s,r,n);const a={indices:r,updates:s},o={shape:n};return RL.runKernel(nM,a,o)}});var gj={};t(gj,"sparseToDense",(()=>yj));const yj=UL({sparseToDense_:function(e,t,n,r=0){const s=VL(e,"sparseIndices","sparseToDense","int32"),a=VL(t,"sparseValues","sparseToDense"),o=VL(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},l={outputShape:n};return RL.runKernel(xM,i,l)}});var bj={};t(bj,"gatherND",(()=>xj));const xj=UL({gatherND_:function(e,t){const n=VL(t,"indices","gatherND","int32"),r={params:VL(e,"x","gatherND"),indices:n};return RL.runKernel(X_,r)}});var wj={};t(wj,"dropout",(()=>kj));const kj=UL({dropout_:function(e,t,n,r){const s=VL(e,"x","dropout");if(KR("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),KR(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof dL?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(eF(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=Uz(hV(uB(mq(a,0,1,"float32",r),o)),o);return Bz(s,i)}});var vj={};t(vj,"inTopKAsync",(()=>Nj));const Nj=async function(e,t,n=1){const r=VL(e,"predictions","inTopK"),s=VL(t,"targets","inTopK");KR(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),KR(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),XR(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];KR(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[l,u]=[o.length/a,a],c=cF("bool",l);for(let e=0;e<l;e++){const t=e*u,r=o.subarray(t,t+u),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),qL(c,s.shape,"bool")},Sj={fft:BW,ifft:VW,rfft:PW,irfft:WW},Ij={hammingWindow:mU,hannWindow:gU,frame:xU,stft:wU},Tj={flipLeftRight:vU,resizeNearestNeighbor:VU,resizeBilinear:PU,rotateWithOffset:NU,cropAndResize:kU,nonMaxSuppression:IU,nonMaxSuppressionAsync:OU,nonMaxSuppressionWithScore:MU,nonMaxSuppressionWithScoreAsync:LU,nonMaxSuppressionPadded:zU,nonMaxSuppressionPaddedAsync:BU},Ej={bandPart:UU,gramSchmidt:ZU,qr:vG},$j={absoluteDifference:EG,computeWeightedLoss:TG,cosineDistance:$G,hingeLoss:CG,huberLoss:DG,logLoss:RG,meanSquaredError:_G,sigmoidCrossEntropy:MG,softmaxCrossEntropy:zG};n(MW,Uq),n(MW,gP),n(MW,GU),n(MW,lj),n(MW,cj),n(MW,gj),n(MW,bj),n(MW,wj),n(MW,pU),n(MW,vj),n(MW,Hq),n(MW,Jq),dL.prototype.abs=function(){return this.throwIfDisposed(),HU(this)},dL.prototype.acos=function(){return this.throwIfDisposed(),BG(this)},dL.prototype.acosh=function(){return this.throwIfDisposed(),PG(this)},dL.prototype.addStrict=function(e){return this.throwIfDisposed(),Qq(this,e)},dL.prototype.add=function(e){return this.throwIfDisposed(),uB(this,e)},dL.prototype.all=function(e,t){return this.throwIfDisposed(),WG(this,e,t)},dL.prototype.any=function(e,t){return this.throwIfDisposed(),UG(this,e,t)},dL.prototype.argMax=function(e){return this.throwIfDisposed(),GG(this,e)},dL.prototype.argMin=function(e){return this.throwIfDisposed(),HG(this,e)},dL.prototype.asScalar=function(){return this.throwIfDisposed(),KR(1===this.size,(()=>"The array must have only 1 element.")),tB(this,[])},dL.prototype.asType=function(e){return this.throwIfDisposed(),Mz(this,e)},dL.prototype.as1D=function(){return this.throwIfDisposed(),tB(this,[this.size])},dL.prototype.as2D=function(e,t){return this.throwIfDisposed(),tB(this,[e,t])},dL.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),tB(this,[e,t,n])},dL.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),tB(this,[e,t,n,r])},dL.prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),tB(this,[e,t,n,r,s])},dL.prototype.asin=function(){return this.throwIfDisposed(),qG(this)},dL.prototype.asinh=function(){return this.throwIfDisposed(),jG(this)},dL.prototype.atan=function(){return this.throwIfDisposed(),KG(this)},dL.prototype.atan2=function(e){return this.throwIfDisposed(),XG(this,e)},dL.prototype.atanh=function(){return this.throwIfDisposed(),YG(this)},dL.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),ZG(this,e,t,n,r)},dL.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),gW(this,e,t)},dL.prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),tH(this,e,t,n,r,s)},dL.prototype.broadcastTo=function(e){return this.throwIfDisposed(),WB(this,e)},dL.prototype.cast=function(e){return this.throwIfDisposed(),Mz(this,e)},dL.prototype.ceil=function(){return this.throwIfDisposed(),oH(this)},dL.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),iH(this,e,t)},dL.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof dL&&(e=[e]),bW([this,...e],t)},dL.prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),hH(this,e,t,n,r,s,a)},dL.prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),dH(this,e,t,n,r,s)},dL.prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ZB(this,e,t,n,r,s,a)},dL.prototype.cos=function(){return this.throwIfDisposed(),GV(this)},dL.prototype.cosh=function(){return this.throwIfDisposed(),qV(this)},dL.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),mP(this,e,t,n)},dL.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),yH(this,e,t)},dL.prototype.depthwiseConv2D=function(e,t,n,r,s,a){return nG("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),lU(this,e,t,n,r,s,a)},dL.prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),lU(this,e,t,n,r,s,a)},dL.prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),xH(this,e,t,n,r,s)},dL.prototype.divNoNan=function(e){return this.throwIfDisposed(),wH(this,e)},dL.prototype.divStrict=function(e){return this.throwIfDisposed(),ej(this,e)},dL.prototype.div=function(e){return this.throwIfDisposed(),Uz(this,e)},dL.prototype.dot=function(e){return this.throwIfDisposed(),kH(this,e)},dL.prototype.elu=function(){return this.throwIfDisposed(),JW(this)},dL.prototype.equalStrict=function(e){return this.throwIfDisposed(),qq(this,e)},dL.prototype.equal=function(e){return this.throwIfDisposed(),YP(this,e)},dL.prototype.erf=function(){return this.throwIfDisposed(),vH(this)},dL.prototype.exp=function(){return this.throwIfDisposed(),SP(this)},dL.prototype.expandDims=function(e){return this.throwIfDisposed(),RW(this,e)},dL.prototype.expm1=function(){return this.throwIfDisposed(),NH(this)},dL.prototype.fft=function(){return this.throwIfDisposed(),BW(this)},dL.prototype.flatten=function(){return this.throwIfDisposed(),tB(this,[this.size])},dL.prototype.floor=function(){return this.throwIfDisposed(),hV(this)},dL.prototype.floorDiv=function(e){return this.throwIfDisposed(),Wz(this,e)},dL.prototype.gather=function(e,t){return this.throwIfDisposed(),FW(this,e,t)},dL.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),jq(this,e)},dL.prototype.greaterEqual=function(e){return this.throwIfDisposed(),BB(this,e)},dL.prototype.greaterStrict=function(e){return this.throwIfDisposed(),Kq(this,e)},dL.prototype.greater=function(e){return this.throwIfDisposed(),UP(this,e)},dL.prototype.ifft=function(){return this.throwIfDisposed(),VW(this)},dL.prototype.irfft=function(){return this.throwIfDisposed(),WW(this)},dL.prototype.isFinite=function(){return this.throwIfDisposed(),SH(this)},dL.prototype.isInf=function(){return this.throwIfDisposed(),IH(this)},dL.prototype.isNaN=function(){return this.throwIfDisposed(),TH(this)},dL.prototype.leakyRelu=function(e){return this.throwIfDisposed(),QW(this,e)},dL.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Xq(this,e)},dL.prototype.lessEqual=function(e){return this.throwIfDisposed(),PB(this,e)},dL.prototype.lessStrict=function(e){return this.throwIfDisposed(),Yq(this,e)},dL.prototype.less=function(e){return this.throwIfDisposed(),QP(this,e)},dL.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),$H(this,e,t,n,r)},dL.prototype.logSigmoid=function(){return this.throwIfDisposed(),AH(this)},dL.prototype.logSoftmax=function(e){return this.throwIfDisposed(),DH(this,e)},dL.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),LG(this,e,t)},dL.prototype.log=function(){return this.throwIfDisposed(),kV(this)},dL.prototype.log1p=function(){return this.throwIfDisposed(),OG(this)},dL.prototype.logicalAnd=function(e){return this.throwIfDisposed(),VB(this,e)},dL.prototype.logicalNot=function(){return this.throwIfDisposed(),MV(this)},dL.prototype.logicalOr=function(e){return this.throwIfDisposed(),RH(this,e)},dL.prototype.logicalXor=function(e){return this.throwIfDisposed(),FH(this,e)},dL.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),RB(this,e,t,n)},dL.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),_H(this,e,t,n,r)},dL.prototype.max=function(e,t){return this.throwIfDisposed(),qU(this,e,t)},dL.prototype.maximumStrict=function(e){return this.throwIfDisposed(),tj(this,e)},dL.prototype.maximum=function(e){return this.throwIfDisposed(),_W(this,e)},dL.prototype.mean=function(e,t){return this.throwIfDisposed(),SG(this,e,t)},dL.prototype.min=function(e,t){return this.throwIfDisposed(),jU(this,e,t)},dL.prototype.minimumStrict=function(e){return this.throwIfDisposed(),nj(this,e)},dL.prototype.minimum=function(e){return this.throwIfDisposed(),AG(this,e)},dL.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),LH(this,e,t)},dL.prototype.modStrict=function(e){return this.throwIfDisposed(),rj(this,e)},dL.prototype.mod=function(e){return this.throwIfDisposed(),zH(this,e)},dL.prototype.mulStrict=function(e){return this.throwIfDisposed(),sj(this,e)},dL.prototype.mul=function(e){return this.throwIfDisposed(),Bz(this,e)},dL.prototype.neg=function(){return this.throwIfDisposed(),Gz(this)},dL.prototype.norm=function(e,t,n){return this.throwIfDisposed(),XU(this,e,t,n)},dL.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Zq(this,e)},dL.prototype.notEqual=function(e){return this.throwIfDisposed(),IG(this,e)},dL.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),WH(this,e,t,n)},dL.prototype.onesLike=function(){return this.throwIfDisposed(),UH(this)},dL.prototype.pad=function(e,t){return this.throwIfDisposed(),KV(this,e,t)},dL.prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),XH(this,e,t,n,r,s)},dL.prototype.powStrict=function(e){return this.throwIfDisposed(),aj(this,e)},dL.prototype.pow=function(e){return this.throwIfDisposed(),vV(this,e)},dL.prototype.prelu=function(e){return this.throwIfDisposed(),eU(this,e)},dL.prototype.prod=function(e,t){return this.throwIfDisposed(),YH(this,e,t)},dL.prototype.reciprocal=function(){return this.throwIfDisposed(),gq(this)},dL.prototype.relu=function(){return this.throwIfDisposed(),tU(this)},dL.prototype.relu6=function(){return this.throwIfDisposed(),nU(this)},dL.prototype.reshapeAs=function(e){return this.throwIfDisposed(),tB(this,e.shape)},dL.prototype.reshape=function(e){return this.throwIfDisposed(),tB(this,e)},dL.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),PU(this,e,t,n)},dL.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),VU(this,e,t,n)},dL.prototype.reverse=function(e){return this.throwIfDisposed(),RV(this,e)},dL.prototype.rfft=function(){return this.throwIfDisposed(),PW(this)},dL.prototype.round=function(){return this.throwIfDisposed(),kq(this)},dL.prototype.rsqrt=function(){return this.throwIfDisposed(),DP(this)},dL.prototype.selu=function(){return this.throwIfDisposed(),vq(this)},dL.prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Nq(this,e,t,n,r,s,a)},dL.prototype.sigmoid=function(){return this.throwIfDisposed(),fW(this)},dL.prototype.sign=function(){return this.throwIfDisposed(),Iq(this)},dL.prototype.sin=function(){return this.throwIfDisposed(),nP(this)},dL.prototype.sinh=function(){return this.throwIfDisposed(),sP(this)},dL.prototype.slice=function(e,t){return this.throwIfDisposed(),cV(this,e,t)},dL.prototype.softmax=function(e){return this.throwIfDisposed(),Aq(this,e)},dL.prototype.softplus=function(){return this.throwIfDisposed(),CH(this)},dL.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),_B(this,e,t)},dL.prototype.split=function(e,t){return this.throwIfDisposed(),qB(this,e,t)},dL.prototype.sqrt=function(){return this.throwIfDisposed(),qz(this)},dL.prototype.square=function(){return this.throwIfDisposed(),jz(this)},dL.prototype.squaredDifference=function(e){return this.throwIfDisposed(),FG(this,e)},dL.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),oj(this,e)},dL.prototype.squeeze=function(e){return this.throwIfDisposed(),YU(this,e)},dL.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof dL?[this,e]:[this,...e];return AW(n,t)},dL.prototype.step=function(e){return this.throwIfDisposed(),Pz(this,e)},dL.prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),Dq(this,e,t,n,r,s,a,o,i)},dL.prototype.subStrict=function(e){return this.throwIfDisposed(),ij(this,e)},dL.prototype.sub=function(e){return this.throwIfDisposed(),Kz(this,e)},dL.prototype.sum=function(e,t){return this.throwIfDisposed(),nB(this,e,t)},dL.prototype.tan=function(){return this.throwIfDisposed(),Rq(this)},dL.prototype.tanh=function(){return this.throwIfDisposed(),QG(this)},dL.prototype.tile=function(e){return this.throwIfDisposed(),RP(this,e)},dL.prototype.toBool=function(){return this.throwIfDisposed(),Mz(this,"bool")},dL.prototype.toFloat=function(){return this.throwIfDisposed(),Mz(this,"float32")},dL.prototype.toInt=function(){return this.throwIfDisposed(),Mz(this,"int32")},dL.prototype.topk=function(e,t){return this.throwIfDisposed(),Lq(this,e,t)},dL.prototype.transpose=function(e){return this.throwIfDisposed(),yP(this,e)},dL.prototype.unique=function(e){return this.throwIfDisposed(),Bq(this,e)},dL.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),_P(this,e,t)},dL.prototype.unstack=function(e){return this.throwIfDisposed(),bV(this,e)},dL.prototype.where=function(e,t){return this.throwIfDisposed(),UB(e,this,t)},dL.prototype.zerosLike=function(){return this.throwIfDisposed(),aB(this)};var Cj={};t(Cj,"AdadeltaOptimizer",(()=>QK)),t(Cj,"AdagradOptimizer",(()=>eX)),t(Cj,"AdamOptimizer",(()=>tX)),t(Cj,"AdamaxOptimizer",(()=>nX)),t(Cj,"MomentumOptimizer",(()=>sX)),t(Cj,"Optimizer",(()=>JK)),t(Cj,"RMSPropOptimizer",(()=>aX)),t(Cj,"SGDOptimizer",(()=>rX)),t(Cj,"Tensor",(()=>dL)),t(Cj,"TensorBuffer",(()=>uL)),t(Cj,"Variable",(()=>fL)),t(Cj,"Rank",(()=>mL)),t(Cj,"sumOutType",(()=>NL)),t(Cj,"upcastType",(()=>vL)),t(Cj,"Reduction",(()=>NG)),t(Cj,"customGrad",(()=>XW)),t(Cj,"grad",(()=>GW)),t(Cj,"grads",(()=>HW)),t(Cj,"valueAndGrad",(()=>qW)),t(Cj,"valueAndGrads",(()=>jW)),t(Cj,"variableGrads",(()=>KW)),t(Cj,"Environment",(()=>_F)),t(Cj,"env",(()=>OF)),t(Cj,"ENV",(()=>LF)),t(Cj,"version_core",(()=>oK)),t(Cj,"nextFrame",(()=>cX)),t(Cj,"browser",(()=>Yj)),t(Cj,"io",(()=>Aj)),t(Cj,"math",(()=>Kj)),t(Cj,"serialization",(()=>nK)),t(Cj,"test_util",(()=>JH)),t(Cj,"util",(()=>KM)),t(Cj,"backend_util",(()=>iK)),t(Cj,"tensor_util",(()=>wL)),t(Cj,"slice_util",(()=>XV)),t(Cj,"gather_util",(()=>eK)),t(Cj,"scatter_util",(()=>pj)),t(Cj,"device_util",(()=>_L)),t(Cj,"kernel_impls",(()=>ZK)),t(Cj,"KernelBackend",(()=>BR)),t(Cj,"DataStorage",(()=>zR));var Aj={};t(Aj,"copyModel",(()=>Az)),t(Aj,"listModels",(()=>$z)),t(Aj,"moveModel",(()=>Dz)),t(Aj,"removeModel",(()=>Cz)),t(Aj,"browserFiles",(()=>_j)),t(Aj,"browserHTTPRequest",(()=>Uj)),t(Aj,"concatenateArrayBuffers",(()=>ez)),t(Aj,"decodeWeights",(()=>YL)),t(Aj,"encodeWeights",(()=>XL)),t(Aj,"fromMemory",(()=>qj)),t(Aj,"getLoadHandlers",(()=>lz)),t(Aj,"getModelArtifactsInfoForJSON",(()=>nz)),t(Aj,"getSaveHandlers",(()=>iz)),t(Aj,"http",(()=>Wj)),t(Aj,"isHTTPScheme",(()=>Pj)),t(Aj,"loadWeights",(()=>Lj)),t(Aj,"registerLoadRouter",(()=>oz)),t(Aj,"registerSaveRouter",(()=>az)),t(Aj,"weightsLoaderFactory",(()=>zj)),t(Aj,"withSaveHandler",(()=>jj));function Dj(e){return new Promise((e=>setTimeout(e))).then(e)}class Rj{constructor(e){if(!OF().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Rj.URL_SCHEME)&&(e=e.slice(Rj.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer);const s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Dj((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Dj((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:nz(e)}}}}Rj.URL_SCHEME="downloads://";class Fj{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),o=a.modelTopology;if(null==o)return void r(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:o});const i=a.weightsManifest;if(null==i)return void r(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(i,t)}catch(e){return void r(e)}const u=[],c=[],p=[];i.forEach((e=>{e.paths.forEach((e=>{c.push(e),p.push(null)})),u.push(...e.weights)})),i.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,s=c.indexOf(e);if(p[s]=r,-1===p.indexOf(null)){const e={modelTopology:o,weightSpecs:u,weightData:ez(p),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},s.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],r=t.map((e=>tz(e.name))),s={};for(const a of e)a.paths.forEach((e=>{const a=tz(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=t[r.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return s}}function _j(e){return new Fj(e)}function Oj(e,t,n,r){var s,a,o;KR(null!=(s=e)&&Array.isArray(s)&&s.length>0,(()=>"promises must be a none empty array")),o=r=null==r?1:r,KR((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),KR(o>=0&&o<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${o}`)),KR(o>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${o}`));let i=0;return Promise.all(e.map((s=>(s.then((s=>{const a=n+ ++i/e.length*(r-n);return t(a),s})),s))))}async function Mj(e,t){null==t&&(t={});const n=null==t.fetchFunc?OF().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Oj(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Oj(s,t.onProgress,.5,1)}async function Lj(e,t="",n,r){return zj((e=>Mj(e,{requestInit:r})))(e,t,n)}function zj(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=jL[l]*JR(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach((e=>{const t=YL(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}sz.registerSaveRouter((e=>OF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Rj.URL_SCHEME)?function(e="model"){return new Rj(e)}(e.slice(Rj.URL_SCHEME.length)):null));class Bj{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(KR("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=OF().platform.fetch,KR(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&KR(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:nz(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,o=t.format,i=t.signature,l=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=r){const e=await this.loadWeights(r);[u,c]=e}const p={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:s,convertedBy:a,format:o};null!=i&&(p.signature=i),null!=l&&(p.userDefinedMetadata=l);const h=t.modelInitializer;return h&&(p.modelInitializer=h),p}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,ez(await Mj(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Pj(e){return null!=e.match(Bj.URL_SCHEME_REGEX)}Bj.URL_SCHEME_REGEX=/^https?:\/\//;const Vj=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Pj(e))):Pj(e),n)return Wj(e,t)}return null};function Wj(e,t){return new Bj(e,t)}function Uj(e,t){return Wj(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */sz.registerSaveRouter(Vj),sz.registerLoadRouter(Vj);class Gj{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Hj{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function qj(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Gj(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gj({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gj({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function jj(e){return new Hj(e)}var Kj={};t(Kj,"confusionMatrix",(()=>Xj));const Xj=UL({confusionMatrix_:function(e,t,n){const r=VL(e,"labels","confusionMatrix"),s=VL(t,"predictions","confusionMatrix");KR(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),KR(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),KR(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),KR(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),KR(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=WH(Mz(r,"int32"),n),o=WH(Mz(s,"int32"),n),i=yP(a),l=RB(i,o);return Mz(l,"int32")}});var Yj={};let Zj;async function Jj(e,t){let n=VL(e,"img","toPixels");if(!(e instanceof dL)){const e=n;n=Mz(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=o[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*i,t[1]=s*i,t[2]=s*i):t[r]=s*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(Yj,"toPixels",(()=>Jj)),t(Yj,"fromPixels",(()=>Qj));const Qj=UL({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=BM(DM,RL.backendName)){const n={pixels:e},r={numChannels:t};return RL.runKernel(DM,n,r)}const[l,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o?c=e.getContext("2d").getImageData(0,0,l,u).data:r||n?c=e.data:(a||s||i)&&(null==Zj&&(Zj=document.createElement("canvas").getContext("2d")),Zj.canvas.width=l,Zj.canvas.height=u,Zj.drawImage(e,0,0,l,u),c=Zj.getImageData(0,0,l,u).data),4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return Fq(p,[u,l,t],"int32")}});var eK={};function tK(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===JR(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,l=s.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...SF(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}t(eK,"prepareAndValidate",(()=>tK));var nK={};t(nK,"Serializable",(()=>rK)),t(nK,"SerializationMap",(()=>sK)),t(nK,"registerClass",(()=>aK));class rK{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class sK{constructor(){this.classNameMap={}}static getMap(){return null==sK.instance&&(sK.instance=new sK),sK.instance}static register(e){sK.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function aK(e){KR(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),KR("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),KR(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),sK.register(e)}
/** @license See the LICENSE file. */const oK="2.8.6";var iK={};t(iK,"castTensor",(()=>jK)),t(iK,"reshapeTensor",(()=>KK)),t(iK,"fromUint8ToStringArray",(()=>XK)),t(iK,"fromStringArrayToUint8",(()=>YK)),t(iK,"slice_util",(()=>XV)),t(iK,"upcastType",(()=>vL)),t(iK,"segment_util",(()=>lK));var lK={};t(lK,"segOpComputeOptimalWindowSize",(()=>hK)),t(lK,"computeOutShape",(()=>dK)),t(lK,"collectGatherOpShapeInfo",(()=>fK));var uK={};t(uK,"PARALLELIZE_THRESHOLD",(()=>cK)),t(uK,"computeOptimalWindowSize",(()=>pK));const cK=30;function pK(e){return e<=cK?e:NF(e,Math.floor(Math.sqrt(e)))}function hK(e,t){let n,r=!1;for(e<=cK?(n=e,r=!0):n=NF(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=NF(e,n+1);return n}function dK(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function fK(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var mK={};function gK(e,t){const n=e[0].length;e.forEach(((e,t)=>{KR(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),KR(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)KR(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function yK(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(mK,"assertParamsConsistent",(()=>gK)),t(mK,"computeOutShape",(()=>yK));var bK={};function xK(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(bK,"getImageCenter",(()=>xK));var wK={};function kK(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function vK(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function NK(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function SK(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function IK(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}t(wK,"getReshaped",(()=>kK)),t(wK,"getPermuted",(()=>vK)),t(wK,"getReshapedPermuted",(()=>NK)),t(wK,"getSliceBeginCoords",(()=>SK)),t(wK,"getSliceSize",(()=>IK));var TK={};t(TK,"ERF_P",(()=>EK)),t(TK,"ERF_A1",(()=>$K)),t(TK,"ERF_A2",(()=>CK)),t(TK,"ERF_A3",(()=>AK)),t(TK,"ERF_A4",(()=>DK)),t(TK,"ERF_A5",(()=>RK));const EK=.3275911,$K=.254829592,CK=-.284496736,AK=1.421413741,DK=-1.453152027,RK=1.061405429;var FK={};function _K(...e){OF().getBool("IS_TEST")||console.warn(...e)}function OK(...e){OF().getBool("IS_TEST")||console.log(...e)}t(FK,"warn",(()=>_K)),t(FK,"log",(()=>OK));var MK={};function LK(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function zK(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function BK(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function PK(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function VK(e,t){return{real:e[2*t],imag:e[2*t+1]}}function WK(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function UK(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function GK(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(MK,"mergeRealAndImagArrays",(()=>LK)),t(MK,"splitRealAndImagArrays",(()=>zK)),t(MK,"complexWithEvenIndex",(()=>BK)),t(MK,"complexWithOddIndex",(()=>PK)),t(MK,"getComplexWithIndex",(()=>VK)),t(MK,"assignToTypedArray",(()=>WK)),t(MK,"exponents",(()=>UK)),t(MK,"exponent",(()=>GK));var HK={};function qK(e,t,n=0){let r=[];if("number"==typeof t)KR(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{KR(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}KR(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function jK(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=aV(e.shape),r=Mz(e,"float32"),s=n.complex(r,t);return t.dispose(),r.dispose(),s}if(!fF(e.dtype,t))return RL.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const r=n.real(e),s=Mz(r,t);return r.dispose(),s}if("int32"===t)return n.int(e);if("bool"===t){const t=Hz(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function KK(e,t){return RL.makeTensorFromDataId(e.dataId,t,e.dtype)}function XK(e){try{return e.map((e=>eL(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function YK(e){return e.map((e=>QM(e)))}t(HK,"prepareSplitSize",(()=>qK)),n(iK,oP),n(iK,Zz),n(iK,mK),n(iK,fB),n(iK,ZW),n(iK,uK),n(iK,bK),n(iK,wK),n(iK,eK),n(iK,pj),n(iK,zV),n(iK,TK),n(iK,FK),n(iK,MK),n(iK,HK);var ZK={};t(ZK,"nonMaxSuppressionV3Impl",(()=>$U)),t(ZK,"nonMaxSuppressionV4Impl",(()=>CU)),t(ZK,"nonMaxSuppressionV5Impl",(()=>AU)),t(ZK,"whereImpl",(()=>Vq));class JK extends rK{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return lG(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return KW(e,t)}dispose(){null!=this.iterations_&&lG(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Hz(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(JK,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class QK extends JK{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=RL.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=RL.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:iG((()=>aB(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:iG((()=>aB(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;iG((()=>{const e=uB(Bz(a,this.rho),Bz(jz(s),1-this.rho)),t=Bz(Uz(qz(uB(o,this.epsilon)),qz(uB(a,this.epsilon))),s),n=uB(Bz(o,this.rho),Bz(jz(t),1-this.rho));a.assign(e),o.assign(n);const i=uB(Bz(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(lG(this.accumulatedGrads.map((e=>e.variable))),lG(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}QK.className="Adadelta",aK(QK);class eX extends JK{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=RL.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:iG((()=>yU(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;iG((()=>{const e=uB(a,jz(s));a.assign(e);const t=uB(Bz(Uz(s,qz(uB(e,RL.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&lG(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}eX.className="Adagrad",aK(eX);class tX extends JK{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],iG((()=>{this.accBeta1=Hz(t).variable(),this.accBeta2=Hz(n).variable()})),null==r&&(this.epsilon=RL.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);iG((()=>{const n=Kz(1,this.accBeta1),r=Kz(1,this.accBeta2);t.forEach(((t,s)=>{const a=RL.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:iG((()=>aB(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:iG((()=>aB(a).variable(false)))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=uB(Bz(i,this.beta1),Bz(o,1-this.beta1)),c=uB(Bz(l,this.beta2),Bz(jz(o),1-this.beta2)),p=Uz(u,n),h=Uz(c,r);i.assign(u),l.assign(c);const d=uB(Bz(Uz(p,uB(qz(h),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Bz(this.accBeta1,this.beta1)),this.accBeta2.assign(Bz(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&lG(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&lG(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),iG((()=>{this.accBeta1.assign(vV(this.beta1,this.iterations_+1)),this.accBeta2.assign(vV(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}tX.className="Adam",aK(tX);class nX extends JK{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],iG((()=>{this.iteration=Hz(0).variable(),this.accBeta1=Hz(t).variable()})),null==r&&(this.epsilon=RL.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);iG((()=>{const n=Kz(1,this.accBeta1),r=Uz(-this.learningRate,uB(Bz(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=RL.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:aB(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:aB(a).variable(false)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=uB(Bz(i,this.beta1),Bz(o,1-this.beta1)),c=Bz(l,this.beta2),p=HU(o),h=_W(c,p);i.assign(u),l.assign(h);const d=uB(Bz(Uz(r,n),Uz(u,uB(h,this.epsilon))),a);a.assign(d)})),this.iteration.assign(uB(this.iteration,1)),this.accBeta1.assign(Bz(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&lG(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&lG(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}nX.className="Adamax",aK(nX);class rX extends JK{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=RL.registeredVariables[t];iG((()=>{const e=uB(Bz(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=uG(Hz(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}rX.className="SGD",aK(rX);class sX extends rX{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Hz(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=RL.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:iG((()=>aB(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&iG((()=>{let e;const t=uB(Bz(this.m,s),a);e=this.useNesterov?uB(Bz(this.c,uB(a,Bz(t,this.m))),r):uB(Bz(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&lG(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}sX.className="Momentum",aK(sX);class aX extends JK{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=RL.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=RL.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:iG((()=>aB(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:iG((()=>aB(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:iG((()=>aB(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;iG((()=>{const e=uB(Bz(o,this.decay),Bz(jz(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=uB(Bz(t,this.decay),Bz(a,1-this.decay)),l=Uz(Bz(a,this.learningRate),qz(Kz(e,uB(jz(s),this.epsilon)))),u=uB(Bz(i,this.momentum),l);o.assign(e),t.assign(s),i.assign(u);const c=Kz(r,u);r.assign(c)}else{const e=uB(Bz(o,this.decay),Bz(jz(a),1-this.decay)),t=uB(Bz(i,this.momentum),Uz(Bz(a,this.learningRate),qz(uB(e,this.epsilon))));o.assign(e),i.assign(t);const n=Kz(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&lG(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&lG(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&lG(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}aX.className="RMSProp",aK(aX);var oX={};t(oX,"train",(()=>lX));class iX{static sgd(e){return new rX(e)}static momentum(e,t,n=!1){return new sX(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new aX(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new tX(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new QK(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new nX(e,t,n,r,s)}static adagrad(e,t=.1){return new eX(e,t)}}const lX={sgd:iX.sgd,momentum:iX.momentum,adadelta:iX.adadelta,adagrad:iX.adagrad,rmsprop:iX.rmsprop,adamax:iX.adamax,adam:iX.adam},uX="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function cX(){return new Promise((e=>uX((()=>e()))))}var pX,hX;n(Cj,MW),n(Cj,oX),n(Cj,JU),n(Cj,MM),n(Cj,PF),n(LR,Cj),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(pX||(pX={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(hX||(hX={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dX={};function fX(e){return dX[e]}function mX(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return gX(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>gX(e,n,r,s)))}const i=gX(t.inputNames.slice(e)[0],n,r,s),l=i.dataSync();return"number"===a.type?l[0]:KM.toNestedArray(i.shape,l)}const o=t.attrParams[e];return o&&o.value}function gX(e,t,n,r){const[s,a]=xX(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[bX(s,e)]));return void 0!==o?t[bX(s,o)][a]:void 0}function yX(e,t){const[n,r]=xX(e);return[bX(n,t&&t.currentContextId),r]}function bX(e,t){return t?`${e}-${t}`:e}function xX(e){const t=e.split(":");if(1===t.length)return[e,0];return[t[0],Number(t[t.length-1])]}function wX(e,t,n){let r=mX("pad",e,t,n);if("explicit"===r){r=mX("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function kX(e){return e.kept?e:Lz(e)}var vX={};t(vX,"json",(()=>NX));const NX=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var SX={};t(SX,"json",(()=>IX));const IX=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var TX={};t(TX,"json",(()=>EX));const EX=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var $X={};t($X,"json",(()=>CX));const CX=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var AX={};t(AX,"json",(()=>DX));const DX=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var RX={};t(RX,"json",(()=>FX));const FX=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var _X={};t(_X,"json",(()=>OX));const OX=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var MX={};t(MX,"json",(()=>LX));const LX=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var zX={};t(zX,"json",(()=>BX));const BX=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}];var PX={};t(PX,"json",(()=>VX));const VX=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var WX={};t(WX,"json",(()=>UX));const UX=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var GX={};t(GX,"json",(()=>HX));const HX=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var qX={};t(qX,"json",(()=>jX));const jX=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var KX={};t(KX,"json",(()=>XX));const XX=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var YX={};t(YX,"json",(()=>ZX));const ZX=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var JX={};t(JX,"json",(()=>QX));const QX=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var eY={};t(eY,"json",(()=>tY));const tY=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];var nY=Dn;class rY{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[vX,SX,TX,$X,AX,RX,_X,WX,PX,MX,GX,qX,KX,YX,JX,eY,zX].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach((e=>{const[n]=yX(e);t.inputs.push(o[n]),o[n].children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=yX(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=yX(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:l,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=fX(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=aY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=aY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=mY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=mY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=iY(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=iY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=fY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=oY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=oY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=yY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=dY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=dY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=gY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=cY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=cY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=pY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=pY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=uY(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=uY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=yX(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:lY(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach((e=>{const[n]=yX(e);t.inputs.push(r[n]),r[n].children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=yX(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function sY(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=OF().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==nY)return new nY(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function aY(e,t,n,r=!1){const s=e[t];return null!=s?sY(s.s,r):n}function oY(e,t,n){const r=e[t];return r?r.b:n}function iY(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function lY(e){switch("string"==typeof e&&(e=pX[e]),e){case pX.DT_FLOAT:return"float32";case pX.DT_INT32:case pX.DT_INT64:case pX.DT_INT8:case pX.DT_UINT8:return"int32";case pX.DT_BOOL:return"bool";case pX.DT_DOUBLE:return"float32";case pX.DT_STRING:return"string";default:return null}}function uY(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function cY(e,t,n){const r=e[t];return r&&r.type?lY(r.type):n}function pY(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>lY(e))):n}function hY(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function dY(e,t,n){const r=e[t];return r&&r.shape?hY(r.shape):n}function fY(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function mY(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>sY(e,r))):n}function gY(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>hY(e))):n}function yY(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class bY{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return gX(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return gX(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return iY(this.node.rawAttrs,e,t);if(null!=n.s)return aY(this.node.rawAttrs,e,t);if(null!=n.b)return oY(this.node.rawAttrs,e,t);if(null!=n.shape)return dY(this.node.rawAttrs,e,t);if(null!=n.type)return cY(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return fY(this.node.rawAttrs,e,t);if(null!=n.list.s)return mY(this.node.rawAttrs,e,t);if(null!=n.list.shape)return gY(this.node.rawAttrs,e,t);if(null!=n.list.b)return yY(this.node.rawAttrs,e,t);if(null!=n.list.type)return pY(this.node.rawAttrs,e,t)}return t}}function xY(e,t,n=""){KM.assert(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class wY{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=Hz(0),uG(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),xY(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,uG(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return qL([],[0].concat(this.elementShape));const n=this.readMany(e);return xY(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),AW(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return qL([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return xY(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),bW(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,bV(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];iG((()=>{t=tB(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=tB(cV(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class kY{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);xY(t,e.shape,"TensorList shape mismatch: "),uG(e)})),this.idTensor=Hz(0),this.maxNumElements=r,uG(this.idTensor)}get id(){return this.idTensor.id}copy(){return new kY([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return xY(e,this.elementShape,"TensorList shape mismatch: "),iG((()=>{const t=this.tensors.map((t=>tB(t,e)));return AW(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return xY(n.shape,e,"TensorList shape mismatch: "),tB(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(xY(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");uG(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return xY(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);xY(this.elementShape,t.shape,"TensorList shape mismatch: "),uG(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return xY(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?qL([],[0].concat(this.elementShape)):iG((()=>{const t=e.map((e=>tB(this.tensors[e],n)));return AW(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return xY(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?qL([],[0].concat(this.elementShape)):iG((()=>{const e=this.tensors.map((e=>tB(e,t)));return bW(e,0)}))}}const vY=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=mX("thenBranch",e,t,n),s=mX("elseBranch",e,t,n),a=mX("cond",e,t,n),o=mX("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=mX("body",e,t,n),s=mX("cond",e,t,n),a=mX("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[kX(mX("pred",e,t,n))];case"Switch":{const r=mX("pred",e,t,n);let s=mX("data",e,t,n);return s.kept||(s=kX(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==gX(e,t,n)));if(r){return[kX(gX(r,t,n))]}return}case"Enter":{const r=mX("frameName",e,t,n),s=mX("tensor",e,t,n);return n.enterFrame(r),[kX(s)]}case"Exit":{const r=mX("tensor",e,t,n);return n.exitFrame(),[kX(r)]}case"NextIteration":{const r=mX("tensor",e,t,n);return n.nextIteration(),[kX(r)]}case"TensorArrayV3":{const r=mX("size",e,t,n),s=mX("dtype",e,t,n),a=mX("elementShape",e,t,n),o=mX("dynamicSize",e,t,n),i=mX("clearAfterRead",e,t,n),l=mX("identicalElementShapes",e,t,n),u=mX("name",e,t,n),c=new wY(u,s,r,a,l,o,i);return n.addTensorArray(c),[c.idTensor,Hz(1)]}case"TensorArrayWriteV3":{const r=mX("tensorArrayId",e,t,n),s=mX("index",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=mX("tensorArrayId",e,t,n),s=mX("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=mX("tensorArrayId",e,t,n),s=mX("indices",e,t,n),a=mX("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=mX("tensorArrayId",e,t,n),s=mX("indices",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=mX("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=mX("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=mX("tensorArrayId",e,t,n),s=mX("tensor",e,t,n),a=mX("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=mX("tensorArrayId",e,t,n);return[Hz(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=mX("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=mX("tensorListId",e,t,n),s=mX("index",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=mX("tensorListId",e,t,n),s=mX("index",e,t,n),a=mX("elementShape",e,t,n),o=mX("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=mX("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new kY([],n,e.dtype,r),o=bV(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}(mX("tensor",e,t,n),r,mX("elementShape",e,t,n),mX("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=mX("elementShape",e,t,n),s=mX("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,n){return new kY([],e,t,n)}(r,s,mX(a,e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=mX("tensorListId",e,t,n),s=mX("indices",e,t,n),a=mX("elementShape",e,t,n),o=mX("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=mX("tensorListId",e,t,n),s=mX("elementShape",e,t,n),a=mX("elementDType",e,t,n),o=mX("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);xY(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=bV(e);return new kY(s,t,r)}(mX("tensor",e,t,n),mX("elementShape",e,t,n),mX("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=mX("tensorListId",e,t,n),s=n.getTensorList(r.id),a=mX("dtype",e,t,n),o=mX("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=mX("tensorListId",e,t,n),s=mX("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=mX("tensorListId",e,t,n),s=mX("elementShape",e,t,n),a=mX("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=mX("tensor",e,t,n),s=mX("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=0===r?0:e.size/r,o=iG((()=>{const o=[];e=tB(e,[1,r,a]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],l=[1,t[r],a];o[r]=tB(cV(e,i,l),n)}return e.dispose(),o})),i=new kY([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)i.setItem(e,o[e]);return i}(r,mX("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function NY(e,t,n){const[r,s]=mX("fusedOps",e,t,n),a="biasadd"===r,o="prelu"===s,i="fusedbatchnorm"===r,l=mX("numArgs",e,t,n);if(a){if(o&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(i)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=mX("strides",e,t,n),c=wX(e,t,n),p=mX("dataFormat",e,t,n).toUpperCase(),h=mX("dilations",e,t,n),[d,f]=mX("args",e,t,n);return{stride:u,pad:c,dataFormat:p,dilations:h,biasArg:d,preluArg:f,activationFunc:s,leakyreluAlpha:mX("leakyreluAlpha",e,t,n)}}function SY(e,t,n){return{boxes:mX("boxes",e,t,n),scores:mX("scores",e,t,n),maxOutputSize:mX("maxOutputSize",e,t,n),iouThreshold:mX("iouThreshold",e,t,n),scoreThreshold:mX("scoreThreshold",e,t,n),softNmsSigma:mX("softNmsSigma",e,t,n)}}class IY{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Hz(0),this.tensorMap=new Map,uG(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),iG((()=>{const e=bV(t),r=n.length,s=e.length;KM.assert(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];uG(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return iG((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return AW(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function TY(e,t,n,r){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return iG((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[uB(mX("a",e,t,n),mX("b",e,t,n))];case"AddN":return[VG(mX("tensors",e,t,n))];case"FloorMod":case"Mod":return[zH(mX("a",e,t,n),mX("b",e,t,n))];case"Mul":return[Bz(mX("a",e,t,n),mX("b",e,t,n))];case"RealDiv":case"Div":return[Uz(mX("a",e,t,n),mX("b",e,t,n))];case"DivNoNan":return[wH(mX("a",e,t,n),mX("b",e,t,n))];case"FloorDiv":return[Wz(mX("a",e,t,n),mX("b",e,t,n))];case"Sub":return[Kz(mX("a",e,t,n),mX("b",e,t,n))];case"Minimum":return[AG(mX("a",e,t,n),mX("b",e,t,n))];case"Maximum":return[_W(mX("a",e,t,n),mX("b",e,t,n))];case"Pow":return[vV(mX("a",e,t,n),mX("b",e,t,n))];case"SquaredDifference":return[FG(mX("a",e,t,n),mX("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return iG((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[HU(mX("x",e,t,n))];case"Acos":return[BG(mX("x",e,t,n))];case"Acosh":return[PG(mX("x",e,t,n))];case"Asin":return[qG(mX("x",e,t,n))];case"Asinh":return[jG(mX("x",e,t,n))];case"Atan":return[KG(mX("x",e,t,n))];case"Atan2":return[XG(mX("x",e,t,n),mX("y",e,t,n))];case"Atanh":return[YG(mX("x",e,t,n))];case"Ceil":return[oH(mX("x",e,t,n))];case"Complex":return[GL(mX("real",e,t,n),mX("imag",e,t,n))];case"Cos":return[GV(mX("x",e,t,n))];case"Cosh":return[qV(mX("x",e,t,n))];case"Elu":return[JW(mX("x",e,t,n))];case"Erf":return[vH(mX("x",e,t,n))];case"Exp":return[SP(mX("x",e,t,n))];case"Expm1":return[NH(mX("x",e,t,n))];case"Floor":return[hV(mX("x",e,t,n))];case"Log":return[kV(mX("x",e,t,n))];case"Log1p":return[OG(mX("x",e,t,n))];case"Imag":return[LW(mX("x",e,t,n))];case"Neg":return[Gz(mX("x",e,t,n))];case"Reciprocal":return[gq(mX("x",e,t,n))];case"Real":return[zW(mX("x",e,t,n))];case"Relu":return[tU(mX("x",e,t,n))];case"Round":return[kq(mX("x",e,t,n))];case"Selu":return[vq(mX("x",e,t,n))];case"Sigmoid":return[fW(mX("x",e,t,n))];case"Sin":return[nP(mX("x",e,t,n))];case"Sign":return[Iq(mX("x",e,t,n))];case"Sinh":return[sP(mX("x",e,t,n))];case"Softplus":return[CH(mX("x",e,t,n))];case"Sqrt":return[qz(mX("x",e,t,n))];case"Square":return[jz(mX("x",e,t,n))];case"Tanh":return[QG(mX("x",e,t,n))];case"Tan":return[Rq(mX("x",e,t,n))];case"ClipByValue":return[iH(mX("x",e,t,n),mX("clipValueMin",e,t,n),mX("clipValueMax",e,t,n))];case"Relu6":return[nU(mX("x",e,t,n))];case"Rsqrt":return[DP(gX(e.inputNames[0],t,n))];case"Prod":return[YH(mX("x",e,t,n),mX("axes",e,t,n))];case"LeakyRelu":return[QW(mX("x",e,t,n),mX("alpha",e,t,n))];case"Prelu":return[eU(mX("x",e,t,n),mX("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return vY(e,t,n);case"convolution":return iG((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=mX("stride",e,t,n),s=mX("pad",e,t,n),a=mX("dataFormat",e,t,n).toUpperCase(),o=mX("dilation",e,t,n);return[hH(mX("x",e,t,n),mX("filter",e,t,n),r,s,a,o)]}case"Conv2D":{const r=mX("strides",e,t,n),s=wX(e,t,n),a=mX("dataFormat",e,t,n).toUpperCase(),o=mX("dilations",e,t,n);return[ZB(mX("x",e,t,n),mX("filter",e,t,n),[r[1],r[2]],s,a,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:l,activationFunc:u,leakyreluAlpha:c}=NY(e,t,n);return[UW.conv2d({x:mX("x",e,t,n),filter:mX("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:l,activationFunc:u,leakyreluAlpha:c}=NY(e,t,n);return[UW.depthwiseConv2d({x:mX("x",e,t,n),filter:mX("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=mX("outputShape",e,t,n),s=mX("strides",e,t,n),a=wX(e,t,n);return[dH(mX("x",e,t,n),mX("filter",e,t,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=mX("strides",e,t,n),s=wX(e,t,n),a=mX("dilations",e,t,n),o=mX("dataFormat",e,t,n).toUpperCase();return[lU(mX("input",e,t,n),mX("filter",e,t,n),[r[1],r[2]],s,o,[a[1],a[2]])]}case"Conv3D":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("dataFormat",e,t,n).toUpperCase(),o=mX("dilations",e,t,n);return[fH(mX("x",e,t,n),mX("filter",e,t,n),[r[1],r[2],r[3]],s,a,[o[1],o[2],o[3]])]}case"AvgPool":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("kernelSize",e,t,n);return[ZG(mX("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("kernelSize",e,t,n);return[_H(mX("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("kernelSize",e,t,n),o=mX("includeBatchInIndex",e,t,n),{result:i,indexes:l}=MH(mX("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s,o);return[i,l]}case"AvgPool3D":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("kernelSize",e,t,n);return[JG(mX("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("kernelSize",e,t,n);return[OH(mX("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=mX("strides",e,t,n),s=mX("pad",e,t,n),a=mX("dilations",e,t,n),o=r[1],i=r[2],l=a[1],u=a[2];return[xH(mX("x",e,t,n),mX("filter",e,t,n),[o,i],s,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return iG((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=mX("shape",e,t,n),s=mX("dtype",e,t,n);return[yU(r,mX("value",e,t,n),s)]}case"LinSpace":return[EH(mX("start",e,t,n),mX("stop",e,t,n),mX("num",e,t,n))];case"Multinomial":{const r=mX("logits",e,t,n),s=mX("numSamples",e,t,n),a=mX("seed",e,t,n);return[VH(r,s,a)]}case"OneHot":{const r=mX("indices",e,t,n),s=mX("depth",e,t,n),a=mX("onValue",e,t,n),o=mX("offValue",e,t,n);return[WH(r,s,a,o)]}case"Ones":return[oV(mX("shape",e,t,n),mX("dtype",e,t,n))];case"OnesLike":return[UH(mX("x",e,t,n))];case"RandomUniform":return[mq(mX("shape",e,t,n),mX("minval",e,t,n),mX("maxval",e,t,n),mX("dtype",e,t,n))];case"Range":return[WU(mX("start",e,t,n),mX("stop",e,t,n),mX("step",e,t,n),mX("dtype",e,t,n))];case"TruncatedNormal":{const r=mX("shape",e,t,n),s=mX("mean",e,t,n),a=mX("stdDev",e,t,n),o=mX("seed",e,t,n);return[zq(r,s,a,mX("dtype",e,t,n),o)]}case"Zeros":return[aV(mX("shape",e,t,n),mX("dtype",e,t,n))];case"ZerosLike":return[aB(mX("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i,softNmsSigma:l}=SY(e,t,n),u=await Tj.nonMaxSuppressionWithScoreAsync(r,s,a,o,i,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=SY(e,t,n),l=mX("padToMaxOutputSize",e,t,n),u=await Tj.nonMaxSuppressionPaddedAsync(r,s,a,o,i,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=SY(e,t,n);return[await Tj.nonMaxSuppressionAsync(r,s,a,o,i)]}case"Where":{const r=Mz(mX("condition",e,t,n),"bool"),s=[await Wq(r)];return r.dispose(),s}case"ListDiff":return Sq(mX("x",e,t,n),mX("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return iG((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=mX("x",e,t,n),s=mX("k",e,t,n),a=mX("sorted",e,t,n),o=Lq(r,s,a);return[o.values,o.indices]}case"Unique":{const r=mX("x",e,t,n),s=Bq(r);return[s.values,s.indices]}case"UniqueV2":{const r=mX("x",e,t,n),s=mX("axis",e,t,n),a=Bq(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return iG((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=mX("images",e,t,n),s=mX("size",e,t,n),a=mX("alignCorners",e,t,n),o=mX("halfPixelCenters",e,t,n);return[Tj.resizeBilinear(r,[s[0],s[1]],a,o)]}case"ResizeNearestNeighbor":{const r=mX("images",e,t,n),s=mX("size",e,t,n),a=mX("alignCorners",e,t,n),o=mX("halfPixelCenters",e,t,n);return[Tj.resizeNearestNeighbor(r,[s[0],s[1]],a,o)]}case"CropAndResize":{const r=mX("image",e,t,n),s=mX("boxes",e,t,n),a=mX("boxInd",e,t,n),o=mX("cropSize",e,t,n),i=mX("method",e,t,n),l=mX("extrapolationValue",e,t,n);return[Tj.cropAndResize(r,s,a,o,i,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return iG((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=mX("default",e,t,n);return[gX(e.name,t,n)||r];case"Placeholder":return[gX(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[kX(mX("x",e,t,n))];case"IdentityN":return mX("x",e,t,n).map((e=>kX(e)));case"Shape":return[hU(mX("x",e,t,n).shape,"int32")];case"ShapeN":return mX("x",e,t,n).map((e=>hU(e.shape)));case"Size":return[Hz(mX("x",e,t,n).size,"int32")];case"Rank":return[Hz(mX("x",e,t,n).rank,"int32")];case"NoOp":return[Hz(1)];case"Print":const s=mX("x",e,t,n),a=mX("data",e,t,n),o=mX("message",e,t,n),i=mX("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,i));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return iG((()=>((e,t,n)=>{switch(e.op){case"Equal":return[YP(mX("a",e,t,n),mX("b",e,t,n))];case"NotEqual":return[IG(mX("a",e,t,n),mX("b",e,t,n))];case"Greater":return[UP(mX("a",e,t,n),mX("b",e,t,n))];case"GreaterEqual":return[BB(mX("a",e,t,n),mX("b",e,t,n))];case"Less":return[QP(mX("a",e,t,n),mX("b",e,t,n))];case"LessEqual":return[PB(mX("a",e,t,n),mX("b",e,t,n))];case"LogicalAnd":return[VB(mX("a",e,t,n),mX("b",e,t,n))];case"LogicalNot":return[MV(mX("a",e,t,n))];case"LogicalOr":return[RH(mX("a",e,t,n),mX("b",e,t,n))];case"Select":case"SelectV2":return[UB(mX("condition",e,t,n),mX("a",e,t,n),mX("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return iG((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[RB(mX("a",e,t,n),mX("b",e,t,n),mX("transposeA",e,t,n),mX("transposeB",e,t,n))];case"Transpose":return[yP(mX("x",e,t,n),mX("perm",e,t,n))];case"_FusedMatMul":const[r,s]=mX("fusedOps",e,t,n),a="biasadd"===r,o="prelu"===s,i=mX("numArgs",e,t,n),l=mX("leakyreluAlpha",e,t,n);if(a){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=mX("args",e,t,n);return[UW.matMul({a:mX("a",e,t,n),b:mX("b",e,t,n),transposeA:mX("transposeA",e,t,n),transposeB:mX("transposeB",e,t,n),bias:u,activation:s,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return iG((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[tH(mX("x",e,t,n),mX("mean",e,t,n),mX("variance",e,t,n),mX("offset",e,t,n),mX("scale",e,t,n),mX("epsilon",e,t,n))];case"LRN":return[$H(mX("x",e,t,n),mX("radius",e,t,n),mX("bias",e,t,n),mX("alpha",e,t,n),mX("beta",e,t,n))];case"Softmax":return[Aq(mX("x",e,t,n))];case"LogSoftmax":return[DH(mX("x",e,t,n))];case"SparseToDense":return[yj(mX("sparseIndices",e,t,n),mX("outputShape",e,t,n),mX("sparseValues",e,t,n),mX("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return iG((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[qU(mX("x",e,t,n),r,s)]}case"Mean":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[SG(mX("x",e,t,n),r,s)]}case"Min":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[jU(mX("x",e,t,n),r,s)]}case"Sum":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[nB(mX("x",e,t,n),r,s)]}case"All":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[WG(mX("x",e,t,n),r,s)]}case"Any":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[UG(mX("x",e,t,n),r,s)]}case"ArgMax":{const r=mX("axis",e,t,n);return[GG(mX("x",e,t,n),r)]}case"ArgMin":{const r=mX("axis",e,t,n);return[HG(mX("x",e,t,n),r)]}case"Prod":{const r=mX("axis",e,t,n),s=mX("keepDims",e,t,n);return[YH(mX("x",e,t,n),r,s)]}case"Cumsum":{const r=mX("axis",e,t,n),s=mX("exclusive",e,t,n),a=mX("reverse",e,t,n);return[mP(mX("x",e,t,n),r,s,a)]}case"Bincount":const r=mX("x",e,t,n),s=mX("weights",e,t,n),a=mX("size",e,t,n);return[aH(r,s,a)];case"DenseBincount":{const r=mX("x",e,t,n),s=mX("weights",e,t,n),a=mX("size",e,t,n),o=mX("binaryOutput",e,t,n);return[gH(r,s,a,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return iG((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=mX("n",e,t,n),s=mX("axis",e,t,n);let a=mX("tensors",e,t,n);return a=a.slice(0,r),[bW(a,s)]}case"Gather":{const r=mX("x",e,t,n),s=mX("indices",e,t,n);return[FW(r,Mz(s,"int32"),0)]}case"GatherV2":{const r=mX("axis",e,t,n),s=mX("batchDims",e,t,n),a=mX("x",e,t,n),o=mX("indices",e,t,n);return[FW(a,Mz(o,"int32"),r,s)]}case"Reverse":{const r=mX("dims",e,t,n),s=[];for(let e=0;e<r.length;e++)r[e]&&s.push(e);const a=mX("x",e,t,n);return[RV(a,s)]}case"ReverseV2":{const r=mX("axis",e,t,n),s=mX("x",e,t,n);return[RV(s,r)]}case"Slice":{const r=mX("begin",e,t,n),s=mX("size",e,t,n);return[cV(mX("x",e,t,n),r,s)]}case"StridedSlice":{const r=mX("begin",e,t,n),s=mX("end",e,t,n),a=mX("strides",e,t,n),o=mX("beginMask",e,t,n),i=mX("endMask",e,t,n),l=mX("ellipsisMask",e,t,n),u=mX("newAxisMask",e,t,n),c=mX("shrinkAxisMask",e,t,n),p=mX("x",e,t,n);return[Dq(p,r,s,a,o,i,l,u,c)]}case"Pack":return iG((()=>{const r=mX("axis",e,t,n),s=mX("tensors",e,t,n),a=s[0].shape,o=YU(s[0]).shape,i=s.map((e=>{const t=KM.arraysEqual(e.shape,a);if(!t&&!KM.arraysEqual(YU(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:tB(e,a)}));return[AW(i,r)]}));case"Unpack":{const r=mX("axis",e,t,n),s=mX("tensor",e,t,n);return bV(s,r)}case"Tile":{const r=mX("reps",e,t,n);return[RP(mX("x",e,t,n),r)]}case"Split":case"SplitV":{const r=mX("axis",e,t,n),s=mX("numOrSizeSplits",e,t,n),a=mX("x",e,t,n);return qB(a,s,r)}case"ScatterNd":{const r=mX("indices",e,t,n),s=mX("values",e,t,n),a=mX("shape",e,t,n);return[mj(r,s,a)]}case"GatherNd":{const r=mX("x",e,t,n),s=mX("indices",e,t,n);return[xj(r,s)]}case"SparseToDense":{const r=mX("sparseIndices",e,t,n),s=mX("outputShape",e,t,n),a=mX("sparseValues",e,t,n),o=mX("defaultValue",e,t,n);return[yj(r,a,s,a.dtype===o.dtype?o:Mz(o,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return iG((()=>((e,t,n)=>{switch(e.op){case"FFT":return[BW(mX("x",e,t,n))];case"IFFT":return[VW(mX("x",e,t,n))];case"RFFT":return[PW(mX("x",e,t,n))];case"IRFFT":return[WW(mX("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return iG((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Mz(mX("x",e,t,n),mX("dtype",e,t,n))];case"ExpandDims":{const r=mX("axis",e,t,n);return[RW(mX("x",e,t,n),r)]}case"Squeeze":{const r=mX("axis",e,t,n);return[YU(mX("x",e,t,n),r)]}case"Reshape":return[tB(mX("x",e,t,n),mX("shape",e,t,n))];case"MirrorPad":return[LH(mX("x",e,t,n),mX("padding",e,t,n),mX("mode",e,t,n))];case"PadV2":case"Pad":return[KV(mX("x",e,t,n),mX("padding",e,t,n),mX("constantValue",e,t,n))];case"SpaceToBatchND":{const r=mX("blockShape",e,t,n),s=mX("paddings",e,t,n);return[_B(mX("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=mX("blockShape",e,t,n),s=mX("crops",e,t,n);return[gW(mX("x",e,t,n),r,s)]}case"DepthToSpace":{const r=mX("blockSize",e,t,n),s=mX("dataFormat",e,t,n).toUpperCase();return[yH(mX("x",e,t,n),r,s)]}case"BroadcastTo":return[WB(mX("x",e,t,n),mX("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=mX("keyDType",e,t,n),a=mX("valueDType",e,t,n),o=new IY(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=mX("tableHandle",e,t,n,r),a=mX("keys",e,t,n),o=mX("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=mX("tableHandle",e,t,n,r),a=mX("keys",e,t,n),o=mX("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=fX(e.op);if(s&&s.customExecutor)return s.customExecutor(new bY(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return KM.isPromise(s)?s.then((e=>[].concat(e))):[].concat(s)}class EY{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function $Y(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const l=new Set,u=Object.keys(e).map((e=>xX(e)[0]));let c=[];null!=r&&(c=r.map((e=>xX(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(RY(e)||FY(e)||_Y(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const CY=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],AY=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],DY=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function RY(e){return CY.indexOf(e.op)>=0}function FY(e){return AY.indexOf(e.op)>=0}function _Y(e){return DY.indexOf(e.op)>=0}class OY{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new OY(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=$Y(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>xX(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[xX(e)[0]])),s=t.map((e=>xX(e)[0]));let a=s.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const l={},u={};return iG((()=>{const n=new EY(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=xX(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=TY(t,r,n,this._resourceManager);if(KM.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>gX(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[bX(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!s.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new EY(this.weightMap,r,s,this.functionExecutorMap),o=await this.executeWithControlFlow(e,a,t,n),i=t.map((e=>gX(e,o,a))),l=i.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(o).forEach((e=>{o[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[xX(e)[0]])),o=n.map((e=>xX(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:p}=$Y(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=xX(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(a,h,t,d,g,m,o,f,l);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!RY(e)&&!gX(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&mX("isConstant",e.node,r,n)&&([c]=yX(e.node.name,n)),null==r[e.node.name]){const p=TY(e.node,r,n,this._resourceManager);c||([c]=yX(e.node.name,n));const h=n.currentContext;KM.isPromise(p)?u.push(p.then((u=>(r[c]=u,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l),u)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,l))}else this.processChildNodes(e.node,t,n,r,s,l)}return u}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=yX(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!gX(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!gX(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=xX(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));KM.assert(t,(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&KM.assert(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=xX(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=xX(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class MY{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class LY{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new MY}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Aj.browserHTTPRequest(e,this.loadOptions);else{const t=Aj.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(Aj.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=Aj.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new OY(rY.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=rY.Instance.transformGraph(e.modelInitializer);this.initializer=new OY(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Aj.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof dL||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function zY(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new LY(e,t);return await n.load(),n}
/** @license See the LICENSE file. */function BY(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function i(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){e.done?s(e.value):new n((function(t){t(e.value)})).then(o,i)}l((r=r.apply(e,t||[])).next())}))}function PY(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a}var VY={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},WY={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},UY={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};var GY=function(){function e(e,t,n,r,s){void 0===r&&(r=-1),void 0===s&&(s=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=r,this.inputMax=s,this.normalizationConstant=(s-r)/255}return e.prototype.load=function(){return BY(this,void 0,void 0,(function(){var e,t,n,r,s=this;return PY(this,(function(a){switch(a.label){case 0:return this.modelUrl?(e=this,[4,zY(this.modelUrl)]):[3,2];case 1:return e.model=a.sent(),[3,4];case 2:return t=UY[this.version][this.alpha].url,n=this,[4,zY(t,{fromTFHub:!0})];case 3:n.model=a.sent(),a.label=4;case 4:return[4,(r=iG((function(){return s.model.predict(aV([1,224,224,3]))}))).data()];case 5:return a.sent(),r.dispose(),[2]}}))}))},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),iG((function(){e instanceof dL||(e=Yj.fromPixels(e));var r=uB(Bz(Mz(e,"float32"),n.normalizationConstant),n.inputMin),s=r;224===e.shape[0]&&224===e.shape[1]||(s=Tj.resizeBilinear(r,[224,224],!0));var a,o=tB(s,[-1,224,224,3]);if(t){var i=WY[n.version],l=n.model.execute(o,i);a=YU(l,[1,2])}else{var u=n.model.predict(o);a=cV(u,[0,1],[-1,1e3])}return a}))},e.prototype.classify=function(e,t){return void 0===t&&(t=3),BY(this,void 0,void 0,(function(){var n,r;return PY(this,(function(s){switch(s.label){case 0:return[4,HY(n=this.infer(e),t)];case 1:return r=s.sent(),n.dispose(),[2,r]}}))}))},e}();function HY(e,t){return BY(this,void 0,void 0,(function(){var n,r,s,a,o,i,l;return PY(this,(function(u){switch(u.label){case 0:return[4,(n=Aq(e)).data()];case 1:for(r=u.sent(),n.dispose(),s=[],l=0;l<r.length;l++)s.push({value:r[l],index:l});for(s.sort((function(e,t){return t.value-e.value})),a=new Float32Array(t),o=new Int32Array(t),l=0;l<t;l++)a[l]=s[l].value,o[l]=s[l].index;for(i=[],l=0;l<o.length;l++)i.push({className:VY[o[l]],probability:a[l]});return[2,i]}}))}))}function qY(e,t){return null==e&&null==t?null:null==e?t.clone():null===t?e.clone():e.concat(t,0)}function jY(e,t){for(var n=[],r=0;r<e.length;r++)n.push({value:e[r],index:r});n.sort((function(e,t){return t.value-e.value}));var s=new Float32Array(t),a=new Int32Array(t);for(r=0;r<t;r++)s[r]=n[r].value,a[r]=n[r].index;return{values:s,indices:a}}var KY=function(){function e(){this.classDatasetMatrices={},this.classExampleCount={},this.labelToClassId={},this.nextClassId=0}return e.prototype.addExample=function(e,t){var n=this;if(null==this.exampleShape&&(this.exampleShape=e.shape),!KM.arraysEqual(this.exampleShape,e.shape))throw new Error("Example shape provided, "+e.shape+" does not match previously provided example shapes "+this.exampleShape+".");this.clearTrainDatasetMatrix(),t in this.labelToClassId||(this.labelToClassId[t]=this.nextClassId++),iG((function(){var r=n.normalizeVectorToUnitLength(e.flatten()),s=r.shape[0];if(null==n.classDatasetMatrices[t])n.classDatasetMatrices[t]=r.as2D(1,s);else{var a=n.classDatasetMatrices[t].as2D(n.classExampleCount[t],s).concat(r.as2D(1,s),0);n.classDatasetMatrices[t].dispose(),n.classDatasetMatrices[t]=a}uG(n.classDatasetMatrices[t]),null==n.classExampleCount[t]&&(n.classExampleCount[t]=0),n.classExampleCount[t]++}))},e.prototype.similarities=function(e){var t=this;return iG((function(){var n=t.normalizeVectorToUnitLength(e.flatten()),r=n.shape[0];if(null==t.trainDatasetMatrix){var s=null;for(var a in t.classDatasetMatrices)s=qY(s,t.classDatasetMatrices[a]);t.trainDatasetMatrix=s}if(null==t.trainDatasetMatrix)return console.warn("Cannot predict without providing training examples."),null;uG(t.trainDatasetMatrix);var o=t.getNumExamples();return t.trainDatasetMatrix.as2D(o,r).matMul(n.as2D(r,1)).as1D()}))},e.prototype.predictClass=function(e,t){return void 0===t&&(t=3),n=this,r=void 0,a=function(){var n,r,s,a,o=this;return function(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a}(this,(function(i){switch(i.label){case 0:if(t<1)throw new Error("Please provide a positive integer k value to predictClass.");if(0===this.getNumExamples())throw new Error("You have not added any examples to the KNN classifier. Please add examples before calling predictClass.");return n=iG((function(){return o.similarities(e).asType("float32")})),r=Math.min(t,this.getNumExamples()),a=jY,[4,n.data()];case 1:return s=a.apply(void 0,[i.sent(),r]).indices,n.dispose(),[2,this.calculateTopClass(s,r)]}}))},new((s=void 0)||(s=Promise))((function(e,t){function o(e){try{l(a.next(e))}catch(e){t(e)}}function i(e){try{l(a.throw(e))}catch(e){t(e)}}function l(t){t.done?e(t.value):new s((function(e){e(t.value)})).then(o,i)}l((a=a.apply(n,r||[])).next())}));var n,r,s,a},e.prototype.clearClass=function(e){if(null==this.classDatasetMatrices[e])throw new Error("Cannot clear invalid class "+e);this.classDatasetMatrices[e].dispose(),delete this.classDatasetMatrices[e],delete this.classExampleCount[e],this.clearTrainDatasetMatrix()},e.prototype.clearAllClasses=function(){for(var e in this.classDatasetMatrices)this.clearClass(e)},e.prototype.getClassExampleCount=function(){return this.classExampleCount},e.prototype.getClassifierDataset=function(){return this.classDatasetMatrices},e.prototype.getNumClasses=function(){return Object.keys(this.classExampleCount).length},e.prototype.setClassifierDataset=function(e){for(var t in this.clearTrainDatasetMatrix(),this.classDatasetMatrices=e,e)this.classExampleCount[t]=e[t].shape[0]},e.prototype.calculateTopClass=function(e,t){var n,r={};if(null==e)return{classIndex:this.labelToClassId[n],label:n,confidences:r};var s={},a=0;for(var o in this.classDatasetMatrices)a+=this.classExampleCount[o],s[o]=a;var i={};for(var o in this.classDatasetMatrices)i[o]=0;for(var l=0;l<e.length;l++){var u=e[l];for(var o in this.classDatasetMatrices)if(u<s[o]){i[o]++;break}}var c=0;for(var o in this.classDatasetMatrices){var p=i[o]/t;p>c&&(c=p,n=o),r[o]=p}return{classIndex:this.labelToClassId[n],label:n,confidences:r}},e.prototype.clearTrainDatasetMatrix=function(){null!=this.trainDatasetMatrix&&(this.trainDatasetMatrix.dispose(),this.trainDatasetMatrix=null)},e.prototype.normalizeVectorToUnitLength=function(e){return iG((function(){var t=e.norm();return Uz(e,t)}))},e.prototype.getNumExamples=function(){var e=0;for(var t in this.classDatasetMatrices)e+=this.classExampleCount[t];return e},e.prototype.dispose=function(){for(var e in this.clearTrainDatasetMatrix(),this.classDatasetMatrices)this.classDatasetMatrices[e].dispose()},e}();function XY(){return new KY}const YY=XY();let ZY;const JY=await function(e){return void 0===e&&(e={version:1,alpha:1}),BY(this,void 0,void 0,(function(){var t,n,r,s,a,o,i;return PY(this,(function(l){switch(l.label){case 0:if(null==LR)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(r=e.version.toFixed(2),s=e.alpha?e.alpha.toFixed(2):"",a=-1,o=1,null==e.modelUrl){if(!(r in UY))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(UY));if(!(s in UY[r]))throw new Error("MobileNet constructed with invalid alpha "+e.alpha+". Valid multipliers for this version are: "+Object.keys(UY[r])+".");t=UY[r][s].inputRange,a=t[0],o=t[1]}return null!=e.inputRange&&(n=e.inputRange,a=n[0],o=n[1]),[4,(i=new GY(r,s,e.modelUrl,a,o)).load()];case 1:return l.sent(),[2,i]}}))}))}(),QY=Js.fromPixels(document.getElementById("class0")),eZ=JY.infer(QY,!0);YY.addExample(eZ,0);const tZ=Js.fromPixels(document.getElementById("class1")),nZ=JY.infer(tZ,!0);function rZ(){var e,t,n,r,s;ZY=JSON.stringify(Object.entries(YY.getClassifierDataset()).map((([e,t])=>[e,Array.from(t.dataSync()),t.shape]))),e=ZY,t="data.json",n="text/plain",r=document.createElement("a"),s=new Blob([e],{type:n}),r.href=URL.createObjectURL(s),r.download=t,r.click()}YY.addExample(nZ,1);let sZ=document.getElementById("save"),aZ=document.getElementById("load"),oZ=document.getElementById("predict");sZ.onclick=function(){rZ()},aZ.onclick=function(){!async function(){str=await fetch("./data.json").then((e=>e.json())),YY=XY(),YY.setClassifierDataset(Object.fromEntries(JSON.parse(str).map((([e,t,n])=>[e,Cn(t,n)]))))}()},oZ.onclick=function(){!function(){const e=Js.fromPixels(document.getElementById("test")),t=JY.infer(e,!0);console.log("Predictions:"),console.log(YY.predictClass(t))}()};
//# sourceMappingURL=index.8495aabf.js.map
